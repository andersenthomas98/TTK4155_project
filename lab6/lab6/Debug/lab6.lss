
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  00001110  000011a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001110  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001c4  008001c4  00001268  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ff  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b5  00000000  00000000  00003977  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000133a  00000000  00000000  00004b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005fc  00000000  00000000  00005e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080f  00000000  00000000  00006464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000111d  00000000  00000000  00006c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00007d90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_1>
       8:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_2>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e0 e1       	ldi	r30, 0x10	; 16
      84:	f1 e1       	ldi	r31, 0x11	; 17
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 3c       	cpi	r26, 0xC4	; 196
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	a4 ec       	ldi	r26, 0xC4	; 196
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a0 3d       	cpi	r26, 0xD0	; 208
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 c8 03 	call	0x790	; 0x790 <main>
      a6:	0c 94 86 08 	jmp	0x110c	; 0x110c <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_read_x>:



uint8_t ADC_read_x(void) {
	// Setup to read from channel 1
	XMEM_write(0b0100, 0b010000000100);
      ae:	64 e0       	ldi	r22, 0x04	; 4
      b0:	74 e0       	ldi	r23, 0x04	; 4
      b2:	84 e0       	ldi	r24, 0x04	; 4
      b4:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
	while (!ADC_INTERRUPT_READY) {
      b8:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__data_end>
      bc:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <__data_end+0x1>
      c0:	89 2b       	or	r24, r25
      c2:	d1 f3       	breq	.-12     	; 0xb8 <ADC_read_x+0xa>
		// wait for interrupt from ADC
		//printf("waiting for interrupt\n\r");
	}
	ADC_INTERRUPT_READY = 0;
      c4:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <__data_end+0x1>
      c8:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <__data_end>
	uint8_t x = XMEM_read(0b010000000000);
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	94 e0       	ldi	r25, 0x04	; 4
      d0:	0e 94 c0 03 	call	0x780	; 0x780 <XMEM_read>
	//printf("read_x = %d \n\r", x);
	return x;
}
      d4:	08 95       	ret

000000d6 <ADC_read_y>:

uint8_t ADC_read_y(void) {
	// Setup to read from channel 2
	XMEM_write(0b0101, 0b010000000101);
      d6:	65 e0       	ldi	r22, 0x05	; 5
      d8:	74 e0       	ldi	r23, 0x04	; 4
      da:	85 e0       	ldi	r24, 0x05	; 5
      dc:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
	while (!ADC_INTERRUPT_READY) {
      e0:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__data_end>
      e4:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <__data_end+0x1>
      e8:	89 2b       	or	r24, r25
      ea:	d1 f3       	breq	.-12     	; 0xe0 <ADC_read_y+0xa>
		// wait for interrupt from ADC
	}
	ADC_INTERRUPT_READY = 0;
      ec:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <__data_end+0x1>
      f0:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <__data_end>
	uint8_t y = XMEM_read(0b010000000000);
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	94 e0       	ldi	r25, 0x04	; 4
      f8:	0e 94 c0 03 	call	0x780	; 0x780 <XMEM_read>
	//printf("read_y = %d \n\r", y);
	return y;
}
      fc:	08 95       	ret

000000fe <CAN_init>:
#include <stdlib.h>
#include <stddef.h>
#include "uart.h"


void CAN_init(uint8_t mode) {
      fe:	cf 93       	push	r28
     100:	c8 2f       	mov	r28, r24
	MCP_init();
     102:	0e 94 6d 02 	call	0x4da	; 0x4da <MCP_init>
	
	// Enable recieve, transmit and message error interrupts
	MCP_write(MCP_CANINTE, 0b10000101);
     106:	65 e8       	ldi	r22, 0x85	; 133
     108:	8b e2       	ldi	r24, 0x2B	; 43
     10a:	0e 94 80 02 	call	0x500	; 0x500 <MCP_write>

	MCP_bitModify(MCP_CANCTRL, MODE_MASK, mode);	//enter specified mode
     10e:	4c 2f       	mov	r20, r28
     110:	60 ee       	ldi	r22, 0xE0	; 224
     112:	8f e0       	ldi	r24, 0x0F	; 15
     114:	0e 94 ab 02 	call	0x556	; 0x556 <MCP_bitModify>
	MCP_bitModify(MCP_RXB0CTRL, 0b01100000, 0b01100000); // Turn mask/filters off, recieve any message
     118:	40 e6       	ldi	r20, 0x60	; 96
     11a:	60 e6       	ldi	r22, 0x60	; 96
     11c:	80 e6       	ldi	r24, 0x60	; 96
     11e:	0e 94 ab 02 	call	0x556	; 0x556 <MCP_bitModify>
	
	if (MCP_read(MCP_CANCTRL) & 0b01000000) {
     122:	8f e0       	ldi	r24, 0x0F	; 15
     124:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCP_read>
     128:	86 ff       	sbrs	r24, 6
     12a:	08 c0       	rjmp	.+16     	; 0x13c <CAN_init+0x3e>
		printf("CAN controller in loopback mode\n\r");
     12c:	86 e0       	ldi	r24, 0x06	; 6
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	9f 93       	push	r25
     132:	8f 93       	push	r24
     134:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
     138:	0f 90       	pop	r0
     13a:	0f 90       	pop	r0
	}
}
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <CAN_message_send>:

void CAN_message_send(msg_ptr msgPtr) {
     140:	ef 92       	push	r14
     142:	ff 92       	push	r15
     144:	0f 93       	push	r16
     146:	1f 93       	push	r17
     148:	cf 93       	push	r28
     14a:	7c 01       	movw	r14, r24
	// Set TXB0SIDH (higher ID-register)
	MCP_write(MCP_TXB0CTRL + 1, (msgPtr->id));
     14c:	fc 01       	movw	r30, r24
     14e:	60 81       	ld	r22, Z
     150:	81 e3       	ldi	r24, 0x31	; 49
     152:	0e 94 80 02 	call	0x500	; 0x500 <MCP_write>
	// Set TXB0SIDL (lower ID-register)
	MCP_write(MCP_TXB0CTRL + 2, (msgPtr->id) & 0xFF);
	printf("lower ID to be sent = %#X \n\r", (msgPtr->id) & 0xFF);
	*/
	// Set TXB0DLC (length register)
	MCP_write(MCP_TXB0CTRL + 5, (msgPtr->length));
     156:	f7 01       	movw	r30, r14
     158:	61 81       	ldd	r22, Z+1	; 0x01
     15a:	85 e3       	ldi	r24, 0x35	; 53
     15c:	0e 94 80 02 	call	0x500	; 0x500 <MCP_write>
	
	int dataIterator = 0;
	for (uint8_t i = MCP_TXB0CTRL + 6; i <= MCP_TXB0CTRL + 6 + msgPtr->length; i++) {
     160:	f7 01       	movw	r30, r14
     162:	81 81       	ldd	r24, Z+1	; 0x01
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	c6 96       	adiw	r24, 0x36	; 54
     168:	c6 97       	sbiw	r24, 0x36	; 54
     16a:	a4 f0       	brlt	.+40     	; 0x194 <CAN_message_send+0x54>
     16c:	87 01       	movw	r16, r14
     16e:	0e 5f       	subi	r16, 0xFE	; 254
     170:	1f 4f       	sbci	r17, 0xFF	; 255
     172:	c6 e3       	ldi	r28, 0x36	; 54
		MCP_write(i, msgPtr->data[dataIterator]);
     174:	f8 01       	movw	r30, r16
     176:	61 91       	ld	r22, Z+
     178:	8f 01       	movw	r16, r30
     17a:	8c 2f       	mov	r24, r28
     17c:	0e 94 80 02 	call	0x500	; 0x500 <MCP_write>
	*/
	// Set TXB0DLC (length register)
	MCP_write(MCP_TXB0CTRL + 5, (msgPtr->length));
	
	int dataIterator = 0;
	for (uint8_t i = MCP_TXB0CTRL + 6; i <= MCP_TXB0CTRL + 6 + msgPtr->length; i++) {
     180:	cf 5f       	subi	r28, 0xFF	; 255
     182:	2c 2f       	mov	r18, r28
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	f7 01       	movw	r30, r14
     188:	81 81       	ldd	r24, Z+1	; 0x01
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	c6 96       	adiw	r24, 0x36	; 54
     18e:	82 17       	cp	r24, r18
     190:	93 07       	cpc	r25, r19
     192:	84 f7       	brge	.-32     	; 0x174 <CAN_message_send+0x34>
		MCP_write(i, msgPtr->data[dataIterator]);
		dataIterator++;
	}
	
	
	MCP_requestToSend(0);
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 92 02 	call	0x524	; 0x524 <MCP_requestToSend>
	// Transmission of CAN msg will start when the device detects that the bus is available...
}
     19c:	cf 91       	pop	r28
     19e:	1f 91       	pop	r17
     1a0:	0f 91       	pop	r16
     1a2:	ff 90       	pop	r15
     1a4:	ef 90       	pop	r14
     1a6:	08 95       	ret

000001a8 <CAN_message_recieve>:

msg_t CAN_message_recieve(void) {
     1a8:	7f 92       	push	r7
     1aa:	8f 92       	push	r8
     1ac:	9f 92       	push	r9
     1ae:	af 92       	push	r10
     1b0:	bf 92       	push	r11
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	0f 93       	push	r16
     1bc:	1f 93       	push	r17
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	2a 97       	sbiw	r28, 0x0a	; 10
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	cd bf       	out	0x3d, r28	; 61
     1d2:	5c 01       	movw	r10, r24
	msg_t msg;
	
	// Read ID from RXB0SIDH and RXB0SIDL
	uint8_t upperId = MCP_read(MCP_RXB0CTRL + 1);
     1d4:	81 e6       	ldi	r24, 0x61	; 97
     1d6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCP_read>
     1da:	78 2e       	mov	r7, r24
	printf("recieved upper ID = %#X \n\r", upperId);
     1dc:	1f 92       	push	r1
     1de:	8f 93       	push	r24
     1e0:	88 e2       	ldi	r24, 0x28	; 40
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	9f 93       	push	r25
     1e6:	8f 93       	push	r24
     1e8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
	//printf("recieved lower ID = %#X \n\r", lowerId);
	//msg.id =  (upperId << 8) + lowerId;
	msg.id = upperId ;
	
	// Read length from RXB0DLC
	msg.length = MCP_read(MCP_RXB0CTRL + 5);
     1ec:	85 e6       	ldi	r24, 0x65	; 101
     1ee:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCP_read>
     1f2:	08 2f       	mov	r16, r24
	
	// Read data
	int dataIterator = 0;
	for (uint8_t i = MCP_RXB0CTRL + 6; i <= MCP_RXB0CTRL + 6 + msg.length; i++) {
     1f4:	c8 2e       	mov	r12, r24
     1f6:	d1 2c       	mov	r13, r1
     1f8:	26 e6       	ldi	r18, 0x66	; 102
     1fa:	c2 0e       	add	r12, r18
     1fc:	d1 1c       	adc	r13, r1
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	36 e6       	ldi	r19, 0x66	; 102
     208:	c3 16       	cp	r12, r19
     20a:	d1 04       	cpc	r13, r1
     20c:	cc f0       	brlt	.+50     	; 0x240 <CAN_message_recieve+0x98>
     20e:	7e 01       	movw	r14, r28
     210:	83 e0       	ldi	r24, 0x03	; 3
     212:	e8 0e       	add	r14, r24
     214:	f1 1c       	adc	r15, r1
     216:	16 e6       	ldi	r17, 0x66	; 102
     218:	ce 01       	movw	r24, r28
     21a:	80 95       	com	r24
     21c:	90 95       	com	r25
     21e:	fc 01       	movw	r30, r24
     220:	ec 59       	subi	r30, 0x9C	; 156
     222:	ff 4f       	sbci	r31, 0xFF	; 255
     224:	4f 01       	movw	r8, r30
		msg.data[dataIterator] = MCP_read(i);
     226:	81 2f       	mov	r24, r17
     228:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCP_read>
     22c:	f7 01       	movw	r30, r14
     22e:	81 93       	st	Z+, r24
     230:	7f 01       	movw	r14, r30
	// Read length from RXB0DLC
	msg.length = MCP_read(MCP_RXB0CTRL + 5);
	
	// Read data
	int dataIterator = 0;
	for (uint8_t i = MCP_RXB0CTRL + 6; i <= MCP_RXB0CTRL + 6 + msg.length; i++) {
     232:	1f 5f       	subi	r17, 0xFF	; 255
     234:	c4 01       	movw	r24, r8
     236:	8e 0f       	add	r24, r30
     238:	9f 1f       	adc	r25, r31
     23a:	c8 16       	cp	r12, r24
     23c:	d9 06       	cpc	r13, r25
     23e:	9c f7       	brge	.-26     	; 0x226 <CAN_message_recieve+0x7e>
		msg.data[dataIterator] = MCP_read(i);
		dataIterator++;
	}
	return msg;
     240:	79 82       	std	Y+1, r7	; 0x01
     242:	0a 83       	std	Y+2, r16	; 0x02
     244:	8a e0       	ldi	r24, 0x0A	; 10
     246:	fe 01       	movw	r30, r28
     248:	31 96       	adiw	r30, 0x01	; 1
     24a:	d5 01       	movw	r26, r10
     24c:	01 90       	ld	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	8a 95       	dec	r24
     252:	e1 f7       	brne	.-8      	; 0x24c <CAN_message_recieve+0xa4>
} 
     254:	c5 01       	movw	r24, r10
     256:	2a 96       	adiw	r28, 0x0a	; 10
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	1f 91       	pop	r17
     268:	0f 91       	pop	r16
     26a:	ff 90       	pop	r15
     26c:	ef 90       	pop	r14
     26e:	df 90       	pop	r13
     270:	cf 90       	pop	r12
     272:	bf 90       	pop	r11
     274:	af 90       	pop	r10
     276:	9f 90       	pop	r9
     278:	8f 90       	pop	r8
     27a:	7f 90       	pop	r7
     27c:	08 95       	ret

0000027e <joystick_pos>:
#include "adc.h"
#include "can.h"
#include <avr/io.h>


pos_t joystick_pos(void) {
     27e:	cf 93       	push	r28
	int8_t x_pos = (ADC_read_x()*100/131)-100;
     280:	0e 94 57 00 	call	0xae	; 0xae <ADC_read_x>
     284:	c8 2f       	mov	r28, r24
	int8_t y_pos = (ADC_read_y()*100/131)-100;
     286:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read_y>
     28a:	48 2f       	mov	r20, r24
	pos_t pos = {x_pos, y_pos};
	return pos;
     28c:	24 e6       	ldi	r18, 0x64	; 100
     28e:	2c 9f       	mul	r18, r28
     290:	c0 01       	movw	r24, r0
     292:	11 24       	eor	r1, r1
     294:	e3 e8       	ldi	r30, 0x83	; 131
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	bf 01       	movw	r22, r30
     29a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divmodhi4>
     29e:	36 2f       	mov	r19, r22
     2a0:	24 9f       	mul	r18, r20
     2a2:	c0 01       	movw	r24, r0
     2a4:	11 24       	eor	r1, r1
     2a6:	bf 01       	movw	r22, r30
     2a8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divmodhi4>
}
     2ac:	8c e9       	ldi	r24, 0x9C	; 156
     2ae:	83 0f       	add	r24, r19
     2b0:	9c e9       	ldi	r25, 0x9C	; 156
     2b2:	96 0f       	add	r25, r22
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret

000002b8 <joystick_dir>:

dir_t joystick_dir(void) {
	pos_t pos = joystick_pos();
     2b8:	0e 94 3f 01 	call	0x27e	; 0x27e <joystick_pos>
     2bc:	49 2f       	mov	r20, r25
	if (pos.x <= -10 && pos.x*pos.x > pos.y*pos.y){
     2be:	87 3f       	cpi	r24, 0xF7	; 247
     2c0:	54 f4       	brge	.+20     	; 0x2d6 <joystick_dir+0x1e>
     2c2:	88 02       	muls	r24, r24
     2c4:	90 01       	movw	r18, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	99 02       	muls	r25, r25
     2ca:	b0 01       	movw	r22, r0
     2cc:	11 24       	eor	r1, r1
     2ce:	62 17       	cp	r22, r18
     2d0:	73 07       	cpc	r23, r19
     2d2:	64 f4       	brge	.+24     	; 0x2ec <joystick_dir+0x34>
     2d4:	25 c0       	rjmp	.+74     	; 0x320 <joystick_dir+0x68>
		return LEFT;
	}
	else if (pos.x >= 10 && pos.x*pos.x > pos.y*pos.y){
     2d6:	8a 30       	cpi	r24, 0x0A	; 10
     2d8:	4c f0       	brlt	.+18     	; 0x2ec <joystick_dir+0x34>
     2da:	88 02       	muls	r24, r24
     2dc:	90 01       	movw	r18, r0
     2de:	11 24       	eor	r1, r1
     2e0:	99 02       	muls	r25, r25
     2e2:	b0 01       	movw	r22, r0
     2e4:	11 24       	eor	r1, r1
     2e6:	62 17       	cp	r22, r18
     2e8:	73 07       	cpc	r23, r19
     2ea:	e4 f0       	brlt	.+56     	; 0x324 <joystick_dir+0x6c>
		return RIGHT;
	}
	else if (pos.y <= -10 && pos.x*pos.x < pos.y*pos.y){
     2ec:	47 3f       	cpi	r20, 0xF7	; 247
     2ee:	5c f4       	brge	.+22     	; 0x306 <joystick_dir+0x4e>
     2f0:	88 02       	muls	r24, r24
     2f2:	a0 01       	movw	r20, r0
     2f4:	11 24       	eor	r1, r1
     2f6:	99 02       	muls	r25, r25
     2f8:	90 01       	movw	r18, r0
     2fa:	11 24       	eor	r1, r1
     2fc:	42 17       	cp	r20, r18
     2fe:	53 07       	cpc	r21, r19
     300:	9c f4       	brge	.+38     	; 0x328 <joystick_dir+0x70>
		return DOWN;
     302:	83 e0       	ldi	r24, 0x03	; 3
     304:	08 95       	ret
	}
	else if (pos.y >= 10 && pos.x*pos.x < pos.y*pos.y){
     306:	4a 30       	cpi	r20, 0x0A	; 10
     308:	8c f0       	brlt	.+34     	; 0x32c <joystick_dir+0x74>
     30a:	88 02       	muls	r24, r24
     30c:	a0 01       	movw	r20, r0
     30e:	11 24       	eor	r1, r1
     310:	99 02       	muls	r25, r25
     312:	90 01       	movw	r18, r0
     314:	11 24       	eor	r1, r1
     316:	42 17       	cp	r20, r18
     318:	53 07       	cpc	r21, r19
     31a:	54 f4       	brge	.+20     	; 0x330 <joystick_dir+0x78>
		return UP;
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	08 95       	ret
}

dir_t joystick_dir(void) {
	pos_t pos = joystick_pos();
	if (pos.x <= -10 && pos.x*pos.x > pos.y*pos.y){
		return LEFT;
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	08 95       	ret
	}
	else if (pos.x >= 10 && pos.x*pos.x > pos.y*pos.y){
		return RIGHT;
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	08 95       	ret
		return DOWN;
	}
	else if (pos.y >= 10 && pos.x*pos.x < pos.y*pos.y){
		return UP;
	}
	return NEUTRAL;
     328:	84 e0       	ldi	r24, 0x04	; 4
     32a:	08 95       	ret
     32c:	84 e0       	ldi	r24, 0x04	; 4
     32e:	08 95       	ret
     330:	84 e0       	ldi	r24, 0x04	; 4
}
     332:	08 95       	ret

00000334 <send_joystick_dir>:

void send_joystick_dir(void) {
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	2a 97       	sbiw	r28, 0x0a	; 10
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
	msg_t msg;
	msg.id = 0x01;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	89 83       	std	Y+1, r24	; 0x01
	msg.length = 1;
     34c:	8a 83       	std	Y+2, r24	; 0x02
	msg_ptr msgPtr = &msg;
	uint8_t joystickDirection = joystick_dir();
     34e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <joystick_dir>
	msg.data[0] = joystickDirection;
     352:	8b 83       	std	Y+3, r24	; 0x03
	CAN_message_send(msgPtr);
     354:	ce 01       	movw	r24, r28
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	0e 94 a0 00 	call	0x140	; 0x140 <CAN_message_send>
}
     35c:	2a 96       	adiw	r28, 0x0a	; 10
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <btn_init>:

void btn_init(void) {
	DDRB &= ~(1 << PB0);
     36e:	b8 98       	cbi	0x17, 0	; 23
	DDRB &= ~(1 << PB1);
     370:	b9 98       	cbi	0x17, 1	; 23
     372:	08 95       	ret

00000374 <INTERRUPT_init>:
volatile int ADC_INTERRUPT_READY = 0;
//volatile int SPI_TRANSMISSION_COMPLETE = 0;

void INTERRUPT_init() {
	// disable global interrupts (set SREG register)
	cli();
     374:	f8 94       	cli
	
	// Enable that a falling edge generates an interrupt request for INT0
	MCUCR |= (1 << ISC01);
     376:	85 b7       	in	r24, 0x35	; 53
     378:	82 60       	ori	r24, 0x02	; 2
     37a:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     37c:	85 b7       	in	r24, 0x35	; 53
     37e:	8e 7f       	andi	r24, 0xFE	; 254
     380:	85 bf       	out	0x35, r24	; 53
	
	
	// Enable that a falling edge generates an interrupt request for INT1
	MCUCR |= (1 << ISC11);
     382:	85 b7       	in	r24, 0x35	; 53
     384:	88 60       	ori	r24, 0x08	; 8
     386:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);	
     388:	85 b7       	in	r24, 0x35	; 53
     38a:	8b 7f       	andi	r24, 0xFB	; 251
     38c:	85 bf       	out	0x35, r24	; 53

	
	// Enable interrupt on INT0 (from ADC) and INT1 (from MCP)
	GICR |= (1 << INT0);
     38e:	8b b7       	in	r24, 0x3b	; 59
     390:	80 64       	ori	r24, 0x40	; 64
     392:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1); 
     394:	8b b7       	in	r24, 0x3b	; 59
     396:	80 68       	ori	r24, 0x80	; 128
     398:	8b bf       	out	0x3b, r24	; 59
		
	// Enable global interrupts (set SREG register)
	sei();
     39a:	78 94       	sei
     39c:	08 95       	ret

0000039e <__vector_1>:
}

// Interrupt for ADC
ISR(INT0_vect) {
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	8f 93       	push	r24
     3aa:	9f 93       	push	r25
	// Disable global interrupts while executing an ISR (?)
	//cli();
	ADC_INTERRUPT_READY = 1;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <__data_end+0x1>
     3b4:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__data_end>
	// Reset interrupt flag
	//GIFR &= ~(1 << INTF0);
	//GIFR |= (1 << INTF0);
	//printf("routine finished\n\r");
	//sei();
}
     3b8:	9f 91       	pop	r25
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_2>:

// CAN interrupts
ISR(INT1_vect) {
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	2f 93       	push	r18
     3d2:	3f 93       	push	r19
     3d4:	4f 93       	push	r20
     3d6:	5f 93       	push	r21
     3d8:	6f 93       	push	r22
     3da:	7f 93       	push	r23
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
     3e0:	af 93       	push	r26
     3e2:	bf 93       	push	r27
     3e4:	ef 93       	push	r30
     3e6:	ff 93       	push	r31
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
     3f0:	2a 97       	sbiw	r28, 0x0a	; 10
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	cd bf       	out	0x3d, r28	; 61
	if (MCP_read(MCP_CANINTF) & MCP_TX0IF) {
     3f6:	8c e2       	ldi	r24, 0x2C	; 44
     3f8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCP_read>
     3fc:	82 ff       	sbrs	r24, 2
     3fe:	0d c0       	rjmp	.+26     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		printf("Message sendt succesfully\n\r");
     400:	83 e4       	ldi	r24, 0x43	; 67
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	9f 93       	push	r25
     406:	8f 93       	push	r24
     408:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
		
		// Reset transmit flag
		MCP_bitModify(MCP_CANINTF, MCP_TX0IF, 0);
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	64 e0       	ldi	r22, 0x04	; 4
     410:	8c e2       	ldi	r24, 0x2C	; 44
     412:	0e 94 ab 02 	call	0x556	; 0x556 <MCP_bitModify>
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
	}
	// Message recieved at recieve buffer 0
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF) {
     41a:	8c e2       	ldi	r24, 0x2C	; 44
     41c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCP_read>
     420:	80 ff       	sbrs	r24, 0
     422:	2f c0       	rjmp	.+94     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
		struct CAN_message msg = CAN_message_recieve();
     424:	ce 01       	movw	r24, r28
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <CAN_message_recieve>
		printf("--- Message recieved ---\n\r");
     42c:	8f e5       	ldi	r24, 0x5F	; 95
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	9f 93       	push	r25
     432:	8f 93       	push	r24
     434:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
		printf("ID: %#X \n\r", msg.id);
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	1f 92       	push	r1
     43c:	8f 93       	push	r24
     43e:	8a e7       	ldi	r24, 0x7A	; 122
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	9f 93       	push	r25
     444:	8f 93       	push	r24
     446:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
		printf("Length: %d \n\r", msg.length);
     44a:	8a 81       	ldd	r24, Y+2	; 0x02
     44c:	1f 92       	push	r1
     44e:	8f 93       	push	r24
     450:	85 e8       	ldi	r24, 0x85	; 133
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	9f 93       	push	r25
     456:	8f 93       	push	r24
     458:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
		printf("Data[0] = %#X \n\r", msg.data[0]);
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	1f 92       	push	r1
     460:	8f 93       	push	r24
     462:	83 e9       	ldi	r24, 0x93	; 147
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	9f 93       	push	r25
     468:	8f 93       	push	r24
     46a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
	
		// Reset recieve flag
		MCP_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
     46e:	40 e0       	ldi	r20, 0x00	; 0
     470:	61 e0       	ldi	r22, 0x01	; 1
     472:	8c e2       	ldi	r24, 0x2C	; 44
     474:	0e 94 ab 02 	call	0x556	; 0x556 <MCP_bitModify>
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	cd bf       	out	0x3d, r28	; 61
	}
	if (MCP_read(MCP_CANINTF) & MCP_MERRF) {
     482:	8c e2       	ldi	r24, 0x2C	; 44
     484:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCP_read>
     488:	88 23       	and	r24, r24
     48a:	44 f4       	brge	.+16     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		printf("CAN BUS ERROR!");
     48c:	84 ea       	ldi	r24, 0xA4	; 164
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
	}
}
     49c:	2a 96       	adiw	r28, 0x0a	; 10
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	ff 91       	pop	r31
     4ae:	ef 91       	pop	r30
     4b0:	bf 91       	pop	r27
     4b2:	af 91       	pop	r26
     4b4:	9f 91       	pop	r25
     4b6:	8f 91       	pop	r24
     4b8:	7f 91       	pop	r23
     4ba:	6f 91       	pop	r22
     4bc:	5f 91       	pop	r21
     4be:	4f 91       	pop	r20
     4c0:	3f 91       	pop	r19
     4c2:	2f 91       	pop	r18
     4c4:	0f 90       	pop	r0
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	0f 90       	pop	r0
     4ca:	1f 90       	pop	r1
     4cc:	18 95       	reti

000004ce <MCP_reset>:
}


void MCP_reset(void) {
	// Initiate data transmission
	PORTB &= ~(1 << PB4);
     4ce:	c4 98       	cbi	0x18, 4	; 24
	
	// Send RESET instruction
	SPI_transmit(MCP_RESET);
     4d0:	80 ec       	ldi	r24, 0xC0	; 192
     4d2:	0e 94 91 03 	call	0x722	; 0x722 <SPI_transmit>
	
	// End data transmission
	PORTB |= (1 << PB4);
     4d6:	c4 9a       	sbi	0x18, 4	; 24
     4d8:	08 95       	ret

000004da <MCP_init>:
#include <avr/io.h>
#define F_CPU 4915200
#include <avr/delay.h>

void MCP_init(void) {
	SPI_MasterInit();
     4da:	0e 94 84 03 	call	0x708	; 0x708 <SPI_MasterInit>
	MCP_reset();
     4de:	0e 94 67 02 	call	0x4ce	; 0x4ce <MCP_reset>
     4e2:	08 95       	ret

000004e4 <MCP_read>:
	// End data transmission
	PORTB |= (1 << PB4);
}


uint8_t MCP_read(uint8_t address) {
     4e4:	cf 93       	push	r28
     4e6:	c8 2f       	mov	r28, r24
	uint8_t data;
	
	// Select CAN controller
	PORTB &= ~(1 << PB4);
     4e8:	c4 98       	cbi	0x18, 4	; 24
	
	// Send READ instruction
	SPI_transmit(MCP_READ);
     4ea:	83 e0       	ldi	r24, 0x03	; 3
     4ec:	0e 94 91 03 	call	0x722	; 0x722 <SPI_transmit>
	
	// Send address
	SPI_transmit(address);
     4f0:	8c 2f       	mov	r24, r28
     4f2:	0e 94 91 03 	call	0x722	; 0x722 <SPI_transmit>
	
	// Read from address specified over
	data = SPI_read();
     4f6:	0e 94 95 03 	call	0x72a	; 0x72a <SPI_read>
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
     4fa:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;
	
}
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <MCP_write>:

void MCP_write(uint8_t address, uint8_t data) {
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	d8 2f       	mov	r29, r24
     506:	c6 2f       	mov	r28, r22
	// Select CAN controller
	PORTB &= ~(1 << PB4);
     508:	c4 98       	cbi	0x18, 4	; 24
	
	// Send WRITE instruction
	SPI_transmit(MCP_WRITE);
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	0e 94 91 03 	call	0x722	; 0x722 <SPI_transmit>
	
	// Send address
	SPI_transmit(address);
     510:	8d 2f       	mov	r24, r29
     512:	0e 94 91 03 	call	0x722	; 0x722 <SPI_transmit>
	
	// Send data
	SPI_transmit(data);
     516:	8c 2f       	mov	r24, r28
     518:	0e 94 91 03 	call	0x722	; 0x722 <SPI_transmit>
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
     51c:	c4 9a       	sbi	0x18, 4	; 24
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <MCP_requestToSend>:

void MCP_requestToSend(int buffer) {
	// Select CAN controller
	PORTB &= ~(1 << PB4);
     524:	c4 98       	cbi	0x18, 4	; 24
	
	// RTS from buffer 0, 1, 2, or all
	if (buffer == 0) {
     526:	00 97       	sbiw	r24, 0x00	; 0
     528:	21 f4       	brne	.+8      	; 0x532 <MCP_requestToSend+0xe>
		SPI_transmit(MCP_RTS_TX0);
     52a:	81 e8       	ldi	r24, 0x81	; 129
     52c:	0e 94 91 03 	call	0x722	; 0x722 <SPI_transmit>
     530:	10 c0       	rjmp	.+32     	; 0x552 <MCP_requestToSend+0x2e>
	}
	else if (buffer == 1) {
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	91 05       	cpc	r25, r1
     536:	21 f4       	brne	.+8      	; 0x540 <MCP_requestToSend+0x1c>
		SPI_transmit(MCP_RTS_TX1);
     538:	82 e8       	ldi	r24, 0x82	; 130
     53a:	0e 94 91 03 	call	0x722	; 0x722 <SPI_transmit>
     53e:	09 c0       	rjmp	.+18     	; 0x552 <MCP_requestToSend+0x2e>
	}
	else if (buffer == 2) {
     540:	02 97       	sbiw	r24, 0x02	; 2
     542:	21 f4       	brne	.+8      	; 0x54c <MCP_requestToSend+0x28>
		SPI_transmit(MCP_RTS_TX2);
     544:	84 e8       	ldi	r24, 0x84	; 132
     546:	0e 94 91 03 	call	0x722	; 0x722 <SPI_transmit>
     54a:	03 c0       	rjmp	.+6      	; 0x552 <MCP_requestToSend+0x2e>
	}
	else {
		SPI_transmit(MCP_RTS_ALL);
     54c:	87 e8       	ldi	r24, 0x87	; 135
     54e:	0e 94 91 03 	call	0x722	; 0x722 <SPI_transmit>
	}
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
     552:	c4 9a       	sbi	0x18, 4	; 24
     554:	08 95       	ret

00000556 <MCP_bitModify>:
}

void MCP_bitModify(uint8_t address, uint8_t mask, uint8_t data) {
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	18 2f       	mov	r17, r24
     55e:	d6 2f       	mov	r29, r22
     560:	c4 2f       	mov	r28, r20
	// Select CAN controller
	PORTB &= ~(1 << PB4);
     562:	c4 98       	cbi	0x18, 4	; 24
	
	// Send BIT MODIFY instruction
	SPI_transmit(MCP_BITMOD);
     564:	85 e0       	ldi	r24, 0x05	; 5
     566:	0e 94 91 03 	call	0x722	; 0x722 <SPI_transmit>
	
	// Send address of register
	SPI_transmit(address);
     56a:	81 2f       	mov	r24, r17
     56c:	0e 94 91 03 	call	0x722	; 0x722 <SPI_transmit>
	
	// Send mask byte
	SPI_transmit(mask);
     570:	8d 2f       	mov	r24, r29
     572:	0e 94 91 03 	call	0x722	; 0x722 <SPI_transmit>
	
	// Send data byte
	SPI_transmit(data);
     576:	8c 2f       	mov	r24, r28
     578:	0e 94 91 03 	call	0x722	; 0x722 <SPI_transmit>
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
     57c:	c4 9a       	sbi	0x18, 4	; 24
}
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	08 95       	ret

00000586 <OLED_init>:
	uint16_t index = 0x800 + page*128 + x;
	uint8_t value = XMEM_read(index);
	value &= ~(1 << height);
	XMEM_write(value, index);
	}
}
     586:	6e ea       	ldi	r22, 0xAE	; 174
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	8e ea       	ldi	r24, 0xAE	; 174
     58c:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     590:	61 ea       	ldi	r22, 0xA1	; 161
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	81 ea       	ldi	r24, 0xA1	; 161
     596:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     59a:	6a ed       	ldi	r22, 0xDA	; 218
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	8a ed       	ldi	r24, 0xDA	; 218
     5a0:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     5a4:	62 e1       	ldi	r22, 0x12	; 18
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	82 e1       	ldi	r24, 0x12	; 18
     5aa:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     5ae:	68 ec       	ldi	r22, 0xC8	; 200
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	88 ec       	ldi	r24, 0xC8	; 200
     5b4:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     5b8:	68 ea       	ldi	r22, 0xA8	; 168
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	88 ea       	ldi	r24, 0xA8	; 168
     5be:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     5c2:	6f e3       	ldi	r22, 0x3F	; 63
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	8f e3       	ldi	r24, 0x3F	; 63
     5c8:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     5cc:	65 ed       	ldi	r22, 0xD5	; 213
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	85 ed       	ldi	r24, 0xD5	; 213
     5d2:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     5d6:	60 e8       	ldi	r22, 0x80	; 128
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	80 e8       	ldi	r24, 0x80	; 128
     5dc:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     5e0:	61 e8       	ldi	r22, 0x81	; 129
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	81 e8       	ldi	r24, 0x81	; 129
     5e6:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     5ea:	60 e5       	ldi	r22, 0x50	; 80
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	80 e5       	ldi	r24, 0x50	; 80
     5f0:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     5f4:	69 ed       	ldi	r22, 0xD9	; 217
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	89 ed       	ldi	r24, 0xD9	; 217
     5fa:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     5fe:	61 e2       	ldi	r22, 0x21	; 33
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	81 e2       	ldi	r24, 0x21	; 33
     604:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     608:	60 e2       	ldi	r22, 0x20	; 32
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	80 e2       	ldi	r24, 0x20	; 32
     60e:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     612:	62 e0       	ldi	r22, 0x02	; 2
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	82 e0       	ldi	r24, 0x02	; 2
     618:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     61c:	6b ed       	ldi	r22, 0xDB	; 219
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	8b ed       	ldi	r24, 0xDB	; 219
     622:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     626:	60 e3       	ldi	r22, 0x30	; 48
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	80 e3       	ldi	r24, 0x30	; 48
     62c:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     630:	6d ea       	ldi	r22, 0xAD	; 173
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	8d ea       	ldi	r24, 0xAD	; 173
     636:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     644:	64 ea       	ldi	r22, 0xA4	; 164
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	84 ea       	ldi	r24, 0xA4	; 164
     64a:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     64e:	66 ea       	ldi	r22, 0xA6	; 166
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	86 ea       	ldi	r24, 0xA6	; 166
     654:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     658:	63 ed       	ldi	r22, 0xD3	; 211
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	83 ed       	ldi	r24, 0xD3	; 211
     65e:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     66c:	6f ea       	ldi	r22, 0xAF	; 175
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	8f ea       	ldi	r24, 0xAF	; 175
     672:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     676:	08 95       	ret

00000678 <OLED_refresh>:


void OLED_refresh(void){
     678:	ef 92       	push	r14
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	c0 e0       	ldi	r28, 0x00	; 0
     686:	d8 e0       	ldi	r29, 0x08	; 8
     688:	0f 2e       	mov	r0, r31
     68a:	f0 eb       	ldi	r31, 0xB0	; 176
     68c:	ef 2e       	mov	r14, r31
     68e:	f1 2c       	mov	r15, r1
     690:	f0 2d       	mov	r31, r0
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
     692:	b7 01       	movw	r22, r14
     694:	8e 2d       	mov	r24, r14
     696:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
		XMEM_write(0, 0);		// Set lower column start address
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
		XMEM_write(0x10, 0x10);  // Set data register
     6a4:	60 e1       	ldi	r22, 0x10	; 16
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	80 e1       	ldi	r24, 0x10	; 16
     6aa:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     6ae:	8e 01       	movw	r16, r28
     6b0:	00 58       	subi	r16, 0x80	; 128
     6b2:	1f 4f       	sbci	r17, 0xFF	; 255
		for (int column = 0; column < 128; column++){
			uint8_t SRAMvalue = XMEM_read(0x800 + page*128 + column);
     6b4:	ce 01       	movw	r24, r28
     6b6:	0e 94 c0 03 	call	0x780	; 0x780 <XMEM_read>
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
     6ba:	68 2f       	mov	r22, r24
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	7e 5f       	subi	r23, 0xFE	; 254
     6c0:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
     6c4:	21 96       	adiw	r28, 0x01	; 1
void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
		XMEM_write(0, 0);		// Set lower column start address
		XMEM_write(0x10, 0x10);  // Set data register
		for (int column = 0; column < 128; column++){
     6c6:	c0 17       	cp	r28, r16
     6c8:	d1 07       	cpc	r29, r17
     6ca:	a1 f7       	brne	.-24     	; 0x6b4 <OLED_refresh+0x3c>
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	e8 1a       	sub	r14, r24
     6d0:	f8 0a       	sbc	r15, r24
     6d2:	e8 01       	movw	r28, r16
	}
}


void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
     6d4:	01 15       	cp	r16, r1
     6d6:	1c 40       	sbci	r17, 0x0C	; 12
     6d8:	e1 f6       	brne	.-72     	; 0x692 <OLED_refresh+0x1a>
		for (int column = 0; column < 128; column++){
			uint8_t SRAMvalue = XMEM_read(0x800 + page*128 + column);
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
		}
	}
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	08 95       	ret

000006e8 <OLED_clearAll>:


void OLED_clearAll(void) {
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
	for (uint16_t index = 0x800; index < 0x800 + 1024; index++){
     6ec:	c0 e0       	ldi	r28, 0x00	; 0
     6ee:	d8 e0       	ldi	r29, 0x08	; 8
		XMEM_write(0, index);
     6f0:	be 01       	movw	r22, r28
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	0e 94 c4 03 	call	0x788	; 0x788 <XMEM_write>
	}
}


void OLED_clearAll(void) {
	for (uint16_t index = 0x800; index < 0x800 + 1024; index++){
     6f8:	21 96       	adiw	r28, 0x01	; 1
     6fa:	c1 15       	cp	r28, r1
     6fc:	8c e0       	ldi	r24, 0x0C	; 12
     6fe:	d8 07       	cpc	r29, r24
     700:	b9 f7       	brne	.-18     	; 0x6f0 <OLED_clearAll+0x8>
		XMEM_write(0, index);
	}
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <SPI_MasterInit>:
#include "interrupt.h"
#include <avr/io.h>

void SPI_MasterInit(void) {
	// Set PB4 (/SS), PB5 (MOSI) and PB7 (SCK) as output
	DDRB |= (1 << DDB4) | (1 << DDB5) | (1 << DDB7);
     708:	87 b3       	in	r24, 0x17	; 23
     70a:	80 6b       	ori	r24, 0xB0	; 176
     70c:	87 bb       	out	0x17, r24	; 23
	
	// Set PB6 (MISO) as input
	DDRB &= ~(1 << DDB6);
     70e:	be 98       	cbi	0x17, 6	; 23
	
	// Select Master SPI mode, SPI enable, SPI interrupt enable (Global interrupts must be enabled)
	SPCR |= (1 << MSTR) | (1 << SPE); //| (1 << SPIE);
     710:	8d b1       	in	r24, 0x0d	; 13
     712:	80 65       	ori	r24, 0x50	; 80
     714:	8d b9       	out	0x0d, r24	; 13

	// Transmit MSB of the data word first
	SPCR &= ~(1 << DORD);
     716:	6d 98       	cbi	0x0d, 5	; 13
	
	// Configure clock polarity (SCK is low when idle)
	SPCR &= ~(1 << CPOL);
     718:	6b 98       	cbi	0x0d, 3	; 13
	
	// Configure clock phase (data is sampled on leading edge)
	SPCR &= ~(1 << CPHA);
     71a:	6a 98       	cbi	0x0d, 2	; 13
	
	// Configure SCK rate (f_osc/4)
	SPCR &= ~(1 << SPR0);
     71c:	68 98       	cbi	0x0d, 0	; 13
	SPCR &= ~(1 << SPR1);
     71e:	69 98       	cbi	0x0d, 1	; 13
     720:	08 95       	ret

00000722 <SPI_transmit>:
}

void SPI_transmit(uint8_t data) {
	// Initiate data transmission
	SPDR = data;
     722:	8f b9       	out	0x0f, r24	; 15
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
     724:	77 9b       	sbis	0x0e, 7	; 14
     726:	fe cf       	rjmp	.-4      	; 0x724 <SPI_transmit+0x2>
}	
     728:	08 95       	ret

0000072a <SPI_read>:

uint8_t SPI_read(void) {
	SPDR = 0xFF; // Send dummy byte
     72a:	8f ef       	ldi	r24, 0xFF	; 255
     72c:	8f b9       	out	0x0f, r24	; 15
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
     72e:	77 9b       	sbis	0x0e, 7	; 14
     730:	fe cf       	rjmp	.-4      	; 0x72e <SPI_read+0x4>
	
	return SPDR;
     732:	8f b1       	in	r24, 0x0f	; 15
	// SPIF bit in SPSR register is reset when accessing SPDR
}
     734:	08 95       	ret

00000736 <timer_8bit1024divisionCheckOnlyinit>:
#define F_CPU 4915200

void timer_8bit1024divisionCheckOnlyinit(void) {

	// start the timer
	TCCR0 = 0b00000101;
     736:	85 e0       	ldi	r24, 0x05	; 5
     738:	83 bf       	out	0x33, r24	; 51
	// set prescaler to 1024 (101) and start the timer
	TIMSK &= ~(1 << OCIE0 | 1 << TOIE0);
     73a:	89 b7       	in	r24, 0x39	; 57
     73c:	8c 7f       	andi	r24, 0xFC	; 252
     73e:	89 bf       	out	0x39, r24	; 57
     740:	08 95       	ret

00000742 <UART_transmit>:
#include <util/delay.h>
#include "uart.h"

void UART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while ( ! (UCSR0A & (1<<UDRE0))) {
     742:	5d 9b       	sbis	0x0b, 5	; 11
     744:	fe cf       	rjmp	.-4      	; 0x742 <UART_transmit>
		// waiting...
	}
	// Put data into buffer, sends the data
	UDR0 = data;
     746:	8c b9       	out	0x0c, r24	; 12
     748:	08 95       	ret

0000074a <UART_receive>:
}

unsigned char UART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1 << RXC0))) {
     74a:	5f 9b       	sbis	0x0b, 7	; 11
     74c:	fe cf       	rjmp	.-4      	; 0x74a <UART_receive>
		// wait...
	}
	return UDR0;
     74e:	8c b1       	in	r24, 0x0c	; 12
	
}
     750:	08 95       	ret

00000752 <UART_init>:

void UART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = ubrr>>8;
     752:	90 bd       	out	0x20, r25	; 32
	UBRR0L = ubrr;
     754:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     756:	88 e1       	ldi	r24, 0x18	; 24
     758:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     75a:	8e e8       	ldi	r24, 0x8E	; 142
     75c:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(UART_transmit, UART_receive);
     75e:	65 ea       	ldi	r22, 0xA5	; 165
     760:	73 e0       	ldi	r23, 0x03	; 3
     762:	81 ea       	ldi	r24, 0xA1	; 161
     764:	93 e0       	ldi	r25, 0x03	; 3
     766:	0e 94 19 04 	call	0x832	; 0x832 <fdevopen>
     76a:	08 95       	ret

0000076c <XMEM_init>:
#include "uart.h"
#define BASE_ADDRESS 0x1000

void XMEM_init(void) {
	// Enable XMEM
	MCUCR |= (1 << SRE);
     76c:	85 b7       	in	r24, 0x35	; 53
     76e:	80 68       	ori	r24, 0x80	; 128
     770:	85 bf       	out	0x35, r24	; 53
	
	// SFIOR = XX100XXX
	// We use PC7-PC4 for JTAG, NOT for XMEM address
	SFIOR |= (1 << XMM2);
     772:	80 b7       	in	r24, 0x30	; 48
     774:	80 62       	ori	r24, 0x20	; 32
     776:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~((1 << XMM1) | (1 << XMM0));
     778:	80 b7       	in	r24, 0x30	; 48
     77a:	87 7e       	andi	r24, 0xE7	; 231
     77c:	80 bf       	out	0x30, r24	; 48
     77e:	08 95       	ret

00000780 <XMEM_read>:
}

uint8_t XMEM_read(uint16_t address) {
	volatile uint8_t *ext_mem = (uint8_t*) BASE_ADDRESS;
	return ext_mem[address];
     780:	90 5f       	subi	r25, 0xF0	; 240
     782:	fc 01       	movw	r30, r24
     784:	80 81       	ld	r24, Z
}
     786:	08 95       	ret

00000788 <XMEM_write>:

void XMEM_write(uint8_t data, uint16_t address) {
	volatile uint8_t *ext_mem = (uint8_t *) BASE_ADDRESS;
	ext_mem[address] = data;
     788:	fb 01       	movw	r30, r22
     78a:	f0 5f       	subi	r31, 0xF0	; 240
     78c:	80 83       	st	Z, r24
     78e:	08 95       	ret

00000790 <main>:
#define MYUBRR 31


int main(void)
{
	INTERRUPT_init();
     790:	0e 94 ba 01 	call	0x374	; 0x374 <INTERRUPT_init>
	UART_init(MYUBRR);
     794:	8f e1       	ldi	r24, 0x1F	; 31
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 a9 03 	call	0x752	; 0x752 <UART_init>
	XMEM_init();
     79c:	0e 94 b6 03 	call	0x76c	; 0x76c <XMEM_init>
	btn_init();
     7a0:	0e 94 b7 01 	call	0x36e	; 0x36e <btn_init>
	printf("\nStarting.... \n\r");
     7a4:	83 eb       	ldi	r24, 0xB3	; 179
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	9f 93       	push	r25
     7aa:	8f 93       	push	r24
     7ac:	0e 94 64 04 	call	0x8c8	; 0x8c8 <printf>
	timer_8bit1024divisionCheckOnlyinit();
     7b0:	0e 94 9b 03 	call	0x736	; 0x736 <timer_8bit1024divisionCheckOnlyinit>
	CAN_init(MODE_NORMAL);
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	0e 94 7f 00 	call	0xfe	; 0xfe <CAN_init>

	
	
	OLED_init();
     7ba:	0e 94 c3 02 	call	0x586	; 0x586 <OLED_init>
	OLED_clearAll();
     7be:	0e 94 74 03 	call	0x6e8	; 0x6e8 <OLED_clearAll>
	OLED_refresh();
     7c2:	0e 94 3c 03 	call	0x678	; 0x678 <OLED_refresh>
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
	while(1) {
		
		// Testing CAN
	
		
		send_joystick_dir();
     7ca:	0e 94 9a 01 	call	0x334	; 0x334 <send_joystick_dir>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ce:	2f ef       	ldi	r18, 0xFF	; 255
     7d0:	8f e7       	ldi	r24, 0x7F	; 127
     7d2:	94 e0       	ldi	r25, 0x04	; 4
     7d4:	21 50       	subi	r18, 0x01	; 1
     7d6:	80 40       	sbci	r24, 0x00	; 0
     7d8:	90 40       	sbci	r25, 0x00	; 0
     7da:	e1 f7       	brne	.-8      	; 0x7d4 <main+0x44>
     7dc:	00 c0       	rjmp	.+0      	; 0x7de <main+0x4e>
     7de:	00 00       	nop
     7e0:	f4 cf       	rjmp	.-24     	; 0x7ca <main+0x3a>

000007e2 <__divmodhi4>:
     7e2:	97 fb       	bst	r25, 7
     7e4:	07 2e       	mov	r0, r23
     7e6:	16 f4       	brtc	.+4      	; 0x7ec <__divmodhi4+0xa>
     7e8:	00 94       	com	r0
     7ea:	07 d0       	rcall	.+14     	; 0x7fa <__divmodhi4_neg1>
     7ec:	77 fd       	sbrc	r23, 7
     7ee:	09 d0       	rcall	.+18     	; 0x802 <__divmodhi4_neg2>
     7f0:	0e 94 05 04 	call	0x80a	; 0x80a <__udivmodhi4>
     7f4:	07 fc       	sbrc	r0, 7
     7f6:	05 d0       	rcall	.+10     	; 0x802 <__divmodhi4_neg2>
     7f8:	3e f4       	brtc	.+14     	; 0x808 <__divmodhi4_exit>

000007fa <__divmodhi4_neg1>:
     7fa:	90 95       	com	r25
     7fc:	81 95       	neg	r24
     7fe:	9f 4f       	sbci	r25, 0xFF	; 255
     800:	08 95       	ret

00000802 <__divmodhi4_neg2>:
     802:	70 95       	com	r23
     804:	61 95       	neg	r22
     806:	7f 4f       	sbci	r23, 0xFF	; 255

00000808 <__divmodhi4_exit>:
     808:	08 95       	ret

0000080a <__udivmodhi4>:
     80a:	aa 1b       	sub	r26, r26
     80c:	bb 1b       	sub	r27, r27
     80e:	51 e1       	ldi	r21, 0x11	; 17
     810:	07 c0       	rjmp	.+14     	; 0x820 <__udivmodhi4_ep>

00000812 <__udivmodhi4_loop>:
     812:	aa 1f       	adc	r26, r26
     814:	bb 1f       	adc	r27, r27
     816:	a6 17       	cp	r26, r22
     818:	b7 07       	cpc	r27, r23
     81a:	10 f0       	brcs	.+4      	; 0x820 <__udivmodhi4_ep>
     81c:	a6 1b       	sub	r26, r22
     81e:	b7 0b       	sbc	r27, r23

00000820 <__udivmodhi4_ep>:
     820:	88 1f       	adc	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	5a 95       	dec	r21
     826:	a9 f7       	brne	.-22     	; 0x812 <__udivmodhi4_loop>
     828:	80 95       	com	r24
     82a:	90 95       	com	r25
     82c:	bc 01       	movw	r22, r24
     82e:	cd 01       	movw	r24, r26
     830:	08 95       	ret

00000832 <fdevopen>:
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	00 97       	sbiw	r24, 0x00	; 0
     83c:	31 f4       	brne	.+12     	; 0x84a <fdevopen+0x18>
     83e:	61 15       	cp	r22, r1
     840:	71 05       	cpc	r23, r1
     842:	19 f4       	brne	.+6      	; 0x84a <fdevopen+0x18>
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	3a c0       	rjmp	.+116    	; 0x8be <fdevopen+0x8c>
     84a:	8b 01       	movw	r16, r22
     84c:	ec 01       	movw	r28, r24
     84e:	6e e0       	ldi	r22, 0x0E	; 14
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <calloc>
     85a:	fc 01       	movw	r30, r24
     85c:	89 2b       	or	r24, r25
     85e:	91 f3       	breq	.-28     	; 0x844 <fdevopen+0x12>
     860:	80 e8       	ldi	r24, 0x80	; 128
     862:	83 83       	std	Z+3, r24	; 0x03
     864:	01 15       	cp	r16, r1
     866:	11 05       	cpc	r17, r1
     868:	71 f0       	breq	.+28     	; 0x886 <fdevopen+0x54>
     86a:	13 87       	std	Z+11, r17	; 0x0b
     86c:	02 87       	std	Z+10, r16	; 0x0a
     86e:	81 e8       	ldi	r24, 0x81	; 129
     870:	83 83       	std	Z+3, r24	; 0x03
     872:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__iob>
     876:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <__iob+0x1>
     87a:	89 2b       	or	r24, r25
     87c:	21 f4       	brne	.+8      	; 0x886 <fdevopen+0x54>
     87e:	f0 93 c7 01 	sts	0x01C7, r31	; 0x8001c7 <__iob+0x1>
     882:	e0 93 c6 01 	sts	0x01C6, r30	; 0x8001c6 <__iob>
     886:	20 97       	sbiw	r28, 0x00	; 0
     888:	c9 f0       	breq	.+50     	; 0x8bc <fdevopen+0x8a>
     88a:	d1 87       	std	Z+9, r29	; 0x09
     88c:	c0 87       	std	Z+8, r28	; 0x08
     88e:	83 81       	ldd	r24, Z+3	; 0x03
     890:	82 60       	ori	r24, 0x02	; 2
     892:	83 83       	std	Z+3, r24	; 0x03
     894:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__iob+0x2>
     898:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <__iob+0x3>
     89c:	89 2b       	or	r24, r25
     89e:	71 f4       	brne	.+28     	; 0x8bc <fdevopen+0x8a>
     8a0:	f0 93 c9 01 	sts	0x01C9, r31	; 0x8001c9 <__iob+0x3>
     8a4:	e0 93 c8 01 	sts	0x01C8, r30	; 0x8001c8 <__iob+0x2>
     8a8:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__iob+0x4>
     8ac:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <__iob+0x5>
     8b0:	89 2b       	or	r24, r25
     8b2:	21 f4       	brne	.+8      	; 0x8bc <fdevopen+0x8a>
     8b4:	f0 93 cb 01 	sts	0x01CB, r31	; 0x8001cb <__iob+0x5>
     8b8:	e0 93 ca 01 	sts	0x01CA, r30	; 0x8001ca <__iob+0x4>
     8bc:	cf 01       	movw	r24, r30
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	08 95       	ret

000008c8 <printf>:
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	ea e6       	ldi	r30, 0x6A	; 106
     8ce:	f4 e0       	ldi	r31, 0x04	; 4
     8d0:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__prologue_saves__+0x20>
     8d4:	ae 01       	movw	r20, r28
     8d6:	4b 5f       	subi	r20, 0xFB	; 251
     8d8:	5f 4f       	sbci	r21, 0xFF	; 255
     8da:	fa 01       	movw	r30, r20
     8dc:	61 91       	ld	r22, Z+
     8de:	71 91       	ld	r23, Z+
     8e0:	af 01       	movw	r20, r30
     8e2:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__iob+0x2>
     8e6:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <__iob+0x3>
     8ea:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <vfprintf>
     8ee:	e2 e0       	ldi	r30, 0x02	; 2
     8f0:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__epilogue_restores__+0x20>

000008f4 <vfprintf>:
     8f4:	ab e0       	ldi	r26, 0x0B	; 11
     8f6:	b0 e0       	ldi	r27, 0x00	; 0
     8f8:	e0 e8       	ldi	r30, 0x80	; 128
     8fa:	f4 e0       	ldi	r31, 0x04	; 4
     8fc:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__prologue_saves__>
     900:	6c 01       	movw	r12, r24
     902:	7b 01       	movw	r14, r22
     904:	8a 01       	movw	r16, r20
     906:	fc 01       	movw	r30, r24
     908:	17 82       	std	Z+7, r1	; 0x07
     90a:	16 82       	std	Z+6, r1	; 0x06
     90c:	83 81       	ldd	r24, Z+3	; 0x03
     90e:	81 ff       	sbrs	r24, 1
     910:	cc c1       	rjmp	.+920    	; 0xcaa <vfprintf+0x3b6>
     912:	ce 01       	movw	r24, r28
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	3c 01       	movw	r6, r24
     918:	f6 01       	movw	r30, r12
     91a:	93 81       	ldd	r25, Z+3	; 0x03
     91c:	f7 01       	movw	r30, r14
     91e:	93 fd       	sbrc	r25, 3
     920:	85 91       	lpm	r24, Z+
     922:	93 ff       	sbrs	r25, 3
     924:	81 91       	ld	r24, Z+
     926:	7f 01       	movw	r14, r30
     928:	88 23       	and	r24, r24
     92a:	09 f4       	brne	.+2      	; 0x92e <vfprintf+0x3a>
     92c:	ba c1       	rjmp	.+884    	; 0xca2 <vfprintf+0x3ae>
     92e:	85 32       	cpi	r24, 0x25	; 37
     930:	39 f4       	brne	.+14     	; 0x940 <vfprintf+0x4c>
     932:	93 fd       	sbrc	r25, 3
     934:	85 91       	lpm	r24, Z+
     936:	93 ff       	sbrs	r25, 3
     938:	81 91       	ld	r24, Z+
     93a:	7f 01       	movw	r14, r30
     93c:	85 32       	cpi	r24, 0x25	; 37
     93e:	29 f4       	brne	.+10     	; 0x94a <vfprintf+0x56>
     940:	b6 01       	movw	r22, r12
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 b5 07 	call	0xf6a	; 0xf6a <fputc>
     948:	e7 cf       	rjmp	.-50     	; 0x918 <vfprintf+0x24>
     94a:	91 2c       	mov	r9, r1
     94c:	21 2c       	mov	r2, r1
     94e:	31 2c       	mov	r3, r1
     950:	ff e1       	ldi	r31, 0x1F	; 31
     952:	f3 15       	cp	r31, r3
     954:	d8 f0       	brcs	.+54     	; 0x98c <vfprintf+0x98>
     956:	8b 32       	cpi	r24, 0x2B	; 43
     958:	79 f0       	breq	.+30     	; 0x978 <vfprintf+0x84>
     95a:	38 f4       	brcc	.+14     	; 0x96a <vfprintf+0x76>
     95c:	80 32       	cpi	r24, 0x20	; 32
     95e:	79 f0       	breq	.+30     	; 0x97e <vfprintf+0x8a>
     960:	83 32       	cpi	r24, 0x23	; 35
     962:	a1 f4       	brne	.+40     	; 0x98c <vfprintf+0x98>
     964:	23 2d       	mov	r18, r3
     966:	20 61       	ori	r18, 0x10	; 16
     968:	1d c0       	rjmp	.+58     	; 0x9a4 <vfprintf+0xb0>
     96a:	8d 32       	cpi	r24, 0x2D	; 45
     96c:	61 f0       	breq	.+24     	; 0x986 <vfprintf+0x92>
     96e:	80 33       	cpi	r24, 0x30	; 48
     970:	69 f4       	brne	.+26     	; 0x98c <vfprintf+0x98>
     972:	23 2d       	mov	r18, r3
     974:	21 60       	ori	r18, 0x01	; 1
     976:	16 c0       	rjmp	.+44     	; 0x9a4 <vfprintf+0xb0>
     978:	83 2d       	mov	r24, r3
     97a:	82 60       	ori	r24, 0x02	; 2
     97c:	38 2e       	mov	r3, r24
     97e:	e3 2d       	mov	r30, r3
     980:	e4 60       	ori	r30, 0x04	; 4
     982:	3e 2e       	mov	r3, r30
     984:	2a c0       	rjmp	.+84     	; 0x9da <vfprintf+0xe6>
     986:	f3 2d       	mov	r31, r3
     988:	f8 60       	ori	r31, 0x08	; 8
     98a:	1d c0       	rjmp	.+58     	; 0x9c6 <vfprintf+0xd2>
     98c:	37 fc       	sbrc	r3, 7
     98e:	2d c0       	rjmp	.+90     	; 0x9ea <vfprintf+0xf6>
     990:	20 ed       	ldi	r18, 0xD0	; 208
     992:	28 0f       	add	r18, r24
     994:	2a 30       	cpi	r18, 0x0A	; 10
     996:	40 f0       	brcs	.+16     	; 0x9a8 <vfprintf+0xb4>
     998:	8e 32       	cpi	r24, 0x2E	; 46
     99a:	b9 f4       	brne	.+46     	; 0x9ca <vfprintf+0xd6>
     99c:	36 fc       	sbrc	r3, 6
     99e:	81 c1       	rjmp	.+770    	; 0xca2 <vfprintf+0x3ae>
     9a0:	23 2d       	mov	r18, r3
     9a2:	20 64       	ori	r18, 0x40	; 64
     9a4:	32 2e       	mov	r3, r18
     9a6:	19 c0       	rjmp	.+50     	; 0x9da <vfprintf+0xe6>
     9a8:	36 fe       	sbrs	r3, 6
     9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <vfprintf+0xc4>
     9ac:	8a e0       	ldi	r24, 0x0A	; 10
     9ae:	98 9e       	mul	r9, r24
     9b0:	20 0d       	add	r18, r0
     9b2:	11 24       	eor	r1, r1
     9b4:	92 2e       	mov	r9, r18
     9b6:	11 c0       	rjmp	.+34     	; 0x9da <vfprintf+0xe6>
     9b8:	ea e0       	ldi	r30, 0x0A	; 10
     9ba:	2e 9e       	mul	r2, r30
     9bc:	20 0d       	add	r18, r0
     9be:	11 24       	eor	r1, r1
     9c0:	22 2e       	mov	r2, r18
     9c2:	f3 2d       	mov	r31, r3
     9c4:	f0 62       	ori	r31, 0x20	; 32
     9c6:	3f 2e       	mov	r3, r31
     9c8:	08 c0       	rjmp	.+16     	; 0x9da <vfprintf+0xe6>
     9ca:	8c 36       	cpi	r24, 0x6C	; 108
     9cc:	21 f4       	brne	.+8      	; 0x9d6 <vfprintf+0xe2>
     9ce:	83 2d       	mov	r24, r3
     9d0:	80 68       	ori	r24, 0x80	; 128
     9d2:	38 2e       	mov	r3, r24
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <vfprintf+0xe6>
     9d6:	88 36       	cpi	r24, 0x68	; 104
     9d8:	41 f4       	brne	.+16     	; 0x9ea <vfprintf+0xf6>
     9da:	f7 01       	movw	r30, r14
     9dc:	93 fd       	sbrc	r25, 3
     9de:	85 91       	lpm	r24, Z+
     9e0:	93 ff       	sbrs	r25, 3
     9e2:	81 91       	ld	r24, Z+
     9e4:	7f 01       	movw	r14, r30
     9e6:	81 11       	cpse	r24, r1
     9e8:	b3 cf       	rjmp	.-154    	; 0x950 <vfprintf+0x5c>
     9ea:	98 2f       	mov	r25, r24
     9ec:	9f 7d       	andi	r25, 0xDF	; 223
     9ee:	95 54       	subi	r25, 0x45	; 69
     9f0:	93 30       	cpi	r25, 0x03	; 3
     9f2:	28 f4       	brcc	.+10     	; 0x9fe <vfprintf+0x10a>
     9f4:	0c 5f       	subi	r16, 0xFC	; 252
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	9f e3       	ldi	r25, 0x3F	; 63
     9fa:	99 83       	std	Y+1, r25	; 0x01
     9fc:	0d c0       	rjmp	.+26     	; 0xa18 <vfprintf+0x124>
     9fe:	83 36       	cpi	r24, 0x63	; 99
     a00:	31 f0       	breq	.+12     	; 0xa0e <vfprintf+0x11a>
     a02:	83 37       	cpi	r24, 0x73	; 115
     a04:	71 f0       	breq	.+28     	; 0xa22 <vfprintf+0x12e>
     a06:	83 35       	cpi	r24, 0x53	; 83
     a08:	09 f0       	breq	.+2      	; 0xa0c <vfprintf+0x118>
     a0a:	59 c0       	rjmp	.+178    	; 0xabe <vfprintf+0x1ca>
     a0c:	21 c0       	rjmp	.+66     	; 0xa50 <vfprintf+0x15c>
     a0e:	f8 01       	movw	r30, r16
     a10:	80 81       	ld	r24, Z
     a12:	89 83       	std	Y+1, r24	; 0x01
     a14:	0e 5f       	subi	r16, 0xFE	; 254
     a16:	1f 4f       	sbci	r17, 0xFF	; 255
     a18:	88 24       	eor	r8, r8
     a1a:	83 94       	inc	r8
     a1c:	91 2c       	mov	r9, r1
     a1e:	53 01       	movw	r10, r6
     a20:	13 c0       	rjmp	.+38     	; 0xa48 <vfprintf+0x154>
     a22:	28 01       	movw	r4, r16
     a24:	f2 e0       	ldi	r31, 0x02	; 2
     a26:	4f 0e       	add	r4, r31
     a28:	51 1c       	adc	r5, r1
     a2a:	f8 01       	movw	r30, r16
     a2c:	a0 80       	ld	r10, Z
     a2e:	b1 80       	ldd	r11, Z+1	; 0x01
     a30:	36 fe       	sbrs	r3, 6
     a32:	03 c0       	rjmp	.+6      	; 0xa3a <vfprintf+0x146>
     a34:	69 2d       	mov	r22, r9
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <vfprintf+0x14a>
     a3a:	6f ef       	ldi	r22, 0xFF	; 255
     a3c:	7f ef       	ldi	r23, 0xFF	; 255
     a3e:	c5 01       	movw	r24, r10
     a40:	0e 94 aa 07 	call	0xf54	; 0xf54 <strnlen>
     a44:	4c 01       	movw	r8, r24
     a46:	82 01       	movw	r16, r4
     a48:	f3 2d       	mov	r31, r3
     a4a:	ff 77       	andi	r31, 0x7F	; 127
     a4c:	3f 2e       	mov	r3, r31
     a4e:	16 c0       	rjmp	.+44     	; 0xa7c <vfprintf+0x188>
     a50:	28 01       	movw	r4, r16
     a52:	22 e0       	ldi	r18, 0x02	; 2
     a54:	42 0e       	add	r4, r18
     a56:	51 1c       	adc	r5, r1
     a58:	f8 01       	movw	r30, r16
     a5a:	a0 80       	ld	r10, Z
     a5c:	b1 80       	ldd	r11, Z+1	; 0x01
     a5e:	36 fe       	sbrs	r3, 6
     a60:	03 c0       	rjmp	.+6      	; 0xa68 <vfprintf+0x174>
     a62:	69 2d       	mov	r22, r9
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <vfprintf+0x178>
     a68:	6f ef       	ldi	r22, 0xFF	; 255
     a6a:	7f ef       	ldi	r23, 0xFF	; 255
     a6c:	c5 01       	movw	r24, r10
     a6e:	0e 94 98 07 	call	0xf30	; 0xf30 <strnlen_P>
     a72:	4c 01       	movw	r8, r24
     a74:	f3 2d       	mov	r31, r3
     a76:	f0 68       	ori	r31, 0x80	; 128
     a78:	3f 2e       	mov	r3, r31
     a7a:	82 01       	movw	r16, r4
     a7c:	33 fc       	sbrc	r3, 3
     a7e:	1b c0       	rjmp	.+54     	; 0xab6 <vfprintf+0x1c2>
     a80:	82 2d       	mov	r24, r2
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	88 16       	cp	r8, r24
     a86:	99 06       	cpc	r9, r25
     a88:	b0 f4       	brcc	.+44     	; 0xab6 <vfprintf+0x1c2>
     a8a:	b6 01       	movw	r22, r12
     a8c:	80 e2       	ldi	r24, 0x20	; 32
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 b5 07 	call	0xf6a	; 0xf6a <fputc>
     a94:	2a 94       	dec	r2
     a96:	f4 cf       	rjmp	.-24     	; 0xa80 <vfprintf+0x18c>
     a98:	f5 01       	movw	r30, r10
     a9a:	37 fc       	sbrc	r3, 7
     a9c:	85 91       	lpm	r24, Z+
     a9e:	37 fe       	sbrs	r3, 7
     aa0:	81 91       	ld	r24, Z+
     aa2:	5f 01       	movw	r10, r30
     aa4:	b6 01       	movw	r22, r12
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <fputc>
     aac:	21 10       	cpse	r2, r1
     aae:	2a 94       	dec	r2
     ab0:	21 e0       	ldi	r18, 0x01	; 1
     ab2:	82 1a       	sub	r8, r18
     ab4:	91 08       	sbc	r9, r1
     ab6:	81 14       	cp	r8, r1
     ab8:	91 04       	cpc	r9, r1
     aba:	71 f7       	brne	.-36     	; 0xa98 <vfprintf+0x1a4>
     abc:	e8 c0       	rjmp	.+464    	; 0xc8e <vfprintf+0x39a>
     abe:	84 36       	cpi	r24, 0x64	; 100
     ac0:	11 f0       	breq	.+4      	; 0xac6 <vfprintf+0x1d2>
     ac2:	89 36       	cpi	r24, 0x69	; 105
     ac4:	41 f5       	brne	.+80     	; 0xb16 <vfprintf+0x222>
     ac6:	f8 01       	movw	r30, r16
     ac8:	37 fe       	sbrs	r3, 7
     aca:	07 c0       	rjmp	.+14     	; 0xada <vfprintf+0x1e6>
     acc:	60 81       	ld	r22, Z
     ace:	71 81       	ldd	r23, Z+1	; 0x01
     ad0:	82 81       	ldd	r24, Z+2	; 0x02
     ad2:	93 81       	ldd	r25, Z+3	; 0x03
     ad4:	0c 5f       	subi	r16, 0xFC	; 252
     ad6:	1f 4f       	sbci	r17, 0xFF	; 255
     ad8:	08 c0       	rjmp	.+16     	; 0xaea <vfprintf+0x1f6>
     ada:	60 81       	ld	r22, Z
     adc:	71 81       	ldd	r23, Z+1	; 0x01
     ade:	07 2e       	mov	r0, r23
     ae0:	00 0c       	add	r0, r0
     ae2:	88 0b       	sbc	r24, r24
     ae4:	99 0b       	sbc	r25, r25
     ae6:	0e 5f       	subi	r16, 0xFE	; 254
     ae8:	1f 4f       	sbci	r17, 0xFF	; 255
     aea:	f3 2d       	mov	r31, r3
     aec:	ff 76       	andi	r31, 0x6F	; 111
     aee:	3f 2e       	mov	r3, r31
     af0:	97 ff       	sbrs	r25, 7
     af2:	09 c0       	rjmp	.+18     	; 0xb06 <vfprintf+0x212>
     af4:	90 95       	com	r25
     af6:	80 95       	com	r24
     af8:	70 95       	com	r23
     afa:	61 95       	neg	r22
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	8f 4f       	sbci	r24, 0xFF	; 255
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	f0 68       	ori	r31, 0x80	; 128
     b04:	3f 2e       	mov	r3, r31
     b06:	2a e0       	ldi	r18, 0x0A	; 10
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	a3 01       	movw	r20, r6
     b0c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__ultoa_invert>
     b10:	88 2e       	mov	r8, r24
     b12:	86 18       	sub	r8, r6
     b14:	45 c0       	rjmp	.+138    	; 0xba0 <vfprintf+0x2ac>
     b16:	85 37       	cpi	r24, 0x75	; 117
     b18:	31 f4       	brne	.+12     	; 0xb26 <vfprintf+0x232>
     b1a:	23 2d       	mov	r18, r3
     b1c:	2f 7e       	andi	r18, 0xEF	; 239
     b1e:	b2 2e       	mov	r11, r18
     b20:	2a e0       	ldi	r18, 0x0A	; 10
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	25 c0       	rjmp	.+74     	; 0xb70 <vfprintf+0x27c>
     b26:	93 2d       	mov	r25, r3
     b28:	99 7f       	andi	r25, 0xF9	; 249
     b2a:	b9 2e       	mov	r11, r25
     b2c:	8f 36       	cpi	r24, 0x6F	; 111
     b2e:	c1 f0       	breq	.+48     	; 0xb60 <vfprintf+0x26c>
     b30:	18 f4       	brcc	.+6      	; 0xb38 <vfprintf+0x244>
     b32:	88 35       	cpi	r24, 0x58	; 88
     b34:	79 f0       	breq	.+30     	; 0xb54 <vfprintf+0x260>
     b36:	b5 c0       	rjmp	.+362    	; 0xca2 <vfprintf+0x3ae>
     b38:	80 37       	cpi	r24, 0x70	; 112
     b3a:	19 f0       	breq	.+6      	; 0xb42 <vfprintf+0x24e>
     b3c:	88 37       	cpi	r24, 0x78	; 120
     b3e:	21 f0       	breq	.+8      	; 0xb48 <vfprintf+0x254>
     b40:	b0 c0       	rjmp	.+352    	; 0xca2 <vfprintf+0x3ae>
     b42:	e9 2f       	mov	r30, r25
     b44:	e0 61       	ori	r30, 0x10	; 16
     b46:	be 2e       	mov	r11, r30
     b48:	b4 fe       	sbrs	r11, 4
     b4a:	0d c0       	rjmp	.+26     	; 0xb66 <vfprintf+0x272>
     b4c:	fb 2d       	mov	r31, r11
     b4e:	f4 60       	ori	r31, 0x04	; 4
     b50:	bf 2e       	mov	r11, r31
     b52:	09 c0       	rjmp	.+18     	; 0xb66 <vfprintf+0x272>
     b54:	34 fe       	sbrs	r3, 4
     b56:	0a c0       	rjmp	.+20     	; 0xb6c <vfprintf+0x278>
     b58:	29 2f       	mov	r18, r25
     b5a:	26 60       	ori	r18, 0x06	; 6
     b5c:	b2 2e       	mov	r11, r18
     b5e:	06 c0       	rjmp	.+12     	; 0xb6c <vfprintf+0x278>
     b60:	28 e0       	ldi	r18, 0x08	; 8
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	05 c0       	rjmp	.+10     	; 0xb70 <vfprintf+0x27c>
     b66:	20 e1       	ldi	r18, 0x10	; 16
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <vfprintf+0x27c>
     b6c:	20 e1       	ldi	r18, 0x10	; 16
     b6e:	32 e0       	ldi	r19, 0x02	; 2
     b70:	f8 01       	movw	r30, r16
     b72:	b7 fe       	sbrs	r11, 7
     b74:	07 c0       	rjmp	.+14     	; 0xb84 <vfprintf+0x290>
     b76:	60 81       	ld	r22, Z
     b78:	71 81       	ldd	r23, Z+1	; 0x01
     b7a:	82 81       	ldd	r24, Z+2	; 0x02
     b7c:	93 81       	ldd	r25, Z+3	; 0x03
     b7e:	0c 5f       	subi	r16, 0xFC	; 252
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
     b82:	06 c0       	rjmp	.+12     	; 0xb90 <vfprintf+0x29c>
     b84:	60 81       	ld	r22, Z
     b86:	71 81       	ldd	r23, Z+1	; 0x01
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 5f       	subi	r16, 0xFE	; 254
     b8e:	1f 4f       	sbci	r17, 0xFF	; 255
     b90:	a3 01       	movw	r20, r6
     b92:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__ultoa_invert>
     b96:	88 2e       	mov	r8, r24
     b98:	86 18       	sub	r8, r6
     b9a:	fb 2d       	mov	r31, r11
     b9c:	ff 77       	andi	r31, 0x7F	; 127
     b9e:	3f 2e       	mov	r3, r31
     ba0:	36 fe       	sbrs	r3, 6
     ba2:	0d c0       	rjmp	.+26     	; 0xbbe <vfprintf+0x2ca>
     ba4:	23 2d       	mov	r18, r3
     ba6:	2e 7f       	andi	r18, 0xFE	; 254
     ba8:	a2 2e       	mov	r10, r18
     baa:	89 14       	cp	r8, r9
     bac:	58 f4       	brcc	.+22     	; 0xbc4 <vfprintf+0x2d0>
     bae:	34 fe       	sbrs	r3, 4
     bb0:	0b c0       	rjmp	.+22     	; 0xbc8 <vfprintf+0x2d4>
     bb2:	32 fc       	sbrc	r3, 2
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <vfprintf+0x2d4>
     bb6:	83 2d       	mov	r24, r3
     bb8:	8e 7e       	andi	r24, 0xEE	; 238
     bba:	a8 2e       	mov	r10, r24
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <vfprintf+0x2d4>
     bbe:	b8 2c       	mov	r11, r8
     bc0:	a3 2c       	mov	r10, r3
     bc2:	03 c0       	rjmp	.+6      	; 0xbca <vfprintf+0x2d6>
     bc4:	b8 2c       	mov	r11, r8
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <vfprintf+0x2d6>
     bc8:	b9 2c       	mov	r11, r9
     bca:	a4 fe       	sbrs	r10, 4
     bcc:	0f c0       	rjmp	.+30     	; 0xbec <vfprintf+0x2f8>
     bce:	fe 01       	movw	r30, r28
     bd0:	e8 0d       	add	r30, r8
     bd2:	f1 1d       	adc	r31, r1
     bd4:	80 81       	ld	r24, Z
     bd6:	80 33       	cpi	r24, 0x30	; 48
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <vfprintf+0x2ee>
     bda:	9a 2d       	mov	r25, r10
     bdc:	99 7e       	andi	r25, 0xE9	; 233
     bde:	a9 2e       	mov	r10, r25
     be0:	09 c0       	rjmp	.+18     	; 0xbf4 <vfprintf+0x300>
     be2:	a2 fe       	sbrs	r10, 2
     be4:	06 c0       	rjmp	.+12     	; 0xbf2 <vfprintf+0x2fe>
     be6:	b3 94       	inc	r11
     be8:	b3 94       	inc	r11
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <vfprintf+0x300>
     bec:	8a 2d       	mov	r24, r10
     bee:	86 78       	andi	r24, 0x86	; 134
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <vfprintf+0x300>
     bf2:	b3 94       	inc	r11
     bf4:	a3 fc       	sbrc	r10, 3
     bf6:	11 c0       	rjmp	.+34     	; 0xc1a <vfprintf+0x326>
     bf8:	a0 fe       	sbrs	r10, 0
     bfa:	06 c0       	rjmp	.+12     	; 0xc08 <vfprintf+0x314>
     bfc:	b2 14       	cp	r11, r2
     bfe:	88 f4       	brcc	.+34     	; 0xc22 <vfprintf+0x32e>
     c00:	28 0c       	add	r2, r8
     c02:	92 2c       	mov	r9, r2
     c04:	9b 18       	sub	r9, r11
     c06:	0e c0       	rjmp	.+28     	; 0xc24 <vfprintf+0x330>
     c08:	b2 14       	cp	r11, r2
     c0a:	60 f4       	brcc	.+24     	; 0xc24 <vfprintf+0x330>
     c0c:	b6 01       	movw	r22, r12
     c0e:	80 e2       	ldi	r24, 0x20	; 32
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 b5 07 	call	0xf6a	; 0xf6a <fputc>
     c16:	b3 94       	inc	r11
     c18:	f7 cf       	rjmp	.-18     	; 0xc08 <vfprintf+0x314>
     c1a:	b2 14       	cp	r11, r2
     c1c:	18 f4       	brcc	.+6      	; 0xc24 <vfprintf+0x330>
     c1e:	2b 18       	sub	r2, r11
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <vfprintf+0x332>
     c22:	98 2c       	mov	r9, r8
     c24:	21 2c       	mov	r2, r1
     c26:	a4 fe       	sbrs	r10, 4
     c28:	10 c0       	rjmp	.+32     	; 0xc4a <vfprintf+0x356>
     c2a:	b6 01       	movw	r22, r12
     c2c:	80 e3       	ldi	r24, 0x30	; 48
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 b5 07 	call	0xf6a	; 0xf6a <fputc>
     c34:	a2 fe       	sbrs	r10, 2
     c36:	17 c0       	rjmp	.+46     	; 0xc66 <vfprintf+0x372>
     c38:	a1 fc       	sbrc	r10, 1
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <vfprintf+0x34e>
     c3c:	88 e7       	ldi	r24, 0x78	; 120
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <vfprintf+0x352>
     c42:	88 e5       	ldi	r24, 0x58	; 88
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	b6 01       	movw	r22, r12
     c48:	0c c0       	rjmp	.+24     	; 0xc62 <vfprintf+0x36e>
     c4a:	8a 2d       	mov	r24, r10
     c4c:	86 78       	andi	r24, 0x86	; 134
     c4e:	59 f0       	breq	.+22     	; 0xc66 <vfprintf+0x372>
     c50:	a1 fe       	sbrs	r10, 1
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <vfprintf+0x364>
     c54:	8b e2       	ldi	r24, 0x2B	; 43
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <vfprintf+0x366>
     c58:	80 e2       	ldi	r24, 0x20	; 32
     c5a:	a7 fc       	sbrc	r10, 7
     c5c:	8d e2       	ldi	r24, 0x2D	; 45
     c5e:	b6 01       	movw	r22, r12
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 b5 07 	call	0xf6a	; 0xf6a <fputc>
     c66:	89 14       	cp	r8, r9
     c68:	38 f4       	brcc	.+14     	; 0xc78 <vfprintf+0x384>
     c6a:	b6 01       	movw	r22, r12
     c6c:	80 e3       	ldi	r24, 0x30	; 48
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 b5 07 	call	0xf6a	; 0xf6a <fputc>
     c74:	9a 94       	dec	r9
     c76:	f7 cf       	rjmp	.-18     	; 0xc66 <vfprintf+0x372>
     c78:	8a 94       	dec	r8
     c7a:	f3 01       	movw	r30, r6
     c7c:	e8 0d       	add	r30, r8
     c7e:	f1 1d       	adc	r31, r1
     c80:	80 81       	ld	r24, Z
     c82:	b6 01       	movw	r22, r12
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 b5 07 	call	0xf6a	; 0xf6a <fputc>
     c8a:	81 10       	cpse	r8, r1
     c8c:	f5 cf       	rjmp	.-22     	; 0xc78 <vfprintf+0x384>
     c8e:	22 20       	and	r2, r2
     c90:	09 f4       	brne	.+2      	; 0xc94 <vfprintf+0x3a0>
     c92:	42 ce       	rjmp	.-892    	; 0x918 <vfprintf+0x24>
     c94:	b6 01       	movw	r22, r12
     c96:	80 e2       	ldi	r24, 0x20	; 32
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <fputc>
     c9e:	2a 94       	dec	r2
     ca0:	f6 cf       	rjmp	.-20     	; 0xc8e <vfprintf+0x39a>
     ca2:	f6 01       	movw	r30, r12
     ca4:	86 81       	ldd	r24, Z+6	; 0x06
     ca6:	97 81       	ldd	r25, Z+7	; 0x07
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <vfprintf+0x3ba>
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	9f ef       	ldi	r25, 0xFF	; 255
     cae:	2b 96       	adiw	r28, 0x0b	; 11
     cb0:	e2 e1       	ldi	r30, 0x12	; 18
     cb2:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__epilogue_restores__>

00000cb6 <calloc>:
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	86 9f       	mul	r24, r22
     cc0:	80 01       	movw	r16, r0
     cc2:	87 9f       	mul	r24, r23
     cc4:	10 0d       	add	r17, r0
     cc6:	96 9f       	mul	r25, r22
     cc8:	10 0d       	add	r17, r0
     cca:	11 24       	eor	r1, r1
     ccc:	c8 01       	movw	r24, r16
     cce:	0e 94 77 06 	call	0xcee	; 0xcee <malloc>
     cd2:	ec 01       	movw	r28, r24
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	29 f0       	breq	.+10     	; 0xce2 <calloc+0x2c>
     cd8:	a8 01       	movw	r20, r16
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	0e 94 a3 07 	call	0xf46	; 0xf46 <memset>
     ce2:	ce 01       	movw	r24, r28
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	08 95       	ret

00000cee <malloc>:
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	82 30       	cpi	r24, 0x02	; 2
     cf8:	91 05       	cpc	r25, r1
     cfa:	10 f4       	brcc	.+4      	; 0xd00 <malloc+0x12>
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <__flp>
     d04:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <__flp+0x1>
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	a0 e0       	ldi	r26, 0x00	; 0
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	30 97       	sbiw	r30, 0x00	; 0
     d12:	19 f1       	breq	.+70     	; 0xd5a <malloc+0x6c>
     d14:	40 81       	ld	r20, Z
     d16:	51 81       	ldd	r21, Z+1	; 0x01
     d18:	02 81       	ldd	r16, Z+2	; 0x02
     d1a:	13 81       	ldd	r17, Z+3	; 0x03
     d1c:	48 17       	cp	r20, r24
     d1e:	59 07       	cpc	r21, r25
     d20:	c8 f0       	brcs	.+50     	; 0xd54 <malloc+0x66>
     d22:	84 17       	cp	r24, r20
     d24:	95 07       	cpc	r25, r21
     d26:	69 f4       	brne	.+26     	; 0xd42 <malloc+0x54>
     d28:	10 97       	sbiw	r26, 0x00	; 0
     d2a:	31 f0       	breq	.+12     	; 0xd38 <malloc+0x4a>
     d2c:	12 96       	adiw	r26, 0x02	; 2
     d2e:	0c 93       	st	X, r16
     d30:	12 97       	sbiw	r26, 0x02	; 2
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	1c 93       	st	X, r17
     d36:	27 c0       	rjmp	.+78     	; 0xd86 <malloc+0x98>
     d38:	00 93 ce 01 	sts	0x01CE, r16	; 0x8001ce <__flp>
     d3c:	10 93 cf 01 	sts	0x01CF, r17	; 0x8001cf <__flp+0x1>
     d40:	22 c0       	rjmp	.+68     	; 0xd86 <malloc+0x98>
     d42:	21 15       	cp	r18, r1
     d44:	31 05       	cpc	r19, r1
     d46:	19 f0       	breq	.+6      	; 0xd4e <malloc+0x60>
     d48:	42 17       	cp	r20, r18
     d4a:	53 07       	cpc	r21, r19
     d4c:	18 f4       	brcc	.+6      	; 0xd54 <malloc+0x66>
     d4e:	9a 01       	movw	r18, r20
     d50:	bd 01       	movw	r22, r26
     d52:	ef 01       	movw	r28, r30
     d54:	df 01       	movw	r26, r30
     d56:	f8 01       	movw	r30, r16
     d58:	db cf       	rjmp	.-74     	; 0xd10 <malloc+0x22>
     d5a:	21 15       	cp	r18, r1
     d5c:	31 05       	cpc	r19, r1
     d5e:	f9 f0       	breq	.+62     	; 0xd9e <malloc+0xb0>
     d60:	28 1b       	sub	r18, r24
     d62:	39 0b       	sbc	r19, r25
     d64:	24 30       	cpi	r18, 0x04	; 4
     d66:	31 05       	cpc	r19, r1
     d68:	80 f4       	brcc	.+32     	; 0xd8a <malloc+0x9c>
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	9b 81       	ldd	r25, Y+3	; 0x03
     d6e:	61 15       	cp	r22, r1
     d70:	71 05       	cpc	r23, r1
     d72:	21 f0       	breq	.+8      	; 0xd7c <malloc+0x8e>
     d74:	fb 01       	movw	r30, r22
     d76:	93 83       	std	Z+3, r25	; 0x03
     d78:	82 83       	std	Z+2, r24	; 0x02
     d7a:	04 c0       	rjmp	.+8      	; 0xd84 <malloc+0x96>
     d7c:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <__flp+0x1>
     d80:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__flp>
     d84:	fe 01       	movw	r30, r28
     d86:	32 96       	adiw	r30, 0x02	; 2
     d88:	44 c0       	rjmp	.+136    	; 0xe12 <malloc+0x124>
     d8a:	fe 01       	movw	r30, r28
     d8c:	e2 0f       	add	r30, r18
     d8e:	f3 1f       	adc	r31, r19
     d90:	81 93       	st	Z+, r24
     d92:	91 93       	st	Z+, r25
     d94:	22 50       	subi	r18, 0x02	; 2
     d96:	31 09       	sbc	r19, r1
     d98:	39 83       	std	Y+1, r19	; 0x01
     d9a:	28 83       	st	Y, r18
     d9c:	3a c0       	rjmp	.+116    	; 0xe12 <malloc+0x124>
     d9e:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <__brkval>
     da2:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <__brkval+0x1>
     da6:	23 2b       	or	r18, r19
     da8:	41 f4       	brne	.+16     	; 0xdba <malloc+0xcc>
     daa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     dae:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     db2:	30 93 cd 01 	sts	0x01CD, r19	; 0x8001cd <__brkval+0x1>
     db6:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <__brkval>
     dba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     dbe:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     dc2:	21 15       	cp	r18, r1
     dc4:	31 05       	cpc	r19, r1
     dc6:	41 f4       	brne	.+16     	; 0xdd8 <malloc+0xea>
     dc8:	2d b7       	in	r18, 0x3d	; 61
     dca:	3e b7       	in	r19, 0x3e	; 62
     dcc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     dd0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     dd4:	24 1b       	sub	r18, r20
     dd6:	35 0b       	sbc	r19, r21
     dd8:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <__brkval>
     ddc:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <__brkval+0x1>
     de0:	e2 17       	cp	r30, r18
     de2:	f3 07       	cpc	r31, r19
     de4:	a0 f4       	brcc	.+40     	; 0xe0e <malloc+0x120>
     de6:	2e 1b       	sub	r18, r30
     de8:	3f 0b       	sbc	r19, r31
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	78 f0       	brcs	.+30     	; 0xe0e <malloc+0x120>
     df0:	ac 01       	movw	r20, r24
     df2:	4e 5f       	subi	r20, 0xFE	; 254
     df4:	5f 4f       	sbci	r21, 0xFF	; 255
     df6:	24 17       	cp	r18, r20
     df8:	35 07       	cpc	r19, r21
     dfa:	48 f0       	brcs	.+18     	; 0xe0e <malloc+0x120>
     dfc:	4e 0f       	add	r20, r30
     dfe:	5f 1f       	adc	r21, r31
     e00:	50 93 cd 01 	sts	0x01CD, r21	; 0x8001cd <__brkval+0x1>
     e04:	40 93 cc 01 	sts	0x01CC, r20	; 0x8001cc <__brkval>
     e08:	81 93       	st	Z+, r24
     e0a:	91 93       	st	Z+, r25
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <malloc+0x124>
     e0e:	e0 e0       	ldi	r30, 0x00	; 0
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	cf 01       	movw	r24, r30
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	08 95       	ret

00000e1e <free>:
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	09 f4       	brne	.+2      	; 0xe28 <free+0xa>
     e26:	81 c0       	rjmp	.+258    	; 0xf2a <free+0x10c>
     e28:	fc 01       	movw	r30, r24
     e2a:	32 97       	sbiw	r30, 0x02	; 2
     e2c:	13 82       	std	Z+3, r1	; 0x03
     e2e:	12 82       	std	Z+2, r1	; 0x02
     e30:	a0 91 ce 01 	lds	r26, 0x01CE	; 0x8001ce <__flp>
     e34:	b0 91 cf 01 	lds	r27, 0x01CF	; 0x8001cf <__flp+0x1>
     e38:	10 97       	sbiw	r26, 0x00	; 0
     e3a:	81 f4       	brne	.+32     	; 0xe5c <free+0x3e>
     e3c:	20 81       	ld	r18, Z
     e3e:	31 81       	ldd	r19, Z+1	; 0x01
     e40:	82 0f       	add	r24, r18
     e42:	93 1f       	adc	r25, r19
     e44:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <__brkval>
     e48:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <__brkval+0x1>
     e4c:	28 17       	cp	r18, r24
     e4e:	39 07       	cpc	r19, r25
     e50:	51 f5       	brne	.+84     	; 0xea6 <free+0x88>
     e52:	f0 93 cd 01 	sts	0x01CD, r31	; 0x8001cd <__brkval+0x1>
     e56:	e0 93 cc 01 	sts	0x01CC, r30	; 0x8001cc <__brkval>
     e5a:	67 c0       	rjmp	.+206    	; 0xf2a <free+0x10c>
     e5c:	ed 01       	movw	r28, r26
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	ce 17       	cp	r28, r30
     e64:	df 07       	cpc	r29, r31
     e66:	40 f4       	brcc	.+16     	; 0xe78 <free+0x5a>
     e68:	4a 81       	ldd	r20, Y+2	; 0x02
     e6a:	5b 81       	ldd	r21, Y+3	; 0x03
     e6c:	9e 01       	movw	r18, r28
     e6e:	41 15       	cp	r20, r1
     e70:	51 05       	cpc	r21, r1
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <free+0x92>
     e74:	ea 01       	movw	r28, r20
     e76:	f5 cf       	rjmp	.-22     	; 0xe62 <free+0x44>
     e78:	d3 83       	std	Z+3, r29	; 0x03
     e7a:	c2 83       	std	Z+2, r28	; 0x02
     e7c:	40 81       	ld	r20, Z
     e7e:	51 81       	ldd	r21, Z+1	; 0x01
     e80:	84 0f       	add	r24, r20
     e82:	95 1f       	adc	r25, r21
     e84:	c8 17       	cp	r28, r24
     e86:	d9 07       	cpc	r29, r25
     e88:	59 f4       	brne	.+22     	; 0xea0 <free+0x82>
     e8a:	88 81       	ld	r24, Y
     e8c:	99 81       	ldd	r25, Y+1	; 0x01
     e8e:	84 0f       	add	r24, r20
     e90:	95 1f       	adc	r25, r21
     e92:	02 96       	adiw	r24, 0x02	; 2
     e94:	91 83       	std	Z+1, r25	; 0x01
     e96:	80 83       	st	Z, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	9b 81       	ldd	r25, Y+3	; 0x03
     e9c:	93 83       	std	Z+3, r25	; 0x03
     e9e:	82 83       	std	Z+2, r24	; 0x02
     ea0:	21 15       	cp	r18, r1
     ea2:	31 05       	cpc	r19, r1
     ea4:	29 f4       	brne	.+10     	; 0xeb0 <free+0x92>
     ea6:	f0 93 cf 01 	sts	0x01CF, r31	; 0x8001cf <__flp+0x1>
     eaa:	e0 93 ce 01 	sts	0x01CE, r30	; 0x8001ce <__flp>
     eae:	3d c0       	rjmp	.+122    	; 0xf2a <free+0x10c>
     eb0:	e9 01       	movw	r28, r18
     eb2:	fb 83       	std	Y+3, r31	; 0x03
     eb4:	ea 83       	std	Y+2, r30	; 0x02
     eb6:	49 91       	ld	r20, Y+
     eb8:	59 91       	ld	r21, Y+
     eba:	c4 0f       	add	r28, r20
     ebc:	d5 1f       	adc	r29, r21
     ebe:	ec 17       	cp	r30, r28
     ec0:	fd 07       	cpc	r31, r29
     ec2:	61 f4       	brne	.+24     	; 0xedc <free+0xbe>
     ec4:	80 81       	ld	r24, Z
     ec6:	91 81       	ldd	r25, Z+1	; 0x01
     ec8:	84 0f       	add	r24, r20
     eca:	95 1f       	adc	r25, r21
     ecc:	02 96       	adiw	r24, 0x02	; 2
     ece:	e9 01       	movw	r28, r18
     ed0:	99 83       	std	Y+1, r25	; 0x01
     ed2:	88 83       	st	Y, r24
     ed4:	82 81       	ldd	r24, Z+2	; 0x02
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	9b 83       	std	Y+3, r25	; 0x03
     eda:	8a 83       	std	Y+2, r24	; 0x02
     edc:	e0 e0       	ldi	r30, 0x00	; 0
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	12 96       	adiw	r26, 0x02	; 2
     ee2:	8d 91       	ld	r24, X+
     ee4:	9c 91       	ld	r25, X
     ee6:	13 97       	sbiw	r26, 0x03	; 3
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	19 f0       	breq	.+6      	; 0xef2 <free+0xd4>
     eec:	fd 01       	movw	r30, r26
     eee:	dc 01       	movw	r26, r24
     ef0:	f7 cf       	rjmp	.-18     	; 0xee0 <free+0xc2>
     ef2:	8d 91       	ld	r24, X+
     ef4:	9c 91       	ld	r25, X
     ef6:	11 97       	sbiw	r26, 0x01	; 1
     ef8:	9d 01       	movw	r18, r26
     efa:	2e 5f       	subi	r18, 0xFE	; 254
     efc:	3f 4f       	sbci	r19, 0xFF	; 255
     efe:	82 0f       	add	r24, r18
     f00:	93 1f       	adc	r25, r19
     f02:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <__brkval>
     f06:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <__brkval+0x1>
     f0a:	28 17       	cp	r18, r24
     f0c:	39 07       	cpc	r19, r25
     f0e:	69 f4       	brne	.+26     	; 0xf2a <free+0x10c>
     f10:	30 97       	sbiw	r30, 0x00	; 0
     f12:	29 f4       	brne	.+10     	; 0xf1e <free+0x100>
     f14:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <__flp+0x1>
     f18:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <__flp>
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <free+0x104>
     f1e:	13 82       	std	Z+3, r1	; 0x03
     f20:	12 82       	std	Z+2, r1	; 0x02
     f22:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <__brkval+0x1>
     f26:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <__brkval>
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <strnlen_P>:
     f30:	fc 01       	movw	r30, r24
     f32:	05 90       	lpm	r0, Z+
     f34:	61 50       	subi	r22, 0x01	; 1
     f36:	70 40       	sbci	r23, 0x00	; 0
     f38:	01 10       	cpse	r0, r1
     f3a:	d8 f7       	brcc	.-10     	; 0xf32 <strnlen_P+0x2>
     f3c:	80 95       	com	r24
     f3e:	90 95       	com	r25
     f40:	8e 0f       	add	r24, r30
     f42:	9f 1f       	adc	r25, r31
     f44:	08 95       	ret

00000f46 <memset>:
     f46:	dc 01       	movw	r26, r24
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <memset+0x6>
     f4a:	6d 93       	st	X+, r22
     f4c:	41 50       	subi	r20, 0x01	; 1
     f4e:	50 40       	sbci	r21, 0x00	; 0
     f50:	e0 f7       	brcc	.-8      	; 0xf4a <memset+0x4>
     f52:	08 95       	ret

00000f54 <strnlen>:
     f54:	fc 01       	movw	r30, r24
     f56:	61 50       	subi	r22, 0x01	; 1
     f58:	70 40       	sbci	r23, 0x00	; 0
     f5a:	01 90       	ld	r0, Z+
     f5c:	01 10       	cpse	r0, r1
     f5e:	d8 f7       	brcc	.-10     	; 0xf56 <strnlen+0x2>
     f60:	80 95       	com	r24
     f62:	90 95       	com	r25
     f64:	8e 0f       	add	r24, r30
     f66:	9f 1f       	adc	r25, r31
     f68:	08 95       	ret

00000f6a <fputc>:
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	fb 01       	movw	r30, r22
     f74:	23 81       	ldd	r18, Z+3	; 0x03
     f76:	21 fd       	sbrc	r18, 1
     f78:	03 c0       	rjmp	.+6      	; 0xf80 <fputc+0x16>
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	9f ef       	ldi	r25, 0xFF	; 255
     f7e:	2c c0       	rjmp	.+88     	; 0xfd8 <fputc+0x6e>
     f80:	22 ff       	sbrs	r18, 2
     f82:	16 c0       	rjmp	.+44     	; 0xfb0 <fputc+0x46>
     f84:	46 81       	ldd	r20, Z+6	; 0x06
     f86:	57 81       	ldd	r21, Z+7	; 0x07
     f88:	24 81       	ldd	r18, Z+4	; 0x04
     f8a:	35 81       	ldd	r19, Z+5	; 0x05
     f8c:	42 17       	cp	r20, r18
     f8e:	53 07       	cpc	r21, r19
     f90:	44 f4       	brge	.+16     	; 0xfa2 <fputc+0x38>
     f92:	a0 81       	ld	r26, Z
     f94:	b1 81       	ldd	r27, Z+1	; 0x01
     f96:	9d 01       	movw	r18, r26
     f98:	2f 5f       	subi	r18, 0xFF	; 255
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	31 83       	std	Z+1, r19	; 0x01
     f9e:	20 83       	st	Z, r18
     fa0:	8c 93       	st	X, r24
     fa2:	26 81       	ldd	r18, Z+6	; 0x06
     fa4:	37 81       	ldd	r19, Z+7	; 0x07
     fa6:	2f 5f       	subi	r18, 0xFF	; 255
     fa8:	3f 4f       	sbci	r19, 0xFF	; 255
     faa:	37 83       	std	Z+7, r19	; 0x07
     fac:	26 83       	std	Z+6, r18	; 0x06
     fae:	14 c0       	rjmp	.+40     	; 0xfd8 <fputc+0x6e>
     fb0:	8b 01       	movw	r16, r22
     fb2:	ec 01       	movw	r28, r24
     fb4:	fb 01       	movw	r30, r22
     fb6:	00 84       	ldd	r0, Z+8	; 0x08
     fb8:	f1 85       	ldd	r31, Z+9	; 0x09
     fba:	e0 2d       	mov	r30, r0
     fbc:	09 95       	icall
     fbe:	89 2b       	or	r24, r25
     fc0:	e1 f6       	brne	.-72     	; 0xf7a <fputc+0x10>
     fc2:	d8 01       	movw	r26, r16
     fc4:	16 96       	adiw	r26, 0x06	; 6
     fc6:	8d 91       	ld	r24, X+
     fc8:	9c 91       	ld	r25, X
     fca:	17 97       	sbiw	r26, 0x07	; 7
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	17 96       	adiw	r26, 0x07	; 7
     fd0:	9c 93       	st	X, r25
     fd2:	8e 93       	st	-X, r24
     fd4:	16 97       	sbiw	r26, 0x06	; 6
     fd6:	ce 01       	movw	r24, r28
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	08 95       	ret

00000fe2 <__ultoa_invert>:
     fe2:	fa 01       	movw	r30, r20
     fe4:	aa 27       	eor	r26, r26
     fe6:	28 30       	cpi	r18, 0x08	; 8
     fe8:	51 f1       	breq	.+84     	; 0x103e <__ultoa_invert+0x5c>
     fea:	20 31       	cpi	r18, 0x10	; 16
     fec:	81 f1       	breq	.+96     	; 0x104e <__ultoa_invert+0x6c>
     fee:	e8 94       	clt
     ff0:	6f 93       	push	r22
     ff2:	6e 7f       	andi	r22, 0xFE	; 254
     ff4:	6e 5f       	subi	r22, 0xFE	; 254
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255
     ff8:	8f 4f       	sbci	r24, 0xFF	; 255
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	af 4f       	sbci	r26, 0xFF	; 255
     ffe:	b1 e0       	ldi	r27, 0x01	; 1
    1000:	3e d0       	rcall	.+124    	; 0x107e <__ultoa_invert+0x9c>
    1002:	b4 e0       	ldi	r27, 0x04	; 4
    1004:	3c d0       	rcall	.+120    	; 0x107e <__ultoa_invert+0x9c>
    1006:	67 0f       	add	r22, r23
    1008:	78 1f       	adc	r23, r24
    100a:	89 1f       	adc	r24, r25
    100c:	9a 1f       	adc	r25, r26
    100e:	a1 1d       	adc	r26, r1
    1010:	68 0f       	add	r22, r24
    1012:	79 1f       	adc	r23, r25
    1014:	8a 1f       	adc	r24, r26
    1016:	91 1d       	adc	r25, r1
    1018:	a1 1d       	adc	r26, r1
    101a:	6a 0f       	add	r22, r26
    101c:	71 1d       	adc	r23, r1
    101e:	81 1d       	adc	r24, r1
    1020:	91 1d       	adc	r25, r1
    1022:	a1 1d       	adc	r26, r1
    1024:	20 d0       	rcall	.+64     	; 0x1066 <__ultoa_invert+0x84>
    1026:	09 f4       	brne	.+2      	; 0x102a <__ultoa_invert+0x48>
    1028:	68 94       	set
    102a:	3f 91       	pop	r19
    102c:	2a e0       	ldi	r18, 0x0A	; 10
    102e:	26 9f       	mul	r18, r22
    1030:	11 24       	eor	r1, r1
    1032:	30 19       	sub	r19, r0
    1034:	30 5d       	subi	r19, 0xD0	; 208
    1036:	31 93       	st	Z+, r19
    1038:	de f6       	brtc	.-74     	; 0xff0 <__ultoa_invert+0xe>
    103a:	cf 01       	movw	r24, r30
    103c:	08 95       	ret
    103e:	46 2f       	mov	r20, r22
    1040:	47 70       	andi	r20, 0x07	; 7
    1042:	40 5d       	subi	r20, 0xD0	; 208
    1044:	41 93       	st	Z+, r20
    1046:	b3 e0       	ldi	r27, 0x03	; 3
    1048:	0f d0       	rcall	.+30     	; 0x1068 <__ultoa_invert+0x86>
    104a:	c9 f7       	brne	.-14     	; 0x103e <__ultoa_invert+0x5c>
    104c:	f6 cf       	rjmp	.-20     	; 0x103a <__ultoa_invert+0x58>
    104e:	46 2f       	mov	r20, r22
    1050:	4f 70       	andi	r20, 0x0F	; 15
    1052:	40 5d       	subi	r20, 0xD0	; 208
    1054:	4a 33       	cpi	r20, 0x3A	; 58
    1056:	18 f0       	brcs	.+6      	; 0x105e <__ultoa_invert+0x7c>
    1058:	49 5d       	subi	r20, 0xD9	; 217
    105a:	31 fd       	sbrc	r19, 1
    105c:	40 52       	subi	r20, 0x20	; 32
    105e:	41 93       	st	Z+, r20
    1060:	02 d0       	rcall	.+4      	; 0x1066 <__ultoa_invert+0x84>
    1062:	a9 f7       	brne	.-22     	; 0x104e <__ultoa_invert+0x6c>
    1064:	ea cf       	rjmp	.-44     	; 0x103a <__ultoa_invert+0x58>
    1066:	b4 e0       	ldi	r27, 0x04	; 4
    1068:	a6 95       	lsr	r26
    106a:	97 95       	ror	r25
    106c:	87 95       	ror	r24
    106e:	77 95       	ror	r23
    1070:	67 95       	ror	r22
    1072:	ba 95       	dec	r27
    1074:	c9 f7       	brne	.-14     	; 0x1068 <__ultoa_invert+0x86>
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	61 05       	cpc	r22, r1
    107a:	71 05       	cpc	r23, r1
    107c:	08 95       	ret
    107e:	9b 01       	movw	r18, r22
    1080:	ac 01       	movw	r20, r24
    1082:	0a 2e       	mov	r0, r26
    1084:	06 94       	lsr	r0
    1086:	57 95       	ror	r21
    1088:	47 95       	ror	r20
    108a:	37 95       	ror	r19
    108c:	27 95       	ror	r18
    108e:	ba 95       	dec	r27
    1090:	c9 f7       	brne	.-14     	; 0x1084 <__ultoa_invert+0xa2>
    1092:	62 0f       	add	r22, r18
    1094:	73 1f       	adc	r23, r19
    1096:	84 1f       	adc	r24, r20
    1098:	95 1f       	adc	r25, r21
    109a:	a0 1d       	adc	r26, r0
    109c:	08 95       	ret

0000109e <__prologue_saves__>:
    109e:	2f 92       	push	r2
    10a0:	3f 92       	push	r3
    10a2:	4f 92       	push	r4
    10a4:	5f 92       	push	r5
    10a6:	6f 92       	push	r6
    10a8:	7f 92       	push	r7
    10aa:	8f 92       	push	r8
    10ac:	9f 92       	push	r9
    10ae:	af 92       	push	r10
    10b0:	bf 92       	push	r11
    10b2:	cf 92       	push	r12
    10b4:	df 92       	push	r13
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	ca 1b       	sub	r28, r26
    10c8:	db 0b       	sbc	r29, r27
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	09 94       	ijmp

000010d6 <__epilogue_restores__>:
    10d6:	2a 88       	ldd	r2, Y+18	; 0x12
    10d8:	39 88       	ldd	r3, Y+17	; 0x11
    10da:	48 88       	ldd	r4, Y+16	; 0x10
    10dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    10de:	6e 84       	ldd	r6, Y+14	; 0x0e
    10e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    10e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    10e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    10e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    10e8:	b9 84       	ldd	r11, Y+9	; 0x09
    10ea:	c8 84       	ldd	r12, Y+8	; 0x08
    10ec:	df 80       	ldd	r13, Y+7	; 0x07
    10ee:	ee 80       	ldd	r14, Y+6	; 0x06
    10f0:	fd 80       	ldd	r15, Y+5	; 0x05
    10f2:	0c 81       	ldd	r16, Y+4	; 0x04
    10f4:	1b 81       	ldd	r17, Y+3	; 0x03
    10f6:	aa 81       	ldd	r26, Y+2	; 0x02
    10f8:	b9 81       	ldd	r27, Y+1	; 0x01
    10fa:	ce 0f       	add	r28, r30
    10fc:	d1 1d       	adc	r29, r1
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	ed 01       	movw	r28, r26
    110a:	08 95       	ret

0000110c <_exit>:
    110c:	f8 94       	cli

0000110e <__stop_program>:
    110e:	ff cf       	rjmp	.-2      	; 0x110e <__stop_program>
