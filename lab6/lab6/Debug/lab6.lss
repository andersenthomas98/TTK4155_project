
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  00000f76  0000100a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001f8  008001f8  00001102  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001102  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000224f  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001103  00000000  00000000  00003633  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001202  00000000  00000000  00004736  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000061c  00000000  00000000  00005938  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e9  00000000  00000000  00005f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000126a  00000000  00000000  0000673d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000079a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_1>
   8:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_2>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_16>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e7       	ldi	r30, 0x76	; 118
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 3f       	cpi	r26, 0xF8	; 248
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a8 ef       	ldi	r26, 0xF8	; 248
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 30       	cpi	r26, 0x04	; 4
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
  a6:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:
	}
	
	
	MCP_requestToSend(0);
	// Transmission of CAN msg will start when the device detects that the bus is available...
}
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	0e 94 c8 01 	call	0x390	; 0x390 <MCP_init>
  b6:	65 e8       	ldi	r22, 0x85	; 133
  b8:	8b e2       	ldi	r24, 0x2B	; 43
  ba:	0e 94 db 01 	call	0x3b6	; 0x3b6 <MCP_write>
  be:	4c 2f       	mov	r20, r28
  c0:	60 ee       	ldi	r22, 0xE0	; 224
  c2:	8f e0       	ldi	r24, 0x0F	; 15
  c4:	0e 94 ed 01 	call	0x3da	; 0x3da <MCP_bitModify>
  c8:	40 e6       	ldi	r20, 0x60	; 96
  ca:	60 e6       	ldi	r22, 0x60	; 96
  cc:	80 e6       	ldi	r24, 0x60	; 96
  ce:	0e 94 ed 01 	call	0x3da	; 0x3da <MCP_bitModify>
  d2:	8f e0       	ldi	r24, 0x0F	; 15
  d4:	0e 94 cd 01 	call	0x39a	; 0x39a <MCP_read>
  d8:	86 ff       	sbrs	r24, 6
  da:	08 c0       	rjmp	.+16     	; 0xec <CAN_init+0x3e>
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	9f 93       	push	r25
  e2:	8f 93       	push	r24
  e4:	0e 94 97 03 	call	0x72e	; 0x72e <printf>
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <CAN_message_recieve>:

msg_t CAN_message_recieve(void) {
  f0:	7f 92       	push	r7
  f2:	8f 92       	push	r8
  f4:	9f 92       	push	r9
  f6:	af 92       	push	r10
  f8:	bf 92       	push	r11
  fa:	cf 92       	push	r12
  fc:	df 92       	push	r13
  fe:	ef 92       	push	r14
 100:	ff 92       	push	r15
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	2a 97       	sbiw	r28, 0x0a	; 10
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	5c 01       	movw	r10, r24
	msg_t msg;
	
	// Read ID from RXB0SIDH and RXB0SIDL
	uint8_t upperId = MCP_read(MCP_RXB0CTRL + 1);
 11c:	81 e6       	ldi	r24, 0x61	; 97
 11e:	0e 94 cd 01 	call	0x39a	; 0x39a <MCP_read>
 122:	78 2e       	mov	r7, r24
	printf("recieved upper ID = %#X \n\r", upperId);
 124:	1f 92       	push	r1
 126:	8f 93       	push	r24
 128:	88 e2       	ldi	r24, 0x28	; 40
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	9f 93       	push	r25
 12e:	8f 93       	push	r24
 130:	0e 94 97 03 	call	0x72e	; 0x72e <printf>
	//printf("recieved lower ID = %#X \n\r", lowerId);
	//msg.id =  (upperId << 8) + lowerId;
	msg.id = upperId ;
	
	// Read length from RXB0DLC
	msg.length = MCP_read(MCP_RXB0CTRL + 5);
 134:	85 e6       	ldi	r24, 0x65	; 101
 136:	0e 94 cd 01 	call	0x39a	; 0x39a <MCP_read>
 13a:	08 2f       	mov	r16, r24
	
	// Read data
	int dataIterator = 0;
	for (uint8_t i = MCP_RXB0CTRL + 6; i <= MCP_RXB0CTRL + 6 + msg.length; i++) {
 13c:	c8 2e       	mov	r12, r24
 13e:	d1 2c       	mov	r13, r1
 140:	26 e6       	ldi	r18, 0x66	; 102
 142:	c2 0e       	add	r12, r18
 144:	d1 1c       	adc	r13, r1
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	36 e6       	ldi	r19, 0x66	; 102
 150:	c3 16       	cp	r12, r19
 152:	d1 04       	cpc	r13, r1
 154:	cc f0       	brlt	.+50     	; 0x188 <CAN_message_recieve+0x98>
 156:	7e 01       	movw	r14, r28
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	e8 0e       	add	r14, r24
 15c:	f1 1c       	adc	r15, r1
 15e:	16 e6       	ldi	r17, 0x66	; 102
 160:	ce 01       	movw	r24, r28
 162:	80 95       	com	r24
 164:	90 95       	com	r25
 166:	fc 01       	movw	r30, r24
 168:	ec 59       	subi	r30, 0x9C	; 156
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	4f 01       	movw	r8, r30
		msg.data[dataIterator] = MCP_read(i);
 16e:	81 2f       	mov	r24, r17
 170:	0e 94 cd 01 	call	0x39a	; 0x39a <MCP_read>
 174:	f7 01       	movw	r30, r14
 176:	81 93       	st	Z+, r24
 178:	7f 01       	movw	r14, r30
	// Read length from RXB0DLC
	msg.length = MCP_read(MCP_RXB0CTRL + 5);
	
	// Read data
	int dataIterator = 0;
	for (uint8_t i = MCP_RXB0CTRL + 6; i <= MCP_RXB0CTRL + 6 + msg.length; i++) {
 17a:	1f 5f       	subi	r17, 0xFF	; 255
 17c:	c4 01       	movw	r24, r8
 17e:	8e 0f       	add	r24, r30
 180:	9f 1f       	adc	r25, r31
 182:	c8 16       	cp	r12, r24
 184:	d9 06       	cpc	r13, r25
 186:	9c f7       	brge	.-26     	; 0x16e <CAN_message_recieve+0x7e>
		msg.data[dataIterator] = MCP_read(i);
		dataIterator++;
	}
	return msg;
 188:	79 82       	std	Y+1, r7	; 0x01
 18a:	0a 83       	std	Y+2, r16	; 0x02
 18c:	8a e0       	ldi	r24, 0x0A	; 10
 18e:	fe 01       	movw	r30, r28
 190:	31 96       	adiw	r30, 0x01	; 1
 192:	d5 01       	movw	r26, r10
 194:	01 90       	ld	r0, Z+
 196:	0d 92       	st	X+, r0
 198:	8a 95       	dec	r24
 19a:	e1 f7       	brne	.-8      	; 0x194 <CAN_message_recieve+0xa4>
} 
 19c:	c5 01       	movw	r24, r10
 19e:	2a 96       	adiw	r28, 0x0a	; 10
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	bf 90       	pop	r11
 1bc:	af 90       	pop	r10
 1be:	9f 90       	pop	r9
 1c0:	8f 90       	pop	r8
 1c2:	7f 90       	pop	r7
 1c4:	08 95       	ret

000001c6 <btn_init>:
	msg.data[0] = joystickDirection;
	CAN_message_send(msgPtr);
}

void btn_init(void) {
	DDRB &= ~(1 << PB0);
 1c6:	b8 98       	cbi	0x17, 0	; 23
	DDRB &= ~(1 << PB1);
 1c8:	b9 98       	cbi	0x17, 1	; 23
 1ca:	08 95       	ret

000001cc <INTERRUPT_init>:
volatile int ADC_INTERRUPT_READY = 0;


void INTERRUPT_init() {
	// disable global interrupts (set SREG register)
	cli();
 1cc:	f8 94       	cli
	
	// Enable that a falling edge generates an interrupt request for INT0
	MCUCR |= (1 << ISC01);
 1ce:	85 b7       	in	r24, 0x35	; 53
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
 1d4:	85 b7       	in	r24, 0x35	; 53
 1d6:	8e 7f       	andi	r24, 0xFE	; 254
 1d8:	85 bf       	out	0x35, r24	; 53
	
	
	// Enable that a falling edge generates an interrupt request for INT1
	MCUCR |= (1 << ISC11);
 1da:	85 b7       	in	r24, 0x35	; 53
 1dc:	88 60       	ori	r24, 0x08	; 8
 1de:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);	
 1e0:	85 b7       	in	r24, 0x35	; 53
 1e2:	8b 7f       	andi	r24, 0xFB	; 251
 1e4:	85 bf       	out	0x35, r24	; 53

	
	// Enable interrupt on INT0 (from ADC) and INT1 (from MCP)
	GICR |= (1 << INT0);
 1e6:	8b b7       	in	r24, 0x3b	; 59
 1e8:	80 64       	ori	r24, 0x40	; 64
 1ea:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1); 
 1ec:	8b b7       	in	r24, 0x3b	; 59
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	8b bf       	out	0x3b, r24	; 59
		
	// Setup for timer interrupt
	OCR0 = 160;
 1f2:	80 ea       	ldi	r24, 0xA0	; 160
 1f4:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1 << OCIE0);
 1f6:	89 b7       	in	r24, 0x39	; 57
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	89 bf       	out	0x39, r24	; 57
		
		
	// Enable global interrupts (set SREG register)
	sei();
 1fc:	78 94       	sei
 1fe:	08 95       	ret

00000200 <__vector_1>:
}

// Interrupt for ADC
ISR(INT0_vect) {
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
	// Disable global interrupts while executing an ISR (?)
	//cli();
	ADC_INTERRUPT_READY = 1;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <__data_end+0x1>
 216:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <__data_end>
	// Reset interrupt flag
	//GIFR &= ~(1 << INTF0);
	//GIFR |= (1 << INTF0);
	//printf("routine finished\n\r");
	//sei();
}
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_2>:

// CAN interrupts
ISR(INT1_vect) {
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	2f 93       	push	r18
 234:	3f 93       	push	r19
 236:	4f 93       	push	r20
 238:	5f 93       	push	r21
 23a:	6f 93       	push	r22
 23c:	7f 93       	push	r23
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
 252:	2a 97       	sbiw	r28, 0x0a	; 10
 254:	de bf       	out	0x3e, r29	; 62
 256:	cd bf       	out	0x3d, r28	; 61
	if (MCP_read(MCP_CANINTF) & MCP_TX0IF) {
 258:	8c e2       	ldi	r24, 0x2C	; 44
 25a:	0e 94 cd 01 	call	0x39a	; 0x39a <MCP_read>
 25e:	82 ff       	sbrs	r24, 2
 260:	0d c0       	rjmp	.+26     	; 0x27c <__vector_2+0x54>
		printf("Message sendt succesfully\n\r");
 262:	83 e4       	ldi	r24, 0x43	; 67
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	9f 93       	push	r25
 268:	8f 93       	push	r24
 26a:	0e 94 97 03 	call	0x72e	; 0x72e <printf>
		
		// Reset transmit flag
		MCP_bitModify(MCP_CANINTF, MCP_TX0IF, 0);
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	64 e0       	ldi	r22, 0x04	; 4
 272:	8c e2       	ldi	r24, 0x2C	; 44
 274:	0e 94 ed 01 	call	0x3da	; 0x3da <MCP_bitModify>
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
	}
	// Message recieved at recieve buffer 0
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF) {
 27c:	8c e2       	ldi	r24, 0x2C	; 44
 27e:	0e 94 cd 01 	call	0x39a	; 0x39a <MCP_read>
 282:	80 ff       	sbrs	r24, 0
 284:	2f c0       	rjmp	.+94     	; 0x2e4 <__vector_2+0xbc>
		struct CAN_message msg = CAN_message_recieve();
 286:	ce 01       	movw	r24, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	0e 94 78 00 	call	0xf0	; 0xf0 <CAN_message_recieve>
		printf("--- Message recieved ---\n\r");
 28e:	8f e5       	ldi	r24, 0x5F	; 95
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	9f 93       	push	r25
 294:	8f 93       	push	r24
 296:	0e 94 97 03 	call	0x72e	; 0x72e <printf>
		printf("ID: %#X \n\r", msg.id);
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	1f 92       	push	r1
 29e:	8f 93       	push	r24
 2a0:	8a e7       	ldi	r24, 0x7A	; 122
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	9f 93       	push	r25
 2a6:	8f 93       	push	r24
 2a8:	0e 94 97 03 	call	0x72e	; 0x72e <printf>
		printf("Length: %d \n\r", msg.length);
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	1f 92       	push	r1
 2b0:	8f 93       	push	r24
 2b2:	85 e8       	ldi	r24, 0x85	; 133
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	9f 93       	push	r25
 2b8:	8f 93       	push	r24
 2ba:	0e 94 97 03 	call	0x72e	; 0x72e <printf>
		printf("Data[0] = %#X \n\r", msg.data[0]);
 2be:	8b 81       	ldd	r24, Y+3	; 0x03
 2c0:	1f 92       	push	r1
 2c2:	8f 93       	push	r24
 2c4:	83 e9       	ldi	r24, 0x93	; 147
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	9f 93       	push	r25
 2ca:	8f 93       	push	r24
 2cc:	0e 94 97 03 	call	0x72e	; 0x72e <printf>
	
		// Reset recieve flag
		MCP_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	8c e2       	ldi	r24, 0x2C	; 44
 2d6:	0e 94 ed 01 	call	0x3da	; 0x3da <MCP_bitModify>
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
	}
	if (MCP_read(MCP_CANINTF) & MCP_MERRF) {
 2e4:	8c e2       	ldi	r24, 0x2C	; 44
 2e6:	0e 94 cd 01 	call	0x39a	; 0x39a <MCP_read>
 2ea:	88 23       	and	r24, r24
 2ec:	44 f4       	brge	.+16     	; 0x2fe <__vector_2+0xd6>
		printf("CAN BUS ERROR!");
 2ee:	84 ea       	ldi	r24, 0xA4	; 164
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	9f 93       	push	r25
 2f4:	8f 93       	push	r24
 2f6:	0e 94 97 03 	call	0x72e	; 0x72e <printf>
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
	}
}
 2fe:	2a 96       	adiw	r28, 0x0a	; 10
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	f8 94       	cli
 304:	de bf       	out	0x3e, r29	; 62
 306:	0f be       	out	0x3f, r0	; 63
 308:	cd bf       	out	0x3d, r28	; 61
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	7f 91       	pop	r23
 31c:	6f 91       	pop	r22
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <__vector_16>:

ISR(TIMER0_COMP_vect) {
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	2f 93       	push	r18
 33c:	3f 93       	push	r19
 33e:	4f 93       	push	r20
 340:	5f 93       	push	r21
 342:	6f 93       	push	r22
 344:	7f 93       	push	r23
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
	printf("compare\n\r");
 352:	83 eb       	ldi	r24, 0xB3	; 179
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	9f 93       	push	r25
 358:	8f 93       	push	r24
 35a:	0e 94 97 03 	call	0x72e	; 0x72e <printf>
	
	// Timer is reset automatically
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	bf 91       	pop	r27
 368:	af 91       	pop	r26
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	7f 91       	pop	r23
 370:	6f 91       	pop	r22
 372:	5f 91       	pop	r21
 374:	4f 91       	pop	r20
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <MCP_reset>:
	else {
		SPI_transmit(MCP_RTS_ALL);
	}
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
 384:	c4 98       	cbi	0x18, 4	; 24
 386:	80 ec       	ldi	r24, 0xC0	; 192
 388:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_transmit>
 38c:	c4 9a       	sbi	0x18, 4	; 24
 38e:	08 95       	ret

00000390 <MCP_init>:
 390:	0e 94 c6 02 	call	0x58c	; 0x58c <SPI_MasterInit>
 394:	0e 94 c2 01 	call	0x384	; 0x384 <MCP_reset>
 398:	08 95       	ret

0000039a <MCP_read>:
 39a:	cf 93       	push	r28
 39c:	c8 2f       	mov	r28, r24
 39e:	c4 98       	cbi	0x18, 4	; 24
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_transmit>
 3a6:	8c 2f       	mov	r24, r28
 3a8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_transmit>
 3ac:	0e 94 d7 02 	call	0x5ae	; 0x5ae <SPI_read>
 3b0:	c4 9a       	sbi	0x18, 4	; 24
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <MCP_write>:
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	d8 2f       	mov	r29, r24
 3bc:	c6 2f       	mov	r28, r22
 3be:	c4 98       	cbi	0x18, 4	; 24
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_transmit>
 3c6:	8d 2f       	mov	r24, r29
 3c8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_transmit>
 3cc:	8c 2f       	mov	r24, r28
 3ce:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_transmit>
 3d2:	c4 9a       	sbi	0x18, 4	; 24
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <MCP_bitModify>:
}

void MCP_bitModify(uint8_t address, uint8_t mask, uint8_t data) {
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	18 2f       	mov	r17, r24
 3e2:	d6 2f       	mov	r29, r22
 3e4:	c4 2f       	mov	r28, r20
	// Select CAN controller
	PORTB &= ~(1 << PB4);
 3e6:	c4 98       	cbi	0x18, 4	; 24
	
	// Send BIT MODIFY instruction
	SPI_transmit(MCP_BITMOD);
 3e8:	85 e0       	ldi	r24, 0x05	; 5
 3ea:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_transmit>
	
	// Send address of register
	SPI_transmit(address);
 3ee:	81 2f       	mov	r24, r17
 3f0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_transmit>
	
	// Send mask byte
	SPI_transmit(mask);
 3f4:	8d 2f       	mov	r24, r29
 3f6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_transmit>
	
	// Send data byte
	SPI_transmit(data);
 3fa:	8c 2f       	mov	r24, r28
 3fc:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_transmit>
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
 400:	c4 9a       	sbi	0x18, 4	; 24
}
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	08 95       	ret

0000040a <OLED_init>:
	uint16_t index = 0x800 + page*128 + x;
	uint8_t value = XMEM_read(index);
	value &= ~(1 << height);
	XMEM_write(value, index);
	}
}
 40a:	6e ea       	ldi	r22, 0xAE	; 174
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	8e ea       	ldi	r24, 0xAE	; 174
 410:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 414:	61 ea       	ldi	r22, 0xA1	; 161
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	81 ea       	ldi	r24, 0xA1	; 161
 41a:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 41e:	6a ed       	ldi	r22, 0xDA	; 218
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	8a ed       	ldi	r24, 0xDA	; 218
 424:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 428:	62 e1       	ldi	r22, 0x12	; 18
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	82 e1       	ldi	r24, 0x12	; 18
 42e:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 432:	68 ec       	ldi	r22, 0xC8	; 200
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	88 ec       	ldi	r24, 0xC8	; 200
 438:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 43c:	68 ea       	ldi	r22, 0xA8	; 168
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	88 ea       	ldi	r24, 0xA8	; 168
 442:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 446:	6f e3       	ldi	r22, 0x3F	; 63
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	8f e3       	ldi	r24, 0x3F	; 63
 44c:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 450:	65 ed       	ldi	r22, 0xD5	; 213
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	85 ed       	ldi	r24, 0xD5	; 213
 456:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 45a:	60 e8       	ldi	r22, 0x80	; 128
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	80 e8       	ldi	r24, 0x80	; 128
 460:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 464:	61 e8       	ldi	r22, 0x81	; 129
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	81 e8       	ldi	r24, 0x81	; 129
 46a:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 46e:	60 e5       	ldi	r22, 0x50	; 80
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	80 e5       	ldi	r24, 0x50	; 80
 474:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 478:	69 ed       	ldi	r22, 0xD9	; 217
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	89 ed       	ldi	r24, 0xD9	; 217
 47e:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 482:	61 e2       	ldi	r22, 0x21	; 33
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	81 e2       	ldi	r24, 0x21	; 33
 488:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 48c:	60 e2       	ldi	r22, 0x20	; 32
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	80 e2       	ldi	r24, 0x20	; 32
 492:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 496:	62 e0       	ldi	r22, 0x02	; 2
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 4a0:	6b ed       	ldi	r22, 0xDB	; 219
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	8b ed       	ldi	r24, 0xDB	; 219
 4a6:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 4aa:	60 e3       	ldi	r22, 0x30	; 48
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	80 e3       	ldi	r24, 0x30	; 48
 4b0:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 4b4:	6d ea       	ldi	r22, 0xAD	; 173
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	8d ea       	ldi	r24, 0xAD	; 173
 4ba:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 4c8:	64 ea       	ldi	r22, 0xA4	; 164
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	84 ea       	ldi	r24, 0xA4	; 164
 4ce:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 4d2:	66 ea       	ldi	r22, 0xA6	; 166
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	86 ea       	ldi	r24, 0xA6	; 166
 4d8:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 4dc:	63 ed       	ldi	r22, 0xD3	; 211
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	83 ed       	ldi	r24, 0xD3	; 211
 4e2:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 4f0:	6f ea       	ldi	r22, 0xAF	; 175
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	8f ea       	ldi	r24, 0xAF	; 175
 4f6:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 4fa:	08 95       	ret

000004fc <OLED_refresh>:


void OLED_refresh(void){
 4fc:	ef 92       	push	r14
 4fe:	ff 92       	push	r15
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	c0 e0       	ldi	r28, 0x00	; 0
 50a:	d8 e0       	ldi	r29, 0x08	; 8
 50c:	0f 2e       	mov	r0, r31
 50e:	f0 eb       	ldi	r31, 0xB0	; 176
 510:	ef 2e       	mov	r14, r31
 512:	f1 2c       	mov	r15, r1
 514:	f0 2d       	mov	r31, r0
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
 516:	b7 01       	movw	r22, r14
 518:	8e 2d       	mov	r24, r14
 51a:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
		XMEM_write(0, 0);		// Set lower column start address
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
		XMEM_write(0x10, 0x10);  // Set data register
 528:	60 e1       	ldi	r22, 0x10	; 16
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	80 e1       	ldi	r24, 0x10	; 16
 52e:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 532:	8e 01       	movw	r16, r28
 534:	00 58       	subi	r16, 0x80	; 128
 536:	1f 4f       	sbci	r17, 0xFF	; 255
		for (int column = 0; column < 128; column++){
			uint8_t SRAMvalue = XMEM_read(0x800 + page*128 + column);
 538:	ce 01       	movw	r24, r28
 53a:	0e 94 06 03 	call	0x60c	; 0x60c <XMEM_read>
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
 53e:	68 2f       	mov	r22, r24
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	7e 5f       	subi	r23, 0xFE	; 254
 544:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
 548:	21 96       	adiw	r28, 0x01	; 1
void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
		XMEM_write(0, 0);		// Set lower column start address
		XMEM_write(0x10, 0x10);  // Set data register
		for (int column = 0; column < 128; column++){
 54a:	c0 17       	cp	r28, r16
 54c:	d1 07       	cpc	r29, r17
 54e:	a1 f7       	brne	.-24     	; 0x538 <__stack+0x39>
 550:	8f ef       	ldi	r24, 0xFF	; 255
 552:	e8 1a       	sub	r14, r24
 554:	f8 0a       	sbc	r15, r24
 556:	e8 01       	movw	r28, r16
	}
}


void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
 558:	01 15       	cp	r16, r1
 55a:	1c 40       	sbci	r17, 0x0C	; 12
 55c:	e1 f6       	brne	.-72     	; 0x516 <__stack+0x17>
		for (int column = 0; column < 128; column++){
			uint8_t SRAMvalue = XMEM_read(0x800 + page*128 + column);
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
		}
	}
}
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	ef 90       	pop	r14
 56a:	08 95       	ret

0000056c <OLED_clearAll>:


void OLED_clearAll(void) {
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
	for (uint16_t index = 0x800; index < 0x800 + 1024; index++){
 570:	c0 e0       	ldi	r28, 0x00	; 0
 572:	d8 e0       	ldi	r29, 0x08	; 8
		XMEM_write(0, index);
 574:	be 01       	movw	r22, r28
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 0a 03 	call	0x614	; 0x614 <XMEM_write>
	}
}


void OLED_clearAll(void) {
	for (uint16_t index = 0x800; index < 0x800 + 1024; index++){
 57c:	21 96       	adiw	r28, 0x01	; 1
 57e:	c1 15       	cp	r28, r1
 580:	8c e0       	ldi	r24, 0x0C	; 12
 582:	d8 07       	cpc	r29, r24
 584:	b9 f7       	brne	.-18     	; 0x574 <OLED_clearAll+0x8>
		XMEM_write(0, index);
	}
}
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	08 95       	ret

0000058c <SPI_MasterInit>:
#include "interrupt.h"
#include <avr/io.h>

void SPI_MasterInit(void) {
	// Set PB4 (/SS), PB5 (MOSI) and PB7 (SCK) as output
	DDRB |= (1 << DDB4) | (1 << DDB5) | (1 << DDB7);
 58c:	87 b3       	in	r24, 0x17	; 23
 58e:	80 6b       	ori	r24, 0xB0	; 176
 590:	87 bb       	out	0x17, r24	; 23
	
	// Set PB6 (MISO) as input
	DDRB &= ~(1 << DDB6);
 592:	be 98       	cbi	0x17, 6	; 23
	
	// Select Master SPI mode, SPI enable, SPI interrupt enable (Global interrupts must be enabled)
	SPCR |= (1 << MSTR) | (1 << SPE); //| (1 << SPIE);
 594:	8d b1       	in	r24, 0x0d	; 13
 596:	80 65       	ori	r24, 0x50	; 80
 598:	8d b9       	out	0x0d, r24	; 13

	// Transmit MSB of the data word first
	SPCR &= ~(1 << DORD);
 59a:	6d 98       	cbi	0x0d, 5	; 13
	
	// Configure clock polarity (SCK is low when idle)
	SPCR &= ~(1 << CPOL);
 59c:	6b 98       	cbi	0x0d, 3	; 13
	
	// Configure clock phase (data is sampled on leading edge)
	SPCR &= ~(1 << CPHA);
 59e:	6a 98       	cbi	0x0d, 2	; 13
	
	// Configure SCK rate (f_osc/4)
	SPCR &= ~(1 << SPR0);
 5a0:	68 98       	cbi	0x0d, 0	; 13
	SPCR &= ~(1 << SPR1);
 5a2:	69 98       	cbi	0x0d, 1	; 13
 5a4:	08 95       	ret

000005a6 <SPI_transmit>:
}

void SPI_transmit(uint8_t data) {
	// Initiate data transmission
	SPDR = data;
 5a6:	8f b9       	out	0x0f, r24	; 15
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
 5a8:	77 9b       	sbis	0x0e, 7	; 14
 5aa:	fe cf       	rjmp	.-4      	; 0x5a8 <SPI_transmit+0x2>
}	
 5ac:	08 95       	ret

000005ae <SPI_read>:

uint8_t SPI_read(void) {
	SPDR = 0xFF; // Send dummy byte
 5ae:	8f ef       	ldi	r24, 0xFF	; 255
 5b0:	8f b9       	out	0x0f, r24	; 15
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
 5b2:	77 9b       	sbis	0x0e, 7	; 14
 5b4:	fe cf       	rjmp	.-4      	; 0x5b2 <SPI_read+0x4>
	
	return SPDR;
 5b6:	8f b1       	in	r24, 0x0f	; 15
	// SPIF bit in SPSR register is reset when accessing SPDR
}
 5b8:	08 95       	ret

000005ba <timer_8bit1024divisionCheckOnlyinit>:
	cli();
	/* Set TCNTn to i */
	TCNT0 = i;
	/* Restore Global Interrupt Flag */
	SREG = sreg;
	sei();
 5ba:	85 e2       	ldi	r24, 0x25	; 37
 5bc:	83 bf       	out	0x33, r24	; 51
 5be:	08 95       	ret

000005c0 <TIM8_ReadTCNT0>:
unsigned int TIM8_ReadTCNT0(void)
{
	unsigned char sreg;
	uint8_t i;
	/* Save Global Interrupt Flag */
	sreg = SREG;
 5c0:	9f b7       	in	r25, 0x3f	; 63
	/* Disable interrupts */
	cli();
 5c2:	f8 94       	cli
	/* Read TCNTn into i */
	i = TCNT0;
 5c4:	82 b7       	in	r24, 0x32	; 50
	/* Restore Global Interrupt Flag */
	SREG = sreg;
 5c6:	9f bf       	out	0x3f, r25	; 63
	sei();
 5c8:	78 94       	sei
	return i;
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	08 95       	ret

000005ce <UART_transmit>:
#include <util/delay.h>
#include "uart.h"

void UART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while ( ! (UCSR0A & (1<<UDRE0))) {
 5ce:	5d 9b       	sbis	0x0b, 5	; 11
 5d0:	fe cf       	rjmp	.-4      	; 0x5ce <UART_transmit>
		// waiting...
	}
	// Put data into buffer, sends the data
	UDR0 = data;
 5d2:	8c b9       	out	0x0c, r24	; 12
 5d4:	08 95       	ret

000005d6 <UART_receive>:
}

unsigned char UART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1 << RXC0))) {
 5d6:	5f 9b       	sbis	0x0b, 7	; 11
 5d8:	fe cf       	rjmp	.-4      	; 0x5d6 <UART_receive>
		// wait...
	}
	return UDR0;
 5da:	8c b1       	in	r24, 0x0c	; 12
	
}
 5dc:	08 95       	ret

000005de <UART_init>:

void UART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = ubrr>>8;
 5de:	90 bd       	out	0x20, r25	; 32
	UBRR0L = ubrr;
 5e0:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 5e2:	88 e1       	ldi	r24, 0x18	; 24
 5e4:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 5e6:	8e e8       	ldi	r24, 0x8E	; 142
 5e8:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(UART_transmit, UART_receive);
 5ea:	6b ee       	ldi	r22, 0xEB	; 235
 5ec:	72 e0       	ldi	r23, 0x02	; 2
 5ee:	87 ee       	ldi	r24, 0xE7	; 231
 5f0:	92 e0       	ldi	r25, 0x02	; 2
 5f2:	0e 94 4c 03 	call	0x698	; 0x698 <fdevopen>
 5f6:	08 95       	ret

000005f8 <XMEM_init>:
#include "uart.h"
#define BASE_ADDRESS 0x1000

void XMEM_init(void) {
	// Enable XMEM
	MCUCR |= (1 << SRE);
 5f8:	85 b7       	in	r24, 0x35	; 53
 5fa:	80 68       	ori	r24, 0x80	; 128
 5fc:	85 bf       	out	0x35, r24	; 53
	
	// SFIOR = XX100XXX
	// We use PC7-PC4 for JTAG, NOT for XMEM address
	SFIOR |= (1 << XMM2);
 5fe:	80 b7       	in	r24, 0x30	; 48
 600:	80 62       	ori	r24, 0x20	; 32
 602:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~((1 << XMM1) | (1 << XMM0));
 604:	80 b7       	in	r24, 0x30	; 48
 606:	87 7e       	andi	r24, 0xE7	; 231
 608:	80 bf       	out	0x30, r24	; 48
 60a:	08 95       	ret

0000060c <XMEM_read>:
}

uint8_t XMEM_read(uint16_t address) {
	volatile uint8_t *ext_mem = (uint8_t*) BASE_ADDRESS;
	return ext_mem[address];
 60c:	90 5f       	subi	r25, 0xF0	; 240
 60e:	fc 01       	movw	r30, r24
 610:	80 81       	ld	r24, Z
}
 612:	08 95       	ret

00000614 <XMEM_write>:

void XMEM_write(uint8_t data, uint16_t address) {
	volatile uint8_t *ext_mem = (uint8_t *) BASE_ADDRESS;
	ext_mem[address] = data;
 614:	fb 01       	movw	r30, r22
 616:	f0 5f       	subi	r31, 0xF0	; 240
 618:	80 83       	st	Z, r24
 61a:	08 95       	ret

0000061c <main>:
#define MYUBRR 31


int main(void)
{
	INTERRUPT_init();
 61c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <INTERRUPT_init>
	UART_init(MYUBRR);
 620:	8f e1       	ldi	r24, 0x1F	; 31
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 ef 02 	call	0x5de	; 0x5de <UART_init>
	printf("\n\rmainHeyoo\n\r");
 628:	8d eb       	ldi	r24, 0xBD	; 189
 62a:	91 e0       	ldi	r25, 0x01	; 1
 62c:	9f 93       	push	r25
 62e:	8f 93       	push	r24
 630:	0e 94 97 03 	call	0x72e	; 0x72e <printf>
	XMEM_init();
 634:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <XMEM_init>
	btn_init();
 638:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <btn_init>
	printf("\nStarting.... \n\r");
 63c:	8b ec       	ldi	r24, 0xCB	; 203
 63e:	91 e0       	ldi	r25, 0x01	; 1
 640:	9f 93       	push	r25
 642:	8f 93       	push	r24
 644:	0e 94 97 03 	call	0x72e	; 0x72e <printf>
	timer_8bit1024divisionCheckOnlyinit();
 648:	0e 94 dd 02 	call	0x5ba	; 0x5ba <timer_8bit1024divisionCheckOnlyinit>
	CAN_init(MODE_NORMAL);
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	
	
	OLED_init();
 652:	0e 94 05 02 	call	0x40a	; 0x40a <OLED_init>
	OLED_clearAll();
 656:	0e 94 b6 02 	call	0x56c	; 0x56c <OLED_clearAll>
	OLED_refresh();
 65a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <OLED_refresh>
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
	while(1) {
		cli();
		// Testing CAN
	
		//send_joystick_dir();
		printf("current timer value = %d \n\r", TIM8_ReadTCNT0());
 666:	cc ed       	ldi	r28, 0xDC	; 220
 668:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t joystickDirection;
	
	//CAN_message_send(msgPtr);
	
	while(1) {
		cli();
 66a:	f8 94       	cli
		// Testing CAN
	
		//send_joystick_dir();
		printf("current timer value = %d \n\r", TIM8_ReadTCNT0());
 66c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <TIM8_ReadTCNT0>
 670:	9f 93       	push	r25
 672:	8f 93       	push	r24
 674:	df 93       	push	r29
 676:	cf 93       	push	r28
 678:	0e 94 97 03 	call	0x72e	; 0x72e <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 67c:	9f ef       	ldi	r25, 0xFF	; 255
 67e:	2f ef       	ldi	r18, 0xFF	; 255
 680:	8b e3       	ldi	r24, 0x3B	; 59
 682:	91 50       	subi	r25, 0x01	; 1
 684:	20 40       	sbci	r18, 0x00	; 0
 686:	80 40       	sbci	r24, 0x00	; 0
 688:	e1 f7       	brne	.-8      	; 0x682 <main+0x66>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <main+0x70>
 68c:	00 00       	nop
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	e9 cf       	rjmp	.-46     	; 0x66a <main+0x4e>

00000698 <fdevopen>:
 698:	0f 93       	push	r16
 69a:	1f 93       	push	r17
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
 6a0:	00 97       	sbiw	r24, 0x00	; 0
 6a2:	31 f4       	brne	.+12     	; 0x6b0 <fdevopen+0x18>
 6a4:	61 15       	cp	r22, r1
 6a6:	71 05       	cpc	r23, r1
 6a8:	19 f4       	brne	.+6      	; 0x6b0 <fdevopen+0x18>
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	3a c0       	rjmp	.+116    	; 0x724 <fdevopen+0x8c>
 6b0:	8b 01       	movw	r16, r22
 6b2:	ec 01       	movw	r28, r24
 6b4:	6e e0       	ldi	r22, 0x0E	; 14
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 8e 05 	call	0xb1c	; 0xb1c <calloc>
 6c0:	fc 01       	movw	r30, r24
 6c2:	89 2b       	or	r24, r25
 6c4:	91 f3       	breq	.-28     	; 0x6aa <fdevopen+0x12>
 6c6:	80 e8       	ldi	r24, 0x80	; 128
 6c8:	83 83       	std	Z+3, r24	; 0x03
 6ca:	01 15       	cp	r16, r1
 6cc:	11 05       	cpc	r17, r1
 6ce:	71 f0       	breq	.+28     	; 0x6ec <fdevopen+0x54>
 6d0:	13 87       	std	Z+11, r17	; 0x0b
 6d2:	02 87       	std	Z+10, r16	; 0x0a
 6d4:	81 e8       	ldi	r24, 0x81	; 129
 6d6:	83 83       	std	Z+3, r24	; 0x03
 6d8:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <__iob>
 6dc:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <__iob+0x1>
 6e0:	89 2b       	or	r24, r25
 6e2:	21 f4       	brne	.+8      	; 0x6ec <fdevopen+0x54>
 6e4:	f0 93 fb 01 	sts	0x01FB, r31	; 0x8001fb <__iob+0x1>
 6e8:	e0 93 fa 01 	sts	0x01FA, r30	; 0x8001fa <__iob>
 6ec:	20 97       	sbiw	r28, 0x00	; 0
 6ee:	c9 f0       	breq	.+50     	; 0x722 <fdevopen+0x8a>
 6f0:	d1 87       	std	Z+9, r29	; 0x09
 6f2:	c0 87       	std	Z+8, r28	; 0x08
 6f4:	83 81       	ldd	r24, Z+3	; 0x03
 6f6:	82 60       	ori	r24, 0x02	; 2
 6f8:	83 83       	std	Z+3, r24	; 0x03
 6fa:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <__iob+0x2>
 6fe:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <__iob+0x3>
 702:	89 2b       	or	r24, r25
 704:	71 f4       	brne	.+28     	; 0x722 <fdevopen+0x8a>
 706:	f0 93 fd 01 	sts	0x01FD, r31	; 0x8001fd <__iob+0x3>
 70a:	e0 93 fc 01 	sts	0x01FC, r30	; 0x8001fc <__iob+0x2>
 70e:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <__iob+0x4>
 712:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <__iob+0x5>
 716:	89 2b       	or	r24, r25
 718:	21 f4       	brne	.+8      	; 0x722 <fdevopen+0x8a>
 71a:	f0 93 ff 01 	sts	0x01FF, r31	; 0x8001ff <__iob+0x5>
 71e:	e0 93 fe 01 	sts	0x01FE, r30	; 0x8001fe <__iob+0x4>
 722:	cf 01       	movw	r24, r30
 724:	df 91       	pop	r29
 726:	cf 91       	pop	r28
 728:	1f 91       	pop	r17
 72a:	0f 91       	pop	r16
 72c:	08 95       	ret

0000072e <printf>:
 72e:	a0 e0       	ldi	r26, 0x00	; 0
 730:	b0 e0       	ldi	r27, 0x00	; 0
 732:	ed e9       	ldi	r30, 0x9D	; 157
 734:	f3 e0       	ldi	r31, 0x03	; 3
 736:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__prologue_saves__+0x20>
 73a:	ae 01       	movw	r20, r28
 73c:	4b 5f       	subi	r20, 0xFB	; 251
 73e:	5f 4f       	sbci	r21, 0xFF	; 255
 740:	fa 01       	movw	r30, r20
 742:	61 91       	ld	r22, Z+
 744:	71 91       	ld	r23, Z+
 746:	af 01       	movw	r20, r30
 748:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <__iob+0x2>
 74c:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <__iob+0x3>
 750:	0e 94 ad 03 	call	0x75a	; 0x75a <vfprintf>
 754:	e2 e0       	ldi	r30, 0x02	; 2
 756:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__epilogue_restores__+0x20>

0000075a <vfprintf>:
 75a:	ab e0       	ldi	r26, 0x0B	; 11
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	e3 eb       	ldi	r30, 0xB3	; 179
 760:	f3 e0       	ldi	r31, 0x03	; 3
 762:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__prologue_saves__>
 766:	6c 01       	movw	r12, r24
 768:	7b 01       	movw	r14, r22
 76a:	8a 01       	movw	r16, r20
 76c:	fc 01       	movw	r30, r24
 76e:	17 82       	std	Z+7, r1	; 0x07
 770:	16 82       	std	Z+6, r1	; 0x06
 772:	83 81       	ldd	r24, Z+3	; 0x03
 774:	81 ff       	sbrs	r24, 1
 776:	cc c1       	rjmp	.+920    	; 0xb10 <vfprintf+0x3b6>
 778:	ce 01       	movw	r24, r28
 77a:	01 96       	adiw	r24, 0x01	; 1
 77c:	3c 01       	movw	r6, r24
 77e:	f6 01       	movw	r30, r12
 780:	93 81       	ldd	r25, Z+3	; 0x03
 782:	f7 01       	movw	r30, r14
 784:	93 fd       	sbrc	r25, 3
 786:	85 91       	lpm	r24, Z+
 788:	93 ff       	sbrs	r25, 3
 78a:	81 91       	ld	r24, Z+
 78c:	7f 01       	movw	r14, r30
 78e:	88 23       	and	r24, r24
 790:	09 f4       	brne	.+2      	; 0x794 <vfprintf+0x3a>
 792:	ba c1       	rjmp	.+884    	; 0xb08 <vfprintf+0x3ae>
 794:	85 32       	cpi	r24, 0x25	; 37
 796:	39 f4       	brne	.+14     	; 0x7a6 <vfprintf+0x4c>
 798:	93 fd       	sbrc	r25, 3
 79a:	85 91       	lpm	r24, Z+
 79c:	93 ff       	sbrs	r25, 3
 79e:	81 91       	ld	r24, Z+
 7a0:	7f 01       	movw	r14, r30
 7a2:	85 32       	cpi	r24, 0x25	; 37
 7a4:	29 f4       	brne	.+10     	; 0x7b0 <vfprintf+0x56>
 7a6:	b6 01       	movw	r22, r12
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <fputc>
 7ae:	e7 cf       	rjmp	.-50     	; 0x77e <vfprintf+0x24>
 7b0:	91 2c       	mov	r9, r1
 7b2:	21 2c       	mov	r2, r1
 7b4:	31 2c       	mov	r3, r1
 7b6:	ff e1       	ldi	r31, 0x1F	; 31
 7b8:	f3 15       	cp	r31, r3
 7ba:	d8 f0       	brcs	.+54     	; 0x7f2 <vfprintf+0x98>
 7bc:	8b 32       	cpi	r24, 0x2B	; 43
 7be:	79 f0       	breq	.+30     	; 0x7de <vfprintf+0x84>
 7c0:	38 f4       	brcc	.+14     	; 0x7d0 <vfprintf+0x76>
 7c2:	80 32       	cpi	r24, 0x20	; 32
 7c4:	79 f0       	breq	.+30     	; 0x7e4 <vfprintf+0x8a>
 7c6:	83 32       	cpi	r24, 0x23	; 35
 7c8:	a1 f4       	brne	.+40     	; 0x7f2 <vfprintf+0x98>
 7ca:	23 2d       	mov	r18, r3
 7cc:	20 61       	ori	r18, 0x10	; 16
 7ce:	1d c0       	rjmp	.+58     	; 0x80a <vfprintf+0xb0>
 7d0:	8d 32       	cpi	r24, 0x2D	; 45
 7d2:	61 f0       	breq	.+24     	; 0x7ec <vfprintf+0x92>
 7d4:	80 33       	cpi	r24, 0x30	; 48
 7d6:	69 f4       	brne	.+26     	; 0x7f2 <vfprintf+0x98>
 7d8:	23 2d       	mov	r18, r3
 7da:	21 60       	ori	r18, 0x01	; 1
 7dc:	16 c0       	rjmp	.+44     	; 0x80a <vfprintf+0xb0>
 7de:	83 2d       	mov	r24, r3
 7e0:	82 60       	ori	r24, 0x02	; 2
 7e2:	38 2e       	mov	r3, r24
 7e4:	e3 2d       	mov	r30, r3
 7e6:	e4 60       	ori	r30, 0x04	; 4
 7e8:	3e 2e       	mov	r3, r30
 7ea:	2a c0       	rjmp	.+84     	; 0x840 <vfprintf+0xe6>
 7ec:	f3 2d       	mov	r31, r3
 7ee:	f8 60       	ori	r31, 0x08	; 8
 7f0:	1d c0       	rjmp	.+58     	; 0x82c <vfprintf+0xd2>
 7f2:	37 fc       	sbrc	r3, 7
 7f4:	2d c0       	rjmp	.+90     	; 0x850 <vfprintf+0xf6>
 7f6:	20 ed       	ldi	r18, 0xD0	; 208
 7f8:	28 0f       	add	r18, r24
 7fa:	2a 30       	cpi	r18, 0x0A	; 10
 7fc:	40 f0       	brcs	.+16     	; 0x80e <vfprintf+0xb4>
 7fe:	8e 32       	cpi	r24, 0x2E	; 46
 800:	b9 f4       	brne	.+46     	; 0x830 <vfprintf+0xd6>
 802:	36 fc       	sbrc	r3, 6
 804:	81 c1       	rjmp	.+770    	; 0xb08 <vfprintf+0x3ae>
 806:	23 2d       	mov	r18, r3
 808:	20 64       	ori	r18, 0x40	; 64
 80a:	32 2e       	mov	r3, r18
 80c:	19 c0       	rjmp	.+50     	; 0x840 <vfprintf+0xe6>
 80e:	36 fe       	sbrs	r3, 6
 810:	06 c0       	rjmp	.+12     	; 0x81e <vfprintf+0xc4>
 812:	8a e0       	ldi	r24, 0x0A	; 10
 814:	98 9e       	mul	r9, r24
 816:	20 0d       	add	r18, r0
 818:	11 24       	eor	r1, r1
 81a:	92 2e       	mov	r9, r18
 81c:	11 c0       	rjmp	.+34     	; 0x840 <vfprintf+0xe6>
 81e:	ea e0       	ldi	r30, 0x0A	; 10
 820:	2e 9e       	mul	r2, r30
 822:	20 0d       	add	r18, r0
 824:	11 24       	eor	r1, r1
 826:	22 2e       	mov	r2, r18
 828:	f3 2d       	mov	r31, r3
 82a:	f0 62       	ori	r31, 0x20	; 32
 82c:	3f 2e       	mov	r3, r31
 82e:	08 c0       	rjmp	.+16     	; 0x840 <vfprintf+0xe6>
 830:	8c 36       	cpi	r24, 0x6C	; 108
 832:	21 f4       	brne	.+8      	; 0x83c <vfprintf+0xe2>
 834:	83 2d       	mov	r24, r3
 836:	80 68       	ori	r24, 0x80	; 128
 838:	38 2e       	mov	r3, r24
 83a:	02 c0       	rjmp	.+4      	; 0x840 <vfprintf+0xe6>
 83c:	88 36       	cpi	r24, 0x68	; 104
 83e:	41 f4       	brne	.+16     	; 0x850 <vfprintf+0xf6>
 840:	f7 01       	movw	r30, r14
 842:	93 fd       	sbrc	r25, 3
 844:	85 91       	lpm	r24, Z+
 846:	93 ff       	sbrs	r25, 3
 848:	81 91       	ld	r24, Z+
 84a:	7f 01       	movw	r14, r30
 84c:	81 11       	cpse	r24, r1
 84e:	b3 cf       	rjmp	.-154    	; 0x7b6 <vfprintf+0x5c>
 850:	98 2f       	mov	r25, r24
 852:	9f 7d       	andi	r25, 0xDF	; 223
 854:	95 54       	subi	r25, 0x45	; 69
 856:	93 30       	cpi	r25, 0x03	; 3
 858:	28 f4       	brcc	.+10     	; 0x864 <vfprintf+0x10a>
 85a:	0c 5f       	subi	r16, 0xFC	; 252
 85c:	1f 4f       	sbci	r17, 0xFF	; 255
 85e:	9f e3       	ldi	r25, 0x3F	; 63
 860:	99 83       	std	Y+1, r25	; 0x01
 862:	0d c0       	rjmp	.+26     	; 0x87e <vfprintf+0x124>
 864:	83 36       	cpi	r24, 0x63	; 99
 866:	31 f0       	breq	.+12     	; 0x874 <vfprintf+0x11a>
 868:	83 37       	cpi	r24, 0x73	; 115
 86a:	71 f0       	breq	.+28     	; 0x888 <vfprintf+0x12e>
 86c:	83 35       	cpi	r24, 0x53	; 83
 86e:	09 f0       	breq	.+2      	; 0x872 <vfprintf+0x118>
 870:	59 c0       	rjmp	.+178    	; 0x924 <vfprintf+0x1ca>
 872:	21 c0       	rjmp	.+66     	; 0x8b6 <vfprintf+0x15c>
 874:	f8 01       	movw	r30, r16
 876:	80 81       	ld	r24, Z
 878:	89 83       	std	Y+1, r24	; 0x01
 87a:	0e 5f       	subi	r16, 0xFE	; 254
 87c:	1f 4f       	sbci	r17, 0xFF	; 255
 87e:	88 24       	eor	r8, r8
 880:	83 94       	inc	r8
 882:	91 2c       	mov	r9, r1
 884:	53 01       	movw	r10, r6
 886:	13 c0       	rjmp	.+38     	; 0x8ae <vfprintf+0x154>
 888:	28 01       	movw	r4, r16
 88a:	f2 e0       	ldi	r31, 0x02	; 2
 88c:	4f 0e       	add	r4, r31
 88e:	51 1c       	adc	r5, r1
 890:	f8 01       	movw	r30, r16
 892:	a0 80       	ld	r10, Z
 894:	b1 80       	ldd	r11, Z+1	; 0x01
 896:	36 fe       	sbrs	r3, 6
 898:	03 c0       	rjmp	.+6      	; 0x8a0 <vfprintf+0x146>
 89a:	69 2d       	mov	r22, r9
 89c:	70 e0       	ldi	r23, 0x00	; 0
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <vfprintf+0x14a>
 8a0:	6f ef       	ldi	r22, 0xFF	; 255
 8a2:	7f ef       	ldi	r23, 0xFF	; 255
 8a4:	c5 01       	movw	r24, r10
 8a6:	0e 94 dd 06 	call	0xdba	; 0xdba <strnlen>
 8aa:	4c 01       	movw	r8, r24
 8ac:	82 01       	movw	r16, r4
 8ae:	f3 2d       	mov	r31, r3
 8b0:	ff 77       	andi	r31, 0x7F	; 127
 8b2:	3f 2e       	mov	r3, r31
 8b4:	16 c0       	rjmp	.+44     	; 0x8e2 <vfprintf+0x188>
 8b6:	28 01       	movw	r4, r16
 8b8:	22 e0       	ldi	r18, 0x02	; 2
 8ba:	42 0e       	add	r4, r18
 8bc:	51 1c       	adc	r5, r1
 8be:	f8 01       	movw	r30, r16
 8c0:	a0 80       	ld	r10, Z
 8c2:	b1 80       	ldd	r11, Z+1	; 0x01
 8c4:	36 fe       	sbrs	r3, 6
 8c6:	03 c0       	rjmp	.+6      	; 0x8ce <vfprintf+0x174>
 8c8:	69 2d       	mov	r22, r9
 8ca:	70 e0       	ldi	r23, 0x00	; 0
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <vfprintf+0x178>
 8ce:	6f ef       	ldi	r22, 0xFF	; 255
 8d0:	7f ef       	ldi	r23, 0xFF	; 255
 8d2:	c5 01       	movw	r24, r10
 8d4:	0e 94 cb 06 	call	0xd96	; 0xd96 <strnlen_P>
 8d8:	4c 01       	movw	r8, r24
 8da:	f3 2d       	mov	r31, r3
 8dc:	f0 68       	ori	r31, 0x80	; 128
 8de:	3f 2e       	mov	r3, r31
 8e0:	82 01       	movw	r16, r4
 8e2:	33 fc       	sbrc	r3, 3
 8e4:	1b c0       	rjmp	.+54     	; 0x91c <vfprintf+0x1c2>
 8e6:	82 2d       	mov	r24, r2
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	88 16       	cp	r8, r24
 8ec:	99 06       	cpc	r9, r25
 8ee:	b0 f4       	brcc	.+44     	; 0x91c <vfprintf+0x1c2>
 8f0:	b6 01       	movw	r22, r12
 8f2:	80 e2       	ldi	r24, 0x20	; 32
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <fputc>
 8fa:	2a 94       	dec	r2
 8fc:	f4 cf       	rjmp	.-24     	; 0x8e6 <vfprintf+0x18c>
 8fe:	f5 01       	movw	r30, r10
 900:	37 fc       	sbrc	r3, 7
 902:	85 91       	lpm	r24, Z+
 904:	37 fe       	sbrs	r3, 7
 906:	81 91       	ld	r24, Z+
 908:	5f 01       	movw	r10, r30
 90a:	b6 01       	movw	r22, r12
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <fputc>
 912:	21 10       	cpse	r2, r1
 914:	2a 94       	dec	r2
 916:	21 e0       	ldi	r18, 0x01	; 1
 918:	82 1a       	sub	r8, r18
 91a:	91 08       	sbc	r9, r1
 91c:	81 14       	cp	r8, r1
 91e:	91 04       	cpc	r9, r1
 920:	71 f7       	brne	.-36     	; 0x8fe <vfprintf+0x1a4>
 922:	e8 c0       	rjmp	.+464    	; 0xaf4 <vfprintf+0x39a>
 924:	84 36       	cpi	r24, 0x64	; 100
 926:	11 f0       	breq	.+4      	; 0x92c <vfprintf+0x1d2>
 928:	89 36       	cpi	r24, 0x69	; 105
 92a:	41 f5       	brne	.+80     	; 0x97c <vfprintf+0x222>
 92c:	f8 01       	movw	r30, r16
 92e:	37 fe       	sbrs	r3, 7
 930:	07 c0       	rjmp	.+14     	; 0x940 <vfprintf+0x1e6>
 932:	60 81       	ld	r22, Z
 934:	71 81       	ldd	r23, Z+1	; 0x01
 936:	82 81       	ldd	r24, Z+2	; 0x02
 938:	93 81       	ldd	r25, Z+3	; 0x03
 93a:	0c 5f       	subi	r16, 0xFC	; 252
 93c:	1f 4f       	sbci	r17, 0xFF	; 255
 93e:	08 c0       	rjmp	.+16     	; 0x950 <vfprintf+0x1f6>
 940:	60 81       	ld	r22, Z
 942:	71 81       	ldd	r23, Z+1	; 0x01
 944:	07 2e       	mov	r0, r23
 946:	00 0c       	add	r0, r0
 948:	88 0b       	sbc	r24, r24
 94a:	99 0b       	sbc	r25, r25
 94c:	0e 5f       	subi	r16, 0xFE	; 254
 94e:	1f 4f       	sbci	r17, 0xFF	; 255
 950:	f3 2d       	mov	r31, r3
 952:	ff 76       	andi	r31, 0x6F	; 111
 954:	3f 2e       	mov	r3, r31
 956:	97 ff       	sbrs	r25, 7
 958:	09 c0       	rjmp	.+18     	; 0x96c <vfprintf+0x212>
 95a:	90 95       	com	r25
 95c:	80 95       	com	r24
 95e:	70 95       	com	r23
 960:	61 95       	neg	r22
 962:	7f 4f       	sbci	r23, 0xFF	; 255
 964:	8f 4f       	sbci	r24, 0xFF	; 255
 966:	9f 4f       	sbci	r25, 0xFF	; 255
 968:	f0 68       	ori	r31, 0x80	; 128
 96a:	3f 2e       	mov	r3, r31
 96c:	2a e0       	ldi	r18, 0x0A	; 10
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	a3 01       	movw	r20, r6
 972:	0e 94 24 07 	call	0xe48	; 0xe48 <__ultoa_invert>
 976:	88 2e       	mov	r8, r24
 978:	86 18       	sub	r8, r6
 97a:	45 c0       	rjmp	.+138    	; 0xa06 <vfprintf+0x2ac>
 97c:	85 37       	cpi	r24, 0x75	; 117
 97e:	31 f4       	brne	.+12     	; 0x98c <vfprintf+0x232>
 980:	23 2d       	mov	r18, r3
 982:	2f 7e       	andi	r18, 0xEF	; 239
 984:	b2 2e       	mov	r11, r18
 986:	2a e0       	ldi	r18, 0x0A	; 10
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	25 c0       	rjmp	.+74     	; 0x9d6 <vfprintf+0x27c>
 98c:	93 2d       	mov	r25, r3
 98e:	99 7f       	andi	r25, 0xF9	; 249
 990:	b9 2e       	mov	r11, r25
 992:	8f 36       	cpi	r24, 0x6F	; 111
 994:	c1 f0       	breq	.+48     	; 0x9c6 <vfprintf+0x26c>
 996:	18 f4       	brcc	.+6      	; 0x99e <vfprintf+0x244>
 998:	88 35       	cpi	r24, 0x58	; 88
 99a:	79 f0       	breq	.+30     	; 0x9ba <vfprintf+0x260>
 99c:	b5 c0       	rjmp	.+362    	; 0xb08 <vfprintf+0x3ae>
 99e:	80 37       	cpi	r24, 0x70	; 112
 9a0:	19 f0       	breq	.+6      	; 0x9a8 <vfprintf+0x24e>
 9a2:	88 37       	cpi	r24, 0x78	; 120
 9a4:	21 f0       	breq	.+8      	; 0x9ae <vfprintf+0x254>
 9a6:	b0 c0       	rjmp	.+352    	; 0xb08 <vfprintf+0x3ae>
 9a8:	e9 2f       	mov	r30, r25
 9aa:	e0 61       	ori	r30, 0x10	; 16
 9ac:	be 2e       	mov	r11, r30
 9ae:	b4 fe       	sbrs	r11, 4
 9b0:	0d c0       	rjmp	.+26     	; 0x9cc <vfprintf+0x272>
 9b2:	fb 2d       	mov	r31, r11
 9b4:	f4 60       	ori	r31, 0x04	; 4
 9b6:	bf 2e       	mov	r11, r31
 9b8:	09 c0       	rjmp	.+18     	; 0x9cc <vfprintf+0x272>
 9ba:	34 fe       	sbrs	r3, 4
 9bc:	0a c0       	rjmp	.+20     	; 0x9d2 <vfprintf+0x278>
 9be:	29 2f       	mov	r18, r25
 9c0:	26 60       	ori	r18, 0x06	; 6
 9c2:	b2 2e       	mov	r11, r18
 9c4:	06 c0       	rjmp	.+12     	; 0x9d2 <vfprintf+0x278>
 9c6:	28 e0       	ldi	r18, 0x08	; 8
 9c8:	30 e0       	ldi	r19, 0x00	; 0
 9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <vfprintf+0x27c>
 9cc:	20 e1       	ldi	r18, 0x10	; 16
 9ce:	30 e0       	ldi	r19, 0x00	; 0
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <vfprintf+0x27c>
 9d2:	20 e1       	ldi	r18, 0x10	; 16
 9d4:	32 e0       	ldi	r19, 0x02	; 2
 9d6:	f8 01       	movw	r30, r16
 9d8:	b7 fe       	sbrs	r11, 7
 9da:	07 c0       	rjmp	.+14     	; 0x9ea <vfprintf+0x290>
 9dc:	60 81       	ld	r22, Z
 9de:	71 81       	ldd	r23, Z+1	; 0x01
 9e0:	82 81       	ldd	r24, Z+2	; 0x02
 9e2:	93 81       	ldd	r25, Z+3	; 0x03
 9e4:	0c 5f       	subi	r16, 0xFC	; 252
 9e6:	1f 4f       	sbci	r17, 0xFF	; 255
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <vfprintf+0x29c>
 9ea:	60 81       	ld	r22, Z
 9ec:	71 81       	ldd	r23, Z+1	; 0x01
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	0e 5f       	subi	r16, 0xFE	; 254
 9f4:	1f 4f       	sbci	r17, 0xFF	; 255
 9f6:	a3 01       	movw	r20, r6
 9f8:	0e 94 24 07 	call	0xe48	; 0xe48 <__ultoa_invert>
 9fc:	88 2e       	mov	r8, r24
 9fe:	86 18       	sub	r8, r6
 a00:	fb 2d       	mov	r31, r11
 a02:	ff 77       	andi	r31, 0x7F	; 127
 a04:	3f 2e       	mov	r3, r31
 a06:	36 fe       	sbrs	r3, 6
 a08:	0d c0       	rjmp	.+26     	; 0xa24 <vfprintf+0x2ca>
 a0a:	23 2d       	mov	r18, r3
 a0c:	2e 7f       	andi	r18, 0xFE	; 254
 a0e:	a2 2e       	mov	r10, r18
 a10:	89 14       	cp	r8, r9
 a12:	58 f4       	brcc	.+22     	; 0xa2a <vfprintf+0x2d0>
 a14:	34 fe       	sbrs	r3, 4
 a16:	0b c0       	rjmp	.+22     	; 0xa2e <vfprintf+0x2d4>
 a18:	32 fc       	sbrc	r3, 2
 a1a:	09 c0       	rjmp	.+18     	; 0xa2e <vfprintf+0x2d4>
 a1c:	83 2d       	mov	r24, r3
 a1e:	8e 7e       	andi	r24, 0xEE	; 238
 a20:	a8 2e       	mov	r10, r24
 a22:	05 c0       	rjmp	.+10     	; 0xa2e <vfprintf+0x2d4>
 a24:	b8 2c       	mov	r11, r8
 a26:	a3 2c       	mov	r10, r3
 a28:	03 c0       	rjmp	.+6      	; 0xa30 <vfprintf+0x2d6>
 a2a:	b8 2c       	mov	r11, r8
 a2c:	01 c0       	rjmp	.+2      	; 0xa30 <vfprintf+0x2d6>
 a2e:	b9 2c       	mov	r11, r9
 a30:	a4 fe       	sbrs	r10, 4
 a32:	0f c0       	rjmp	.+30     	; 0xa52 <vfprintf+0x2f8>
 a34:	fe 01       	movw	r30, r28
 a36:	e8 0d       	add	r30, r8
 a38:	f1 1d       	adc	r31, r1
 a3a:	80 81       	ld	r24, Z
 a3c:	80 33       	cpi	r24, 0x30	; 48
 a3e:	21 f4       	brne	.+8      	; 0xa48 <vfprintf+0x2ee>
 a40:	9a 2d       	mov	r25, r10
 a42:	99 7e       	andi	r25, 0xE9	; 233
 a44:	a9 2e       	mov	r10, r25
 a46:	09 c0       	rjmp	.+18     	; 0xa5a <vfprintf+0x300>
 a48:	a2 fe       	sbrs	r10, 2
 a4a:	06 c0       	rjmp	.+12     	; 0xa58 <vfprintf+0x2fe>
 a4c:	b3 94       	inc	r11
 a4e:	b3 94       	inc	r11
 a50:	04 c0       	rjmp	.+8      	; 0xa5a <vfprintf+0x300>
 a52:	8a 2d       	mov	r24, r10
 a54:	86 78       	andi	r24, 0x86	; 134
 a56:	09 f0       	breq	.+2      	; 0xa5a <vfprintf+0x300>
 a58:	b3 94       	inc	r11
 a5a:	a3 fc       	sbrc	r10, 3
 a5c:	11 c0       	rjmp	.+34     	; 0xa80 <vfprintf+0x326>
 a5e:	a0 fe       	sbrs	r10, 0
 a60:	06 c0       	rjmp	.+12     	; 0xa6e <vfprintf+0x314>
 a62:	b2 14       	cp	r11, r2
 a64:	88 f4       	brcc	.+34     	; 0xa88 <vfprintf+0x32e>
 a66:	28 0c       	add	r2, r8
 a68:	92 2c       	mov	r9, r2
 a6a:	9b 18       	sub	r9, r11
 a6c:	0e c0       	rjmp	.+28     	; 0xa8a <vfprintf+0x330>
 a6e:	b2 14       	cp	r11, r2
 a70:	60 f4       	brcc	.+24     	; 0xa8a <vfprintf+0x330>
 a72:	b6 01       	movw	r22, r12
 a74:	80 e2       	ldi	r24, 0x20	; 32
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <fputc>
 a7c:	b3 94       	inc	r11
 a7e:	f7 cf       	rjmp	.-18     	; 0xa6e <vfprintf+0x314>
 a80:	b2 14       	cp	r11, r2
 a82:	18 f4       	brcc	.+6      	; 0xa8a <vfprintf+0x330>
 a84:	2b 18       	sub	r2, r11
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <vfprintf+0x332>
 a88:	98 2c       	mov	r9, r8
 a8a:	21 2c       	mov	r2, r1
 a8c:	a4 fe       	sbrs	r10, 4
 a8e:	10 c0       	rjmp	.+32     	; 0xab0 <vfprintf+0x356>
 a90:	b6 01       	movw	r22, r12
 a92:	80 e3       	ldi	r24, 0x30	; 48
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <fputc>
 a9a:	a2 fe       	sbrs	r10, 2
 a9c:	17 c0       	rjmp	.+46     	; 0xacc <vfprintf+0x372>
 a9e:	a1 fc       	sbrc	r10, 1
 aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <vfprintf+0x34e>
 aa2:	88 e7       	ldi	r24, 0x78	; 120
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <vfprintf+0x352>
 aa8:	88 e5       	ldi	r24, 0x58	; 88
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	b6 01       	movw	r22, r12
 aae:	0c c0       	rjmp	.+24     	; 0xac8 <vfprintf+0x36e>
 ab0:	8a 2d       	mov	r24, r10
 ab2:	86 78       	andi	r24, 0x86	; 134
 ab4:	59 f0       	breq	.+22     	; 0xacc <vfprintf+0x372>
 ab6:	a1 fe       	sbrs	r10, 1
 ab8:	02 c0       	rjmp	.+4      	; 0xabe <vfprintf+0x364>
 aba:	8b e2       	ldi	r24, 0x2B	; 43
 abc:	01 c0       	rjmp	.+2      	; 0xac0 <vfprintf+0x366>
 abe:	80 e2       	ldi	r24, 0x20	; 32
 ac0:	a7 fc       	sbrc	r10, 7
 ac2:	8d e2       	ldi	r24, 0x2D	; 45
 ac4:	b6 01       	movw	r22, r12
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <fputc>
 acc:	89 14       	cp	r8, r9
 ace:	38 f4       	brcc	.+14     	; 0xade <vfprintf+0x384>
 ad0:	b6 01       	movw	r22, r12
 ad2:	80 e3       	ldi	r24, 0x30	; 48
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <fputc>
 ada:	9a 94       	dec	r9
 adc:	f7 cf       	rjmp	.-18     	; 0xacc <vfprintf+0x372>
 ade:	8a 94       	dec	r8
 ae0:	f3 01       	movw	r30, r6
 ae2:	e8 0d       	add	r30, r8
 ae4:	f1 1d       	adc	r31, r1
 ae6:	80 81       	ld	r24, Z
 ae8:	b6 01       	movw	r22, r12
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <fputc>
 af0:	81 10       	cpse	r8, r1
 af2:	f5 cf       	rjmp	.-22     	; 0xade <vfprintf+0x384>
 af4:	22 20       	and	r2, r2
 af6:	09 f4       	brne	.+2      	; 0xafa <vfprintf+0x3a0>
 af8:	42 ce       	rjmp	.-892    	; 0x77e <vfprintf+0x24>
 afa:	b6 01       	movw	r22, r12
 afc:	80 e2       	ldi	r24, 0x20	; 32
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <fputc>
 b04:	2a 94       	dec	r2
 b06:	f6 cf       	rjmp	.-20     	; 0xaf4 <vfprintf+0x39a>
 b08:	f6 01       	movw	r30, r12
 b0a:	86 81       	ldd	r24, Z+6	; 0x06
 b0c:	97 81       	ldd	r25, Z+7	; 0x07
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <vfprintf+0x3ba>
 b10:	8f ef       	ldi	r24, 0xFF	; 255
 b12:	9f ef       	ldi	r25, 0xFF	; 255
 b14:	2b 96       	adiw	r28, 0x0b	; 11
 b16:	e2 e1       	ldi	r30, 0x12	; 18
 b18:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__epilogue_restores__>

00000b1c <calloc>:
 b1c:	0f 93       	push	r16
 b1e:	1f 93       	push	r17
 b20:	cf 93       	push	r28
 b22:	df 93       	push	r29
 b24:	86 9f       	mul	r24, r22
 b26:	80 01       	movw	r16, r0
 b28:	87 9f       	mul	r24, r23
 b2a:	10 0d       	add	r17, r0
 b2c:	96 9f       	mul	r25, r22
 b2e:	10 0d       	add	r17, r0
 b30:	11 24       	eor	r1, r1
 b32:	c8 01       	movw	r24, r16
 b34:	0e 94 aa 05 	call	0xb54	; 0xb54 <malloc>
 b38:	ec 01       	movw	r28, r24
 b3a:	00 97       	sbiw	r24, 0x00	; 0
 b3c:	29 f0       	breq	.+10     	; 0xb48 <calloc+0x2c>
 b3e:	a8 01       	movw	r20, r16
 b40:	60 e0       	ldi	r22, 0x00	; 0
 b42:	70 e0       	ldi	r23, 0x00	; 0
 b44:	0e 94 d6 06 	call	0xdac	; 0xdac <memset>
 b48:	ce 01       	movw	r24, r28
 b4a:	df 91       	pop	r29
 b4c:	cf 91       	pop	r28
 b4e:	1f 91       	pop	r17
 b50:	0f 91       	pop	r16
 b52:	08 95       	ret

00000b54 <malloc>:
 b54:	0f 93       	push	r16
 b56:	1f 93       	push	r17
 b58:	cf 93       	push	r28
 b5a:	df 93       	push	r29
 b5c:	82 30       	cpi	r24, 0x02	; 2
 b5e:	91 05       	cpc	r25, r1
 b60:	10 f4       	brcc	.+4      	; 0xb66 <malloc+0x12>
 b62:	82 e0       	ldi	r24, 0x02	; 2
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__flp>
 b6a:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__flp+0x1>
 b6e:	20 e0       	ldi	r18, 0x00	; 0
 b70:	30 e0       	ldi	r19, 0x00	; 0
 b72:	a0 e0       	ldi	r26, 0x00	; 0
 b74:	b0 e0       	ldi	r27, 0x00	; 0
 b76:	30 97       	sbiw	r30, 0x00	; 0
 b78:	19 f1       	breq	.+70     	; 0xbc0 <malloc+0x6c>
 b7a:	40 81       	ld	r20, Z
 b7c:	51 81       	ldd	r21, Z+1	; 0x01
 b7e:	02 81       	ldd	r16, Z+2	; 0x02
 b80:	13 81       	ldd	r17, Z+3	; 0x03
 b82:	48 17       	cp	r20, r24
 b84:	59 07       	cpc	r21, r25
 b86:	c8 f0       	brcs	.+50     	; 0xbba <malloc+0x66>
 b88:	84 17       	cp	r24, r20
 b8a:	95 07       	cpc	r25, r21
 b8c:	69 f4       	brne	.+26     	; 0xba8 <malloc+0x54>
 b8e:	10 97       	sbiw	r26, 0x00	; 0
 b90:	31 f0       	breq	.+12     	; 0xb9e <malloc+0x4a>
 b92:	12 96       	adiw	r26, 0x02	; 2
 b94:	0c 93       	st	X, r16
 b96:	12 97       	sbiw	r26, 0x02	; 2
 b98:	13 96       	adiw	r26, 0x03	; 3
 b9a:	1c 93       	st	X, r17
 b9c:	27 c0       	rjmp	.+78     	; 0xbec <malloc+0x98>
 b9e:	00 93 02 02 	sts	0x0202, r16	; 0x800202 <__flp>
 ba2:	10 93 03 02 	sts	0x0203, r17	; 0x800203 <__flp+0x1>
 ba6:	22 c0       	rjmp	.+68     	; 0xbec <malloc+0x98>
 ba8:	21 15       	cp	r18, r1
 baa:	31 05       	cpc	r19, r1
 bac:	19 f0       	breq	.+6      	; 0xbb4 <malloc+0x60>
 bae:	42 17       	cp	r20, r18
 bb0:	53 07       	cpc	r21, r19
 bb2:	18 f4       	brcc	.+6      	; 0xbba <malloc+0x66>
 bb4:	9a 01       	movw	r18, r20
 bb6:	bd 01       	movw	r22, r26
 bb8:	ef 01       	movw	r28, r30
 bba:	df 01       	movw	r26, r30
 bbc:	f8 01       	movw	r30, r16
 bbe:	db cf       	rjmp	.-74     	; 0xb76 <malloc+0x22>
 bc0:	21 15       	cp	r18, r1
 bc2:	31 05       	cpc	r19, r1
 bc4:	f9 f0       	breq	.+62     	; 0xc04 <malloc+0xb0>
 bc6:	28 1b       	sub	r18, r24
 bc8:	39 0b       	sbc	r19, r25
 bca:	24 30       	cpi	r18, 0x04	; 4
 bcc:	31 05       	cpc	r19, r1
 bce:	80 f4       	brcc	.+32     	; 0xbf0 <malloc+0x9c>
 bd0:	8a 81       	ldd	r24, Y+2	; 0x02
 bd2:	9b 81       	ldd	r25, Y+3	; 0x03
 bd4:	61 15       	cp	r22, r1
 bd6:	71 05       	cpc	r23, r1
 bd8:	21 f0       	breq	.+8      	; 0xbe2 <malloc+0x8e>
 bda:	fb 01       	movw	r30, r22
 bdc:	93 83       	std	Z+3, r25	; 0x03
 bde:	82 83       	std	Z+2, r24	; 0x02
 be0:	04 c0       	rjmp	.+8      	; 0xbea <malloc+0x96>
 be2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__flp+0x1>
 be6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__flp>
 bea:	fe 01       	movw	r30, r28
 bec:	32 96       	adiw	r30, 0x02	; 2
 bee:	44 c0       	rjmp	.+136    	; 0xc78 <malloc+0x124>
 bf0:	fe 01       	movw	r30, r28
 bf2:	e2 0f       	add	r30, r18
 bf4:	f3 1f       	adc	r31, r19
 bf6:	81 93       	st	Z+, r24
 bf8:	91 93       	st	Z+, r25
 bfa:	22 50       	subi	r18, 0x02	; 2
 bfc:	31 09       	sbc	r19, r1
 bfe:	39 83       	std	Y+1, r19	; 0x01
 c00:	28 83       	st	Y, r18
 c02:	3a c0       	rjmp	.+116    	; 0xc78 <malloc+0x124>
 c04:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__brkval>
 c08:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__brkval+0x1>
 c0c:	23 2b       	or	r18, r19
 c0e:	41 f4       	brne	.+16     	; 0xc20 <malloc+0xcc>
 c10:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c14:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 c18:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__brkval+0x1>
 c1c:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__brkval>
 c20:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 c24:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 c28:	21 15       	cp	r18, r1
 c2a:	31 05       	cpc	r19, r1
 c2c:	41 f4       	brne	.+16     	; 0xc3e <malloc+0xea>
 c2e:	2d b7       	in	r18, 0x3d	; 61
 c30:	3e b7       	in	r19, 0x3e	; 62
 c32:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 c36:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 c3a:	24 1b       	sub	r18, r20
 c3c:	35 0b       	sbc	r19, r21
 c3e:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__brkval>
 c42:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__brkval+0x1>
 c46:	e2 17       	cp	r30, r18
 c48:	f3 07       	cpc	r31, r19
 c4a:	a0 f4       	brcc	.+40     	; 0xc74 <malloc+0x120>
 c4c:	2e 1b       	sub	r18, r30
 c4e:	3f 0b       	sbc	r19, r31
 c50:	28 17       	cp	r18, r24
 c52:	39 07       	cpc	r19, r25
 c54:	78 f0       	brcs	.+30     	; 0xc74 <malloc+0x120>
 c56:	ac 01       	movw	r20, r24
 c58:	4e 5f       	subi	r20, 0xFE	; 254
 c5a:	5f 4f       	sbci	r21, 0xFF	; 255
 c5c:	24 17       	cp	r18, r20
 c5e:	35 07       	cpc	r19, r21
 c60:	48 f0       	brcs	.+18     	; 0xc74 <malloc+0x120>
 c62:	4e 0f       	add	r20, r30
 c64:	5f 1f       	adc	r21, r31
 c66:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__brkval+0x1>
 c6a:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__brkval>
 c6e:	81 93       	st	Z+, r24
 c70:	91 93       	st	Z+, r25
 c72:	02 c0       	rjmp	.+4      	; 0xc78 <malloc+0x124>
 c74:	e0 e0       	ldi	r30, 0x00	; 0
 c76:	f0 e0       	ldi	r31, 0x00	; 0
 c78:	cf 01       	movw	r24, r30
 c7a:	df 91       	pop	r29
 c7c:	cf 91       	pop	r28
 c7e:	1f 91       	pop	r17
 c80:	0f 91       	pop	r16
 c82:	08 95       	ret

00000c84 <free>:
 c84:	cf 93       	push	r28
 c86:	df 93       	push	r29
 c88:	00 97       	sbiw	r24, 0x00	; 0
 c8a:	09 f4       	brne	.+2      	; 0xc8e <free+0xa>
 c8c:	81 c0       	rjmp	.+258    	; 0xd90 <free+0x10c>
 c8e:	fc 01       	movw	r30, r24
 c90:	32 97       	sbiw	r30, 0x02	; 2
 c92:	13 82       	std	Z+3, r1	; 0x03
 c94:	12 82       	std	Z+2, r1	; 0x02
 c96:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <__flp>
 c9a:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <__flp+0x1>
 c9e:	10 97       	sbiw	r26, 0x00	; 0
 ca0:	81 f4       	brne	.+32     	; 0xcc2 <free+0x3e>
 ca2:	20 81       	ld	r18, Z
 ca4:	31 81       	ldd	r19, Z+1	; 0x01
 ca6:	82 0f       	add	r24, r18
 ca8:	93 1f       	adc	r25, r19
 caa:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__brkval>
 cae:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__brkval+0x1>
 cb2:	28 17       	cp	r18, r24
 cb4:	39 07       	cpc	r19, r25
 cb6:	51 f5       	brne	.+84     	; 0xd0c <free+0x88>
 cb8:	f0 93 01 02 	sts	0x0201, r31	; 0x800201 <__brkval+0x1>
 cbc:	e0 93 00 02 	sts	0x0200, r30	; 0x800200 <__brkval>
 cc0:	67 c0       	rjmp	.+206    	; 0xd90 <free+0x10c>
 cc2:	ed 01       	movw	r28, r26
 cc4:	20 e0       	ldi	r18, 0x00	; 0
 cc6:	30 e0       	ldi	r19, 0x00	; 0
 cc8:	ce 17       	cp	r28, r30
 cca:	df 07       	cpc	r29, r31
 ccc:	40 f4       	brcc	.+16     	; 0xcde <free+0x5a>
 cce:	4a 81       	ldd	r20, Y+2	; 0x02
 cd0:	5b 81       	ldd	r21, Y+3	; 0x03
 cd2:	9e 01       	movw	r18, r28
 cd4:	41 15       	cp	r20, r1
 cd6:	51 05       	cpc	r21, r1
 cd8:	f1 f0       	breq	.+60     	; 0xd16 <free+0x92>
 cda:	ea 01       	movw	r28, r20
 cdc:	f5 cf       	rjmp	.-22     	; 0xcc8 <free+0x44>
 cde:	d3 83       	std	Z+3, r29	; 0x03
 ce0:	c2 83       	std	Z+2, r28	; 0x02
 ce2:	40 81       	ld	r20, Z
 ce4:	51 81       	ldd	r21, Z+1	; 0x01
 ce6:	84 0f       	add	r24, r20
 ce8:	95 1f       	adc	r25, r21
 cea:	c8 17       	cp	r28, r24
 cec:	d9 07       	cpc	r29, r25
 cee:	59 f4       	brne	.+22     	; 0xd06 <free+0x82>
 cf0:	88 81       	ld	r24, Y
 cf2:	99 81       	ldd	r25, Y+1	; 0x01
 cf4:	84 0f       	add	r24, r20
 cf6:	95 1f       	adc	r25, r21
 cf8:	02 96       	adiw	r24, 0x02	; 2
 cfa:	91 83       	std	Z+1, r25	; 0x01
 cfc:	80 83       	st	Z, r24
 cfe:	8a 81       	ldd	r24, Y+2	; 0x02
 d00:	9b 81       	ldd	r25, Y+3	; 0x03
 d02:	93 83       	std	Z+3, r25	; 0x03
 d04:	82 83       	std	Z+2, r24	; 0x02
 d06:	21 15       	cp	r18, r1
 d08:	31 05       	cpc	r19, r1
 d0a:	29 f4       	brne	.+10     	; 0xd16 <free+0x92>
 d0c:	f0 93 03 02 	sts	0x0203, r31	; 0x800203 <__flp+0x1>
 d10:	e0 93 02 02 	sts	0x0202, r30	; 0x800202 <__flp>
 d14:	3d c0       	rjmp	.+122    	; 0xd90 <free+0x10c>
 d16:	e9 01       	movw	r28, r18
 d18:	fb 83       	std	Y+3, r31	; 0x03
 d1a:	ea 83       	std	Y+2, r30	; 0x02
 d1c:	49 91       	ld	r20, Y+
 d1e:	59 91       	ld	r21, Y+
 d20:	c4 0f       	add	r28, r20
 d22:	d5 1f       	adc	r29, r21
 d24:	ec 17       	cp	r30, r28
 d26:	fd 07       	cpc	r31, r29
 d28:	61 f4       	brne	.+24     	; 0xd42 <free+0xbe>
 d2a:	80 81       	ld	r24, Z
 d2c:	91 81       	ldd	r25, Z+1	; 0x01
 d2e:	84 0f       	add	r24, r20
 d30:	95 1f       	adc	r25, r21
 d32:	02 96       	adiw	r24, 0x02	; 2
 d34:	e9 01       	movw	r28, r18
 d36:	99 83       	std	Y+1, r25	; 0x01
 d38:	88 83       	st	Y, r24
 d3a:	82 81       	ldd	r24, Z+2	; 0x02
 d3c:	93 81       	ldd	r25, Z+3	; 0x03
 d3e:	9b 83       	std	Y+3, r25	; 0x03
 d40:	8a 83       	std	Y+2, r24	; 0x02
 d42:	e0 e0       	ldi	r30, 0x00	; 0
 d44:	f0 e0       	ldi	r31, 0x00	; 0
 d46:	12 96       	adiw	r26, 0x02	; 2
 d48:	8d 91       	ld	r24, X+
 d4a:	9c 91       	ld	r25, X
 d4c:	13 97       	sbiw	r26, 0x03	; 3
 d4e:	00 97       	sbiw	r24, 0x00	; 0
 d50:	19 f0       	breq	.+6      	; 0xd58 <free+0xd4>
 d52:	fd 01       	movw	r30, r26
 d54:	dc 01       	movw	r26, r24
 d56:	f7 cf       	rjmp	.-18     	; 0xd46 <free+0xc2>
 d58:	8d 91       	ld	r24, X+
 d5a:	9c 91       	ld	r25, X
 d5c:	11 97       	sbiw	r26, 0x01	; 1
 d5e:	9d 01       	movw	r18, r26
 d60:	2e 5f       	subi	r18, 0xFE	; 254
 d62:	3f 4f       	sbci	r19, 0xFF	; 255
 d64:	82 0f       	add	r24, r18
 d66:	93 1f       	adc	r25, r19
 d68:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__brkval>
 d6c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__brkval+0x1>
 d70:	28 17       	cp	r18, r24
 d72:	39 07       	cpc	r19, r25
 d74:	69 f4       	brne	.+26     	; 0xd90 <free+0x10c>
 d76:	30 97       	sbiw	r30, 0x00	; 0
 d78:	29 f4       	brne	.+10     	; 0xd84 <free+0x100>
 d7a:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__flp+0x1>
 d7e:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__flp>
 d82:	02 c0       	rjmp	.+4      	; 0xd88 <free+0x104>
 d84:	13 82       	std	Z+3, r1	; 0x03
 d86:	12 82       	std	Z+2, r1	; 0x02
 d88:	b0 93 01 02 	sts	0x0201, r27	; 0x800201 <__brkval+0x1>
 d8c:	a0 93 00 02 	sts	0x0200, r26	; 0x800200 <__brkval>
 d90:	df 91       	pop	r29
 d92:	cf 91       	pop	r28
 d94:	08 95       	ret

00000d96 <strnlen_P>:
 d96:	fc 01       	movw	r30, r24
 d98:	05 90       	lpm	r0, Z+
 d9a:	61 50       	subi	r22, 0x01	; 1
 d9c:	70 40       	sbci	r23, 0x00	; 0
 d9e:	01 10       	cpse	r0, r1
 da0:	d8 f7       	brcc	.-10     	; 0xd98 <strnlen_P+0x2>
 da2:	80 95       	com	r24
 da4:	90 95       	com	r25
 da6:	8e 0f       	add	r24, r30
 da8:	9f 1f       	adc	r25, r31
 daa:	08 95       	ret

00000dac <memset>:
 dac:	dc 01       	movw	r26, r24
 dae:	01 c0       	rjmp	.+2      	; 0xdb2 <memset+0x6>
 db0:	6d 93       	st	X+, r22
 db2:	41 50       	subi	r20, 0x01	; 1
 db4:	50 40       	sbci	r21, 0x00	; 0
 db6:	e0 f7       	brcc	.-8      	; 0xdb0 <memset+0x4>
 db8:	08 95       	ret

00000dba <strnlen>:
 dba:	fc 01       	movw	r30, r24
 dbc:	61 50       	subi	r22, 0x01	; 1
 dbe:	70 40       	sbci	r23, 0x00	; 0
 dc0:	01 90       	ld	r0, Z+
 dc2:	01 10       	cpse	r0, r1
 dc4:	d8 f7       	brcc	.-10     	; 0xdbc <strnlen+0x2>
 dc6:	80 95       	com	r24
 dc8:	90 95       	com	r25
 dca:	8e 0f       	add	r24, r30
 dcc:	9f 1f       	adc	r25, r31
 dce:	08 95       	ret

00000dd0 <fputc>:
 dd0:	0f 93       	push	r16
 dd2:	1f 93       	push	r17
 dd4:	cf 93       	push	r28
 dd6:	df 93       	push	r29
 dd8:	fb 01       	movw	r30, r22
 dda:	23 81       	ldd	r18, Z+3	; 0x03
 ddc:	21 fd       	sbrc	r18, 1
 dde:	03 c0       	rjmp	.+6      	; 0xde6 <fputc+0x16>
 de0:	8f ef       	ldi	r24, 0xFF	; 255
 de2:	9f ef       	ldi	r25, 0xFF	; 255
 de4:	2c c0       	rjmp	.+88     	; 0xe3e <fputc+0x6e>
 de6:	22 ff       	sbrs	r18, 2
 de8:	16 c0       	rjmp	.+44     	; 0xe16 <fputc+0x46>
 dea:	46 81       	ldd	r20, Z+6	; 0x06
 dec:	57 81       	ldd	r21, Z+7	; 0x07
 dee:	24 81       	ldd	r18, Z+4	; 0x04
 df0:	35 81       	ldd	r19, Z+5	; 0x05
 df2:	42 17       	cp	r20, r18
 df4:	53 07       	cpc	r21, r19
 df6:	44 f4       	brge	.+16     	; 0xe08 <fputc+0x38>
 df8:	a0 81       	ld	r26, Z
 dfa:	b1 81       	ldd	r27, Z+1	; 0x01
 dfc:	9d 01       	movw	r18, r26
 dfe:	2f 5f       	subi	r18, 0xFF	; 255
 e00:	3f 4f       	sbci	r19, 0xFF	; 255
 e02:	31 83       	std	Z+1, r19	; 0x01
 e04:	20 83       	st	Z, r18
 e06:	8c 93       	st	X, r24
 e08:	26 81       	ldd	r18, Z+6	; 0x06
 e0a:	37 81       	ldd	r19, Z+7	; 0x07
 e0c:	2f 5f       	subi	r18, 0xFF	; 255
 e0e:	3f 4f       	sbci	r19, 0xFF	; 255
 e10:	37 83       	std	Z+7, r19	; 0x07
 e12:	26 83       	std	Z+6, r18	; 0x06
 e14:	14 c0       	rjmp	.+40     	; 0xe3e <fputc+0x6e>
 e16:	8b 01       	movw	r16, r22
 e18:	ec 01       	movw	r28, r24
 e1a:	fb 01       	movw	r30, r22
 e1c:	00 84       	ldd	r0, Z+8	; 0x08
 e1e:	f1 85       	ldd	r31, Z+9	; 0x09
 e20:	e0 2d       	mov	r30, r0
 e22:	09 95       	icall
 e24:	89 2b       	or	r24, r25
 e26:	e1 f6       	brne	.-72     	; 0xde0 <fputc+0x10>
 e28:	d8 01       	movw	r26, r16
 e2a:	16 96       	adiw	r26, 0x06	; 6
 e2c:	8d 91       	ld	r24, X+
 e2e:	9c 91       	ld	r25, X
 e30:	17 97       	sbiw	r26, 0x07	; 7
 e32:	01 96       	adiw	r24, 0x01	; 1
 e34:	17 96       	adiw	r26, 0x07	; 7
 e36:	9c 93       	st	X, r25
 e38:	8e 93       	st	-X, r24
 e3a:	16 97       	sbiw	r26, 0x06	; 6
 e3c:	ce 01       	movw	r24, r28
 e3e:	df 91       	pop	r29
 e40:	cf 91       	pop	r28
 e42:	1f 91       	pop	r17
 e44:	0f 91       	pop	r16
 e46:	08 95       	ret

00000e48 <__ultoa_invert>:
 e48:	fa 01       	movw	r30, r20
 e4a:	aa 27       	eor	r26, r26
 e4c:	28 30       	cpi	r18, 0x08	; 8
 e4e:	51 f1       	breq	.+84     	; 0xea4 <__ultoa_invert+0x5c>
 e50:	20 31       	cpi	r18, 0x10	; 16
 e52:	81 f1       	breq	.+96     	; 0xeb4 <__ultoa_invert+0x6c>
 e54:	e8 94       	clt
 e56:	6f 93       	push	r22
 e58:	6e 7f       	andi	r22, 0xFE	; 254
 e5a:	6e 5f       	subi	r22, 0xFE	; 254
 e5c:	7f 4f       	sbci	r23, 0xFF	; 255
 e5e:	8f 4f       	sbci	r24, 0xFF	; 255
 e60:	9f 4f       	sbci	r25, 0xFF	; 255
 e62:	af 4f       	sbci	r26, 0xFF	; 255
 e64:	b1 e0       	ldi	r27, 0x01	; 1
 e66:	3e d0       	rcall	.+124    	; 0xee4 <__ultoa_invert+0x9c>
 e68:	b4 e0       	ldi	r27, 0x04	; 4
 e6a:	3c d0       	rcall	.+120    	; 0xee4 <__ultoa_invert+0x9c>
 e6c:	67 0f       	add	r22, r23
 e6e:	78 1f       	adc	r23, r24
 e70:	89 1f       	adc	r24, r25
 e72:	9a 1f       	adc	r25, r26
 e74:	a1 1d       	adc	r26, r1
 e76:	68 0f       	add	r22, r24
 e78:	79 1f       	adc	r23, r25
 e7a:	8a 1f       	adc	r24, r26
 e7c:	91 1d       	adc	r25, r1
 e7e:	a1 1d       	adc	r26, r1
 e80:	6a 0f       	add	r22, r26
 e82:	71 1d       	adc	r23, r1
 e84:	81 1d       	adc	r24, r1
 e86:	91 1d       	adc	r25, r1
 e88:	a1 1d       	adc	r26, r1
 e8a:	20 d0       	rcall	.+64     	; 0xecc <__ultoa_invert+0x84>
 e8c:	09 f4       	brne	.+2      	; 0xe90 <__ultoa_invert+0x48>
 e8e:	68 94       	set
 e90:	3f 91       	pop	r19
 e92:	2a e0       	ldi	r18, 0x0A	; 10
 e94:	26 9f       	mul	r18, r22
 e96:	11 24       	eor	r1, r1
 e98:	30 19       	sub	r19, r0
 e9a:	30 5d       	subi	r19, 0xD0	; 208
 e9c:	31 93       	st	Z+, r19
 e9e:	de f6       	brtc	.-74     	; 0xe56 <__ultoa_invert+0xe>
 ea0:	cf 01       	movw	r24, r30
 ea2:	08 95       	ret
 ea4:	46 2f       	mov	r20, r22
 ea6:	47 70       	andi	r20, 0x07	; 7
 ea8:	40 5d       	subi	r20, 0xD0	; 208
 eaa:	41 93       	st	Z+, r20
 eac:	b3 e0       	ldi	r27, 0x03	; 3
 eae:	0f d0       	rcall	.+30     	; 0xece <__ultoa_invert+0x86>
 eb0:	c9 f7       	brne	.-14     	; 0xea4 <__ultoa_invert+0x5c>
 eb2:	f6 cf       	rjmp	.-20     	; 0xea0 <__ultoa_invert+0x58>
 eb4:	46 2f       	mov	r20, r22
 eb6:	4f 70       	andi	r20, 0x0F	; 15
 eb8:	40 5d       	subi	r20, 0xD0	; 208
 eba:	4a 33       	cpi	r20, 0x3A	; 58
 ebc:	18 f0       	brcs	.+6      	; 0xec4 <__ultoa_invert+0x7c>
 ebe:	49 5d       	subi	r20, 0xD9	; 217
 ec0:	31 fd       	sbrc	r19, 1
 ec2:	40 52       	subi	r20, 0x20	; 32
 ec4:	41 93       	st	Z+, r20
 ec6:	02 d0       	rcall	.+4      	; 0xecc <__ultoa_invert+0x84>
 ec8:	a9 f7       	brne	.-22     	; 0xeb4 <__ultoa_invert+0x6c>
 eca:	ea cf       	rjmp	.-44     	; 0xea0 <__ultoa_invert+0x58>
 ecc:	b4 e0       	ldi	r27, 0x04	; 4
 ece:	a6 95       	lsr	r26
 ed0:	97 95       	ror	r25
 ed2:	87 95       	ror	r24
 ed4:	77 95       	ror	r23
 ed6:	67 95       	ror	r22
 ed8:	ba 95       	dec	r27
 eda:	c9 f7       	brne	.-14     	; 0xece <__ultoa_invert+0x86>
 edc:	00 97       	sbiw	r24, 0x00	; 0
 ede:	61 05       	cpc	r22, r1
 ee0:	71 05       	cpc	r23, r1
 ee2:	08 95       	ret
 ee4:	9b 01       	movw	r18, r22
 ee6:	ac 01       	movw	r20, r24
 ee8:	0a 2e       	mov	r0, r26
 eea:	06 94       	lsr	r0
 eec:	57 95       	ror	r21
 eee:	47 95       	ror	r20
 ef0:	37 95       	ror	r19
 ef2:	27 95       	ror	r18
 ef4:	ba 95       	dec	r27
 ef6:	c9 f7       	brne	.-14     	; 0xeea <__ultoa_invert+0xa2>
 ef8:	62 0f       	add	r22, r18
 efa:	73 1f       	adc	r23, r19
 efc:	84 1f       	adc	r24, r20
 efe:	95 1f       	adc	r25, r21
 f00:	a0 1d       	adc	r26, r0
 f02:	08 95       	ret

00000f04 <__prologue_saves__>:
 f04:	2f 92       	push	r2
 f06:	3f 92       	push	r3
 f08:	4f 92       	push	r4
 f0a:	5f 92       	push	r5
 f0c:	6f 92       	push	r6
 f0e:	7f 92       	push	r7
 f10:	8f 92       	push	r8
 f12:	9f 92       	push	r9
 f14:	af 92       	push	r10
 f16:	bf 92       	push	r11
 f18:	cf 92       	push	r12
 f1a:	df 92       	push	r13
 f1c:	ef 92       	push	r14
 f1e:	ff 92       	push	r15
 f20:	0f 93       	push	r16
 f22:	1f 93       	push	r17
 f24:	cf 93       	push	r28
 f26:	df 93       	push	r29
 f28:	cd b7       	in	r28, 0x3d	; 61
 f2a:	de b7       	in	r29, 0x3e	; 62
 f2c:	ca 1b       	sub	r28, r26
 f2e:	db 0b       	sbc	r29, r27
 f30:	0f b6       	in	r0, 0x3f	; 63
 f32:	f8 94       	cli
 f34:	de bf       	out	0x3e, r29	; 62
 f36:	0f be       	out	0x3f, r0	; 63
 f38:	cd bf       	out	0x3d, r28	; 61
 f3a:	09 94       	ijmp

00000f3c <__epilogue_restores__>:
 f3c:	2a 88       	ldd	r2, Y+18	; 0x12
 f3e:	39 88       	ldd	r3, Y+17	; 0x11
 f40:	48 88       	ldd	r4, Y+16	; 0x10
 f42:	5f 84       	ldd	r5, Y+15	; 0x0f
 f44:	6e 84       	ldd	r6, Y+14	; 0x0e
 f46:	7d 84       	ldd	r7, Y+13	; 0x0d
 f48:	8c 84       	ldd	r8, Y+12	; 0x0c
 f4a:	9b 84       	ldd	r9, Y+11	; 0x0b
 f4c:	aa 84       	ldd	r10, Y+10	; 0x0a
 f4e:	b9 84       	ldd	r11, Y+9	; 0x09
 f50:	c8 84       	ldd	r12, Y+8	; 0x08
 f52:	df 80       	ldd	r13, Y+7	; 0x07
 f54:	ee 80       	ldd	r14, Y+6	; 0x06
 f56:	fd 80       	ldd	r15, Y+5	; 0x05
 f58:	0c 81       	ldd	r16, Y+4	; 0x04
 f5a:	1b 81       	ldd	r17, Y+3	; 0x03
 f5c:	aa 81       	ldd	r26, Y+2	; 0x02
 f5e:	b9 81       	ldd	r27, Y+1	; 0x01
 f60:	ce 0f       	add	r28, r30
 f62:	d1 1d       	adc	r29, r1
 f64:	0f b6       	in	r0, 0x3f	; 63
 f66:	f8 94       	cli
 f68:	de bf       	out	0x3e, r29	; 62
 f6a:	0f be       	out	0x3f, r0	; 63
 f6c:	cd bf       	out	0x3d, r28	; 61
 f6e:	ed 01       	movw	r28, r26
 f70:	08 95       	ret

00000f72 <_exit>:
 f72:	f8 94       	cli

00000f74 <__stop_program>:
 f74:	ff cf       	rjmp	.-2      	; 0xf74 <__stop_program>
