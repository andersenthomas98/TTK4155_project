
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  00000fb2  00001046  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001ca  008001ca  00001110  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000238  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cb6  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c42  00000000  00000000  0000305a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bd4  00000000  00000000  00003c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000594  00000000  00000000  00004870  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005da  00000000  00000000  00004e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010e5  00000000  00000000  000053de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  000064c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_1>
   8:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_2>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 eb       	ldi	r30, 0xB2	; 178
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 3c       	cpi	r26, 0xCA	; 202
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa ec       	ldi	r26, 0xCA	; 202
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 3d       	cpi	r26, 0xD6	; 214
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 3a 03 	call	0x674	; 0x674 <main>
  a6:	0c 94 d7 07 	jmp	0xfae	; 0xfae <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:
#include <stddef.h>
#include "uart.h"


void CAN_init(void) {
	MCP_init();
  ae:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <MCP_init>
	
	// Enable recieve and message error interrupts
	MCP_write(MCP_CANINTE, 0b10000101);
  b2:	65 e8       	ldi	r22, 0x85	; 133
  b4:	8b e2       	ldi	r24, 0x2B	; 43
  b6:	0e 94 ef 01 	call	0x3de	; 0x3de <MCP_write>
	printf("%#X\n\r", MCP_read(MCP_CANINTE));
  ba:	8b e2       	ldi	r24, 0x2B	; 43
  bc:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_read>
  c0:	1f 92       	push	r1
  c2:	8f 93       	push	r24
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	9f 93       	push	r25
  ca:	8f 93       	push	r24
  cc:	0e 94 ca 03 	call	0x794	; 0x794 <printf>
	
	//MCP_bitModify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);	//enter loopback mode
	MCP_bitModify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);	//enter normal mode
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	60 ee       	ldi	r22, 0xE0	; 224
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	0e 94 1a 02 	call	0x434	; 0x434 <MCP_bitModify>
	MCP_bitModify(MCP_RXB0CTRL, 0b01100000, 0b01100000); // Turn mask/filters off, recieve any message
  da:	40 e6       	ldi	r20, 0x60	; 96
  dc:	60 e6       	ldi	r22, 0x60	; 96
  de:	80 e6       	ldi	r24, 0x60	; 96
  e0:	0e 94 1a 02 	call	0x434	; 0x434 <MCP_bitModify>
	
	if (MCP_read(MCP_CANCTRL) & 0b01000000) {
  e4:	8f e0       	ldi	r24, 0x0F	; 15
  e6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_read>
  ea:	0f 90       	pop	r0
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	86 ff       	sbrs	r24, 6
  f4:	08 c0       	rjmp	.+16     	; 0x106 <CAN_init+0x58>
		printf("CAN controller in loopback mode\n\r");
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	9f 93       	push	r25
  fc:	8f 93       	push	r24
  fe:	0e 94 ca 03 	call	0x794	; 0x794 <printf>
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	08 95       	ret

00000108 <CAN_message_send>:
	}
}

void CAN_message_send(msg_ptr msgPtr) {
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	8c 01       	movw	r16, r24
	// Set TXB0SIDH (higher ID-register)
	MCP_write(MCP_TXB0CTRL + 1, (msgPtr->id));
 114:	fc 01       	movw	r30, r24
 116:	60 81       	ld	r22, Z
 118:	81 e3       	ldi	r24, 0x31	; 49
 11a:	0e 94 ef 01 	call	0x3de	; 0x3de <MCP_write>
	// Set TXB0SIDL (lower ID-register)
	MCP_write(MCP_TXB0CTRL + 2, (msgPtr->id) & 0xFF);
	printf("lower ID to be sent = %#X \n\r", (msgPtr->id) & 0xFF);
	*/
	// Set TXB0DLC (length register)
	MCP_write(MCP_TXB0CTRL + 5, (msgPtr->length));
 11e:	f8 01       	movw	r30, r16
 120:	61 81       	ldd	r22, Z+1	; 0x01
 122:	85 e3       	ldi	r24, 0x35	; 53
 124:	0e 94 ef 01 	call	0x3de	; 0x3de <MCP_write>
	
	int dataIterator = 0;
	for (uint8_t i = MCP_TXB0CTRL + 6; i <= MCP_TXB0CTRL + 6 + msgPtr->length; i++) {
 128:	f8 01       	movw	r30, r16
 12a:	81 81       	ldd	r24, Z+1	; 0x01
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	c6 96       	adiw	r24, 0x36	; 54
 130:	c6 97       	sbiw	r24, 0x36	; 54
 132:	ac f0       	brlt	.+42     	; 0x15e <CAN_message_send+0x56>
 134:	e8 01       	movw	r28, r16
 136:	22 96       	adiw	r28, 0x02	; 2
 138:	0f 2e       	mov	r0, r31
 13a:	f6 e3       	ldi	r31, 0x36	; 54
 13c:	ff 2e       	mov	r15, r31
 13e:	f0 2d       	mov	r31, r0
		MCP_write(i, msgPtr->data[dataIterator]);
 140:	69 91       	ld	r22, Y+
 142:	8f 2d       	mov	r24, r15
 144:	0e 94 ef 01 	call	0x3de	; 0x3de <MCP_write>
	*/
	// Set TXB0DLC (length register)
	MCP_write(MCP_TXB0CTRL + 5, (msgPtr->length));
	
	int dataIterator = 0;
	for (uint8_t i = MCP_TXB0CTRL + 6; i <= MCP_TXB0CTRL + 6 + msgPtr->length; i++) {
 148:	f3 94       	inc	r15
 14a:	4f 2d       	mov	r20, r15
 14c:	50 e0       	ldi	r21, 0x00	; 0
 14e:	f8 01       	movw	r30, r16
 150:	21 81       	ldd	r18, Z+1	; 0x01
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	2a 5c       	subi	r18, 0xCA	; 202
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	24 17       	cp	r18, r20
 15a:	35 07       	cpc	r19, r21
 15c:	8c f7       	brge	.-30     	; 0x140 <CAN_message_send+0x38>
		MCP_write(i, msgPtr->data[dataIterator]);
		dataIterator++;
	}
	
	
	MCP_requestToSend(0);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 01 02 	call	0x402	; 0x402 <MCP_requestToSend>
	// Transmission of CAN msg will start when the device detects that the bus is available...
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	ff 90       	pop	r15
 170:	08 95       	ret

00000172 <CAN_message_recieve>:

msg_t CAN_message_recieve(void) {
 172:	7f 92       	push	r7
 174:	8f 92       	push	r8
 176:	9f 92       	push	r9
 178:	af 92       	push	r10
 17a:	bf 92       	push	r11
 17c:	cf 92       	push	r12
 17e:	df 92       	push	r13
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	2a 97       	sbiw	r28, 0x0a	; 10
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
 19c:	5c 01       	movw	r10, r24
	msg_t msg;
	
	// Read ID from RXB0SIDH and RXB0SIDL
	uint8_t upperId = MCP_read(MCP_RXB0CTRL + 1);
 19e:	81 e6       	ldi	r24, 0x61	; 97
 1a0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_read>
 1a4:	98 2e       	mov	r9, r24
	printf("recieved upper ID = %#X \n\r", upperId);
 1a6:	1f 92       	push	r1
 1a8:	8f 93       	push	r24
 1aa:	2e e2       	ldi	r18, 0x2E	; 46
 1ac:	31 e0       	ldi	r19, 0x01	; 1
 1ae:	3f 93       	push	r19
 1b0:	2f 93       	push	r18
 1b2:	0e 94 ca 03 	call	0x794	; 0x794 <printf>
	//printf("recieved lower ID = %#X \n\r", lowerId);
	//msg.id =  (upperId << 8) + lowerId;
	msg.id = upperId ;
	
	// Read length from RXB0DLC
	msg.length = MCP_read(MCP_RXB0CTRL + 5);
 1b6:	85 e6       	ldi	r24, 0x65	; 101
 1b8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_read>
 1bc:	88 2e       	mov	r8, r24
	
	// Read data
	int dataIterator = 0;
	for (uint8_t i = MCP_RXB0CTRL + 6; i <= MCP_RXB0CTRL + 6 + msg.length; i++) {
 1be:	e8 2e       	mov	r14, r24
 1c0:	f1 2c       	mov	r15, r1
 1c2:	86 e6       	ldi	r24, 0x66	; 102
 1c4:	e8 0e       	add	r14, r24
 1c6:	f1 1c       	adc	r15, r1
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	96 e6       	ldi	r25, 0x66	; 102
 1d2:	e9 16       	cp	r14, r25
 1d4:	f1 04       	cpc	r15, r1
 1d6:	dc f0       	brlt	.+54     	; 0x20e <CAN_message_recieve+0x9c>
 1d8:	8e 01       	movw	r16, r28
 1da:	0d 5f       	subi	r16, 0xFD	; 253
 1dc:	1f 4f       	sbci	r17, 0xFF	; 255
 1de:	0f 2e       	mov	r0, r31
 1e0:	f6 e6       	ldi	r31, 0x66	; 102
 1e2:	7f 2e       	mov	r7, r31
 1e4:	f0 2d       	mov	r31, r0
 1e6:	9e 01       	movw	r18, r28
 1e8:	20 95       	com	r18
 1ea:	30 95       	com	r19
 1ec:	f9 01       	movw	r30, r18
 1ee:	ec 59       	subi	r30, 0x9C	; 156
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	6f 01       	movw	r12, r30
		msg.data[dataIterator] = MCP_read(i);
 1f4:	87 2d       	mov	r24, r7
 1f6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_read>
 1fa:	f8 01       	movw	r30, r16
 1fc:	81 93       	st	Z+, r24
 1fe:	8f 01       	movw	r16, r30
	// Read length from RXB0DLC
	msg.length = MCP_read(MCP_RXB0CTRL + 5);
	
	// Read data
	int dataIterator = 0;
	for (uint8_t i = MCP_RXB0CTRL + 6; i <= MCP_RXB0CTRL + 6 + msg.length; i++) {
 200:	73 94       	inc	r7
 202:	96 01       	movw	r18, r12
 204:	2e 0f       	add	r18, r30
 206:	3f 1f       	adc	r19, r31
 208:	e2 16       	cp	r14, r18
 20a:	f3 06       	cpc	r15, r19
 20c:	9c f7       	brge	.-26     	; 0x1f4 <CAN_message_recieve+0x82>
		msg.data[dataIterator] = MCP_read(i);
		dataIterator++;
	}
	return msg;
 20e:	99 82       	std	Y+1, r9	; 0x01
 210:	8a 82       	std	Y+2, r8	; 0x02
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	fe 01       	movw	r30, r28
 216:	31 96       	adiw	r30, 0x01	; 1
 218:	d5 01       	movw	r26, r10
 21a:	01 90       	ld	r0, Z+
 21c:	0d 92       	st	X+, r0
 21e:	8a 95       	dec	r24
 220:	e1 f7       	brne	.-8      	; 0x21a <CAN_message_recieve+0xa8>
} 
 222:	c5 01       	movw	r24, r10
 224:	2a 96       	adiw	r28, 0x0a	; 10
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	1f 91       	pop	r17
 236:	0f 91       	pop	r16
 238:	ff 90       	pop	r15
 23a:	ef 90       	pop	r14
 23c:	df 90       	pop	r13
 23e:	cf 90       	pop	r12
 240:	bf 90       	pop	r11
 242:	af 90       	pop	r10
 244:	9f 90       	pop	r9
 246:	8f 90       	pop	r8
 248:	7f 90       	pop	r7
 24a:	08 95       	ret

0000024c <btn_init>:
	}
	return NEUTRAL;
}

void btn_init(void) {
	DDRB &= ~(1 << PB0);
 24c:	b8 98       	cbi	0x17, 0	; 23
	DDRB &= ~(1 << PB1);
 24e:	b9 98       	cbi	0x17, 1	; 23
 250:	08 95       	ret

00000252 <INTERRUPT_init>:
volatile int ADC_INTERRUPT_READY = 0;
//volatile int SPI_TRANSMISSION_COMPLETE = 0;

void INTERRUPT_init() {
	// disable global interrupts (set SREG register)
	cli();
 252:	f8 94       	cli
	
	// Enable that a falling edge generates an interrupt request for INT0
	MCUCR |= (1 << ISC01);
 254:	85 b7       	in	r24, 0x35	; 53
 256:	82 60       	ori	r24, 0x02	; 2
 258:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
 25a:	85 b7       	in	r24, 0x35	; 53
 25c:	8e 7f       	andi	r24, 0xFE	; 254
 25e:	85 bf       	out	0x35, r24	; 53
	
	
	// Enable that a falling edge generates an interrupt request for INT1
	MCUCR |= (1 << ISC11);
 260:	85 b7       	in	r24, 0x35	; 53
 262:	88 60       	ori	r24, 0x08	; 8
 264:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);	
 266:	85 b7       	in	r24, 0x35	; 53
 268:	8b 7f       	andi	r24, 0xFB	; 251
 26a:	85 bf       	out	0x35, r24	; 53

	
	// Enable interrupt on INT0 (from ADC) and INT1 (from MCP)
	GICR |= (1 << INT0);
 26c:	8b b7       	in	r24, 0x3b	; 59
 26e:	80 64       	ori	r24, 0x40	; 64
 270:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1); 
 272:	8b b7       	in	r24, 0x3b	; 59
 274:	80 68       	ori	r24, 0x80	; 128
 276:	8b bf       	out	0x3b, r24	; 59
		
	// Enable global interrupts (set SREG register)
	sei();
 278:	78 94       	sei
 27a:	08 95       	ret

0000027c <__vector_1>:
}

// Interrupt for ADC
ISR(INT0_vect) {
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
	// Disable global interrupts while executing an ISR (?)
	//cli();
	ADC_INTERRUPT_READY = 1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	90 93 cb 01 	sts	0x01CB, r25
 292:	80 93 ca 01 	sts	0x01CA, r24
	// Reset interrupt flag
	//GIFR &= ~(1 << INTF0);
	//GIFR |= (1 << INTF0);
	//printf("routine finished\n\r");
	//sei();
}
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_2>:

// CAN interrupts
ISR(INT1_vect) {
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	2a 97       	sbiw	r28, 0x0a	; 10
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	cd bf       	out	0x3d, r28	; 61
	if (MCP_read(MCP_CANINTF) & MCP_TX0IF) {
 2d4:	8c e2       	ldi	r24, 0x2C	; 44
 2d6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_read>
 2da:	82 ff       	sbrs	r24, 2
 2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <__vector_2+0x54>
		printf("Message sendt succesfully\n\r");
 2de:	89 e4       	ldi	r24, 0x49	; 73
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	9f 93       	push	r25
 2e4:	8f 93       	push	r24
 2e6:	0e 94 ca 03 	call	0x794	; 0x794 <printf>
		
		// Reset transmit flag
		MCP_bitModify(MCP_CANINTF, MCP_TX0IF, 0);
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	64 e0       	ldi	r22, 0x04	; 4
 2ee:	8c e2       	ldi	r24, 0x2C	; 44
 2f0:	0e 94 1a 02 	call	0x434	; 0x434 <MCP_bitModify>
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
	}
	// Message recieved at recieve buffer 0
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF) {
 2f8:	8c e2       	ldi	r24, 0x2C	; 44
 2fa:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_read>
 2fe:	80 ff       	sbrs	r24, 0
 300:	2f c0       	rjmp	.+94     	; 0x360 <__vector_2+0xbc>
		struct CAN_message msg = CAN_message_recieve();
 302:	ce 01       	movw	r24, r28
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	0e 94 b9 00 	call	0x172	; 0x172 <CAN_message_recieve>
		printf("--- Message recieved ---\n\r");
 30a:	85 e6       	ldi	r24, 0x65	; 101
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	9f 93       	push	r25
 310:	8f 93       	push	r24
 312:	0e 94 ca 03 	call	0x794	; 0x794 <printf>
		printf("ID: %#X \n\r", msg.id);
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	1f 92       	push	r1
 31a:	8f 93       	push	r24
 31c:	80 e8       	ldi	r24, 0x80	; 128
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	9f 93       	push	r25
 322:	8f 93       	push	r24
 324:	0e 94 ca 03 	call	0x794	; 0x794 <printf>
		printf("Length: %d \n\r", msg.length);
 328:	8a 81       	ldd	r24, Y+2	; 0x02
 32a:	1f 92       	push	r1
 32c:	8f 93       	push	r24
 32e:	8b e8       	ldi	r24, 0x8B	; 139
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	9f 93       	push	r25
 334:	8f 93       	push	r24
 336:	0e 94 ca 03 	call	0x794	; 0x794 <printf>
		printf("Data[0] = %#X \n\r", msg.data[0]);
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
 33c:	1f 92       	push	r1
 33e:	8f 93       	push	r24
 340:	89 e9       	ldi	r24, 0x99	; 153
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	9f 93       	push	r25
 346:	8f 93       	push	r24
 348:	0e 94 ca 03 	call	0x794	; 0x794 <printf>
	
		// Reset recieve flag
		MCP_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	8c e2       	ldi	r24, 0x2C	; 44
 352:	0e 94 1a 02 	call	0x434	; 0x434 <MCP_bitModify>
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
	}
	if (MCP_read(MCP_CANINTF) & MCP_MERRF) {
 360:	8c e2       	ldi	r24, 0x2C	; 44
 362:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MCP_read>
 366:	88 23       	and	r24, r24
 368:	44 f4       	brge	.+16     	; 0x37a <__vector_2+0xd6>
		printf("CAN BUS ERROR!");
 36a:	8a ea       	ldi	r24, 0xAA	; 170
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	9f 93       	push	r25
 370:	8f 93       	push	r24
 372:	0e 94 ca 03 	call	0x794	; 0x794 <printf>
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
	}
}
 37a:	2a 96       	adiw	r28, 0x0a	; 10
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	de bf       	out	0x3e, r29	; 62
 382:	0f be       	out	0x3f, r0	; 63
 384:	cd bf       	out	0x3d, r28	; 61
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	ff 91       	pop	r31
 38c:	ef 91       	pop	r30
 38e:	bf 91       	pop	r27
 390:	af 91       	pop	r26
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	7f 91       	pop	r23
 398:	6f 91       	pop	r22
 39a:	5f 91       	pop	r21
 39c:	4f 91       	pop	r20
 39e:	3f 91       	pop	r19
 3a0:	2f 91       	pop	r18
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <MCP_reset>:
}


void MCP_reset(void) {
	// Initiate data transmission
	PORTB &= ~(1 << PB4);
 3ac:	c4 98       	cbi	0x18, 4	; 24
	
	// Send RESET instruction
	SPI_transmit(MCP_RESET);
 3ae:	80 ec       	ldi	r24, 0xC0	; 192
 3b0:	0e 94 03 03 	call	0x606	; 0x606 <SPI_transmit>
	
	// End data transmission
	PORTB |= (1 << PB4);
 3b4:	c4 9a       	sbi	0x18, 4	; 24
 3b6:	08 95       	ret

000003b8 <MCP_init>:
#include <avr/io.h>
#define F_CPU 4915200
#include <avr/delay.h>

void MCP_init(void) {
	SPI_MasterInit();
 3b8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <SPI_MasterInit>
	MCP_reset();
 3bc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MCP_reset>
 3c0:	08 95       	ret

000003c2 <MCP_read>:
	// End data transmission
	PORTB |= (1 << PB4);
}


uint8_t MCP_read(uint8_t address) {
 3c2:	cf 93       	push	r28
 3c4:	c8 2f       	mov	r28, r24
	uint8_t data;
	
	// Select CAN controller
	PORTB &= ~(1 << PB4);
 3c6:	c4 98       	cbi	0x18, 4	; 24
	
	// Send READ instruction
	SPI_transmit(MCP_READ);
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	0e 94 03 03 	call	0x606	; 0x606 <SPI_transmit>
	
	// Send address
	SPI_transmit(address);
 3ce:	8c 2f       	mov	r24, r28
 3d0:	0e 94 03 03 	call	0x606	; 0x606 <SPI_transmit>
	
	// Read from address specified over
	data = SPI_read();
 3d4:	0e 94 07 03 	call	0x60e	; 0x60e <SPI_read>
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
 3d8:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;
	
}
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <MCP_write>:

void MCP_write(uint8_t address, uint8_t data) {
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	d8 2f       	mov	r29, r24
 3e4:	c6 2f       	mov	r28, r22
	// Select CAN controller
	PORTB &= ~(1 << PB4);
 3e6:	c4 98       	cbi	0x18, 4	; 24
	
	// Send WRITE instruction
	SPI_transmit(MCP_WRITE);
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 03 03 	call	0x606	; 0x606 <SPI_transmit>
	
	// Send address
	SPI_transmit(address);
 3ee:	8d 2f       	mov	r24, r29
 3f0:	0e 94 03 03 	call	0x606	; 0x606 <SPI_transmit>
	
	// Send data
	SPI_transmit(data);
 3f4:	8c 2f       	mov	r24, r28
 3f6:	0e 94 03 03 	call	0x606	; 0x606 <SPI_transmit>
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
 3fa:	c4 9a       	sbi	0x18, 4	; 24
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <MCP_requestToSend>:

void MCP_requestToSend(int buffer) {
	// Select CAN controller
	PORTB &= ~(1 << PB4);
 402:	c4 98       	cbi	0x18, 4	; 24
	
	// RTS from buffer 0, 1, 2, or all
	if (buffer == 0) {
 404:	00 97       	sbiw	r24, 0x00	; 0
 406:	21 f4       	brne	.+8      	; 0x410 <MCP_requestToSend+0xe>
		SPI_transmit(MCP_RTS_TX0);
 408:	81 e8       	ldi	r24, 0x81	; 129
 40a:	0e 94 03 03 	call	0x606	; 0x606 <SPI_transmit>
 40e:	10 c0       	rjmp	.+32     	; 0x430 <MCP_requestToSend+0x2e>
	}
	else if (buffer == 1) {
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	91 05       	cpc	r25, r1
 414:	21 f4       	brne	.+8      	; 0x41e <MCP_requestToSend+0x1c>
		SPI_transmit(MCP_RTS_TX1);
 416:	82 e8       	ldi	r24, 0x82	; 130
 418:	0e 94 03 03 	call	0x606	; 0x606 <SPI_transmit>
 41c:	09 c0       	rjmp	.+18     	; 0x430 <MCP_requestToSend+0x2e>
	}
	else if (buffer == 2) {
 41e:	02 97       	sbiw	r24, 0x02	; 2
 420:	21 f4       	brne	.+8      	; 0x42a <MCP_requestToSend+0x28>
		SPI_transmit(MCP_RTS_TX2);
 422:	84 e8       	ldi	r24, 0x84	; 132
 424:	0e 94 03 03 	call	0x606	; 0x606 <SPI_transmit>
 428:	03 c0       	rjmp	.+6      	; 0x430 <MCP_requestToSend+0x2e>
	}
	else {
		SPI_transmit(MCP_RTS_ALL);
 42a:	87 e8       	ldi	r24, 0x87	; 135
 42c:	0e 94 03 03 	call	0x606	; 0x606 <SPI_transmit>
	}
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
 430:	c4 9a       	sbi	0x18, 4	; 24
 432:	08 95       	ret

00000434 <MCP_bitModify>:
}

void MCP_bitModify(uint8_t address, uint8_t mask, uint8_t data) {
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	18 2f       	mov	r17, r24
 43c:	d6 2f       	mov	r29, r22
 43e:	c4 2f       	mov	r28, r20
	// Select CAN controller
	PORTB &= ~(1 << PB4);
 440:	c4 98       	cbi	0x18, 4	; 24
	
	// Send BIT MODIFY instruction
	SPI_transmit(MCP_BITMOD);
 442:	85 e0       	ldi	r24, 0x05	; 5
 444:	0e 94 03 03 	call	0x606	; 0x606 <SPI_transmit>
	
	// Send address of register
	SPI_transmit(address);
 448:	81 2f       	mov	r24, r17
 44a:	0e 94 03 03 	call	0x606	; 0x606 <SPI_transmit>
	
	// Send mask byte
	SPI_transmit(mask);
 44e:	8d 2f       	mov	r24, r29
 450:	0e 94 03 03 	call	0x606	; 0x606 <SPI_transmit>
	
	// Send data byte
	SPI_transmit(data);
 454:	8c 2f       	mov	r24, r28
 456:	0e 94 03 03 	call	0x606	; 0x606 <SPI_transmit>
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
 45a:	c4 9a       	sbi	0x18, 4	; 24
}
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	08 95       	ret

00000464 <OLED_init>:
#include "fonts.h"
#include <avr/io.h>


void OLED_init(void) {
	XMEM_write(0xAE, 0xAE); // display off
 464:	6e ea       	ldi	r22, 0xAE	; 174
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	8e ea       	ldi	r24, 0xAE	; 174
 46a:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0xA1, 0xA1); // segment remap
 46e:	61 ea       	ldi	r22, 0xA1	; 161
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	81 ea       	ldi	r24, 0xA1	; 161
 474:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0xDA, 0xDA); // common pads hardware: alternative
 478:	6a ed       	ldi	r22, 0xDA	; 218
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	8a ed       	ldi	r24, 0xDA	; 218
 47e:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0x12, 0x12);
 482:	62 e1       	ldi	r22, 0x12	; 18
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	82 e1       	ldi	r24, 0x12	; 18
 488:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0xC8, 0xC8); // common output scan direction:com63-com0
 48c:	68 ec       	ldi	r22, 0xC8	; 200
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	88 ec       	ldi	r24, 0xC8	; 200
 492:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0xA8, 0xA8); //multiplex ratio mode:63 
 496:	68 ea       	ldi	r22, 0xA8	; 168
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	88 ea       	ldi	r24, 0xA8	; 168
 49c:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0x3F, 0x3F); 
 4a0:	6f e3       	ldi	r22, 0x3F	; 63
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	8f e3       	ldi	r24, 0x3F	; 63
 4a6:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0xD5, 0xD5); // display divide ratio/osc. freq. mode
 4aa:	65 ed       	ldi	r22, 0xD5	; 213
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	85 ed       	ldi	r24, 0xD5	; 213
 4b0:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0x80, 0x80);
 4b4:	60 e8       	ldi	r22, 0x80	; 128
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	80 e8       	ldi	r24, 0x80	; 128
 4ba:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0x81, 0x81); // contrast control
 4be:	61 e8       	ldi	r22, 0x81	; 129
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	81 e8       	ldi	r24, 0x81	; 129
 4c4:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0x50, 0x50);
 4c8:	60 e5       	ldi	r22, 0x50	; 80
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	80 e5       	ldi	r24, 0x50	; 80
 4ce:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0xD9, 0xD9); // set pre-charge period
 4d2:	69 ed       	ldi	r22, 0xD9	; 217
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	89 ed       	ldi	r24, 0xD9	; 217
 4d8:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0x21, 0x21); 
 4dc:	61 e2       	ldi	r22, 0x21	; 33
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	81 e2       	ldi	r24, 0x21	; 33
 4e2:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0x20, 0x20); // set page addressing mode
 4e6:	60 e2       	ldi	r22, 0x20	; 32
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	80 e2       	ldi	r24, 0x20	; 32
 4ec:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0x02, 0x02); 
 4f0:	62 e0       	ldi	r22, 0x02	; 2
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0xDB, 0xDB); // VCOM deselect level mode
 4fa:	6b ed       	ldi	r22, 0xDB	; 219
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	8b ed       	ldi	r24, 0xDB	; 219
 500:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0x30, 0x30);
 504:	60 e3       	ldi	r22, 0x30	; 48
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	80 e3       	ldi	r24, 0x30	; 48
 50a:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0xAD, 0xAD); // master config
 50e:	6d ea       	ldi	r22, 0xAD	; 173
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	8d ea       	ldi	r24, 0xAD	; 173
 514:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0x00, 0x00);
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0xA4, 0xA4); // out follows RAM content
 522:	64 ea       	ldi	r22, 0xA4	; 164
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	84 ea       	ldi	r24, 0xA4	; 164
 528:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0xA6, 0xA6); // set normal display
 52c:	66 ea       	ldi	r22, 0xA6	; 166
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	86 ea       	ldi	r24, 0xA6	; 166
 532:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0xD3, 0xD3);
 536:	63 ed       	ldi	r22, 0xD3	; 211
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	83 ed       	ldi	r24, 0xD3	; 211
 53c:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0x00, 0x00);
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	XMEM_write(0xAF, 0xAF); // display on
 54a:	6f ea       	ldi	r22, 0xAF	; 175
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	8f ea       	ldi	r24, 0xAF	; 175
 550:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
 554:	08 95       	ret

00000556 <OLED_refresh>:
	XMEM_write(value, index);
	}
}


void OLED_refresh(void){
 556:	ef 92       	push	r14
 558:	ff 92       	push	r15
 55a:	0f 93       	push	r16
 55c:	1f 93       	push	r17
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	00 e0       	ldi	r16, 0x00	; 0
 564:	18 e0       	ldi	r17, 0x08	; 8
 566:	0f 2e       	mov	r0, r31
 568:	f0 eb       	ldi	r31, 0xB0	; 176
 56a:	ef 2e       	mov	r14, r31
 56c:	f1 2c       	mov	r15, r1
 56e:	f0 2d       	mov	r31, r0
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
 570:	b7 01       	movw	r22, r14
 572:	8e 2d       	mov	r24, r14
 574:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
		XMEM_write(0, 0);		// Set lower column start address
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
		XMEM_write(0x10, 0x10);  // Set data register
 582:	60 e1       	ldi	r22, 0x10	; 16
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	80 e1       	ldi	r24, 0x10	; 16
 588:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
		for (int column = 0; column < 128; column++){
 58c:	c0 e0       	ldi	r28, 0x00	; 0
 58e:	d0 e0       	ldi	r29, 0x00	; 0
			uint8_t SRAMvalue = XMEM_read(0x800 + page*128 + column);
 590:	ce 01       	movw	r24, r28
 592:	80 0f       	add	r24, r16
 594:	91 1f       	adc	r25, r17
 596:	0e 94 32 03 	call	0x664	; 0x664 <XMEM_read>
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
 59a:	68 2f       	mov	r22, r24
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	7e 5f       	subi	r23, 0xFE	; 254
 5a0:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
		XMEM_write(0, 0);		// Set lower column start address
		XMEM_write(0x10, 0x10);  // Set data register
		for (int column = 0; column < 128; column++){
 5a4:	21 96       	adiw	r28, 0x01	; 1
 5a6:	c0 38       	cpi	r28, 0x80	; 128
 5a8:	d1 05       	cpc	r29, r1
 5aa:	91 f7       	brne	.-28     	; 0x590 <OLED_refresh+0x3a>
 5ac:	8f ef       	ldi	r24, 0xFF	; 255
 5ae:	e8 1a       	sub	r14, r24
 5b0:	f8 0a       	sbc	r15, r24
 5b2:	00 58       	subi	r16, 0x80	; 128
 5b4:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}


void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
 5b6:	88 eb       	ldi	r24, 0xB8	; 184
 5b8:	e8 16       	cp	r14, r24
 5ba:	f1 04       	cpc	r15, r1
 5bc:	c9 f6       	brne	.-78     	; 0x570 <OLED_refresh+0x1a>
		for (int column = 0; column < 128; column++){
			uint8_t SRAMvalue = XMEM_read(0x800 + page*128 + column);
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
		}
	}
}
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	ff 90       	pop	r15
 5c8:	ef 90       	pop	r14
 5ca:	08 95       	ret

000005cc <OLED_clearAll>:


void OLED_clearAll(void) {
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
	for (uint16_t index = 0x800; index < 0x800 + 1024; index++){
 5d0:	c0 e0       	ldi	r28, 0x00	; 0
 5d2:	d8 e0       	ldi	r29, 0x08	; 8
		XMEM_write(0, index);
 5d4:	be 01       	movw	r22, r28
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	0e 94 36 03 	call	0x66c	; 0x66c <XMEM_write>
	}
}


void OLED_clearAll(void) {
	for (uint16_t index = 0x800; index < 0x800 + 1024; index++){
 5dc:	21 96       	adiw	r28, 0x01	; 1
 5de:	c1 15       	cp	r28, r1
 5e0:	8c e0       	ldi	r24, 0x0C	; 12
 5e2:	d8 07       	cpc	r29, r24
 5e4:	b9 f7       	brne	.-18     	; 0x5d4 <OLED_clearAll+0x8>
		XMEM_write(0, index);
	}
}
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <SPI_MasterInit>:
#include "interrupt.h"
#include <avr/io.h>

void SPI_MasterInit(void) {
	// Set PB4 (/SS), PB5 (MOSI) and PB7 (SCK) as output
	DDRB |= (1 << DDB4) | (1 << DDB5) | (1 << DDB7);
 5ec:	87 b3       	in	r24, 0x17	; 23
 5ee:	80 6b       	ori	r24, 0xB0	; 176
 5f0:	87 bb       	out	0x17, r24	; 23
	// Set PB6 (MISO) as input
	DDRB &= ~(1 << DDB6);
 5f2:	be 98       	cbi	0x17, 6	; 23
	
	// Select Master SPI mode, SPI enable, SPI interrupt enable (Global interrupts must be enabled)
	SPCR |= (1 << MSTR) | (1 << SPE); //| (1 << SPIE);
 5f4:	8d b1       	in	r24, 0x0d	; 13
 5f6:	80 65       	ori	r24, 0x50	; 80
 5f8:	8d b9       	out	0x0d, r24	; 13
		Alternatively, the SPIF bit is cleared by first reading the
		SPI Status Register with SPIF set, then accessing the SPI Data Register (SPDR).
	*/
	
	// Transmit MSB of the data word first
	SPCR &= ~(1 << DORD);
 5fa:	6d 98       	cbi	0x0d, 5	; 13
	
	// Configure clock polarity (SCK is low when idle)
	SPCR &= ~(1 << CPOL);
 5fc:	6b 98       	cbi	0x0d, 3	; 13
	
	// Configure clock phase (data is sampled on leading edge)
	SPCR &= ~(1 << CPHA);
 5fe:	6a 98       	cbi	0x0d, 2	; 13
	
	// Configure SCK rate (f_osc/4)
	SPCR &= ~(1 << SPR0);
 600:	68 98       	cbi	0x0d, 0	; 13
	SPCR &= ~(1 << SPR1);
 602:	69 98       	cbi	0x0d, 1	; 13
 604:	08 95       	ret

00000606 <SPI_transmit>:
}

void SPI_transmit(uint8_t data) {
	// Initiate data transmission
	SPDR = data;
 606:	8f b9       	out	0x0f, r24	; 15
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
 608:	77 9b       	sbis	0x0e, 7	; 14
 60a:	fe cf       	rjmp	.-4      	; 0x608 <SPI_transmit+0x2>
	// Wait for ISR to be handled (meaning: wait for the transmission to complete)
	while (!SPI_TRANSMISSION_COMPLETE);
	
	SPI_TRANSMISSION_COMPLETE = 0;
	*/
}	
 60c:	08 95       	ret

0000060e <SPI_read>:

uint8_t SPI_read(void) {
	SPDR = 0xFF; // Send dummy byte
 60e:	8f ef       	ldi	r24, 0xFF	; 255
 610:	8f b9       	out	0x0f, r24	; 15
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
 612:	77 9b       	sbis	0x0e, 7	; 14
 614:	fe cf       	rjmp	.-4      	; 0x612 <SPI_read+0x4>
	while (!SPI_TRANSMISSION_COMPLETE);
	
	SPI_TRANSMISSION_COMPLETE = 0;
	*/
	
	return SPDR;
 616:	8f b1       	in	r24, 0x0f	; 15
	// SPIF bit in SPSR register is reset when accessing SPDR
}
 618:	08 95       	ret

0000061a <timer_8bit256divisionCheckOnlyinit>:
#define F_CPU 4915200

void timer_8bit256divisionCheckOnlyinit(void) {

	// start the timer
	TCCR0 = 0b00000101;
 61a:	85 e0       	ldi	r24, 0x05	; 5
 61c:	83 bf       	out	0x33, r24	; 51
	// set prescaler to 256 and start the timer
	TIMSK &= ~(1 << OCIE0 | 1 << TOIE0);
 61e:	89 b7       	in	r24, 0x39	; 57
 620:	8c 7f       	andi	r24, 0xFC	; 252
 622:	89 bf       	out	0x39, r24	; 57
 624:	08 95       	ret

00000626 <UART_transmit>:
#include <util/delay.h>
#include "uart.h"

void UART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while ( ! (UCSR0A & (1<<UDRE0))) {
 626:	5d 9b       	sbis	0x0b, 5	; 11
 628:	fe cf       	rjmp	.-4      	; 0x626 <UART_transmit>
		// waiting...
	}
	// Put data into buffer, sends the data
	UDR0 = data;
 62a:	8c b9       	out	0x0c, r24	; 12
 62c:	08 95       	ret

0000062e <UART_receive>:
}

unsigned char UART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1 << RXC0))) {
 62e:	5f 9b       	sbis	0x0b, 7	; 11
 630:	fe cf       	rjmp	.-4      	; 0x62e <UART_receive>
		// wait...
	}
	return UDR0;
 632:	8c b1       	in	r24, 0x0c	; 12
	
}
 634:	08 95       	ret

00000636 <UART_init>:

void UART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = ubrr>>8;
 636:	90 bd       	out	0x20, r25	; 32
	UBRR0L = ubrr;
 638:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 63a:	88 e1       	ldi	r24, 0x18	; 24
 63c:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 63e:	8e e8       	ldi	r24, 0x8E	; 142
 640:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(UART_transmit, UART_receive);
 642:	67 e1       	ldi	r22, 0x17	; 23
 644:	73 e0       	ldi	r23, 0x03	; 3
 646:	83 e1       	ldi	r24, 0x13	; 19
 648:	93 e0       	ldi	r25, 0x03	; 3
 64a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <fdevopen>
 64e:	08 95       	ret

00000650 <XMEM_init>:
#include "uart.h"
#define BASE_ADDRESS 0x1000

void XMEM_init(void) {
	// Enable XMEM
	MCUCR |= (1 << SRE);
 650:	85 b7       	in	r24, 0x35	; 53
 652:	80 68       	ori	r24, 0x80	; 128
 654:	85 bf       	out	0x35, r24	; 53
	
	// SFIOR = XX100XXX
	// We use PC7-PC4 for JTAG, NOT for XMEM address
	SFIOR |= (1 << XMM2);
 656:	80 b7       	in	r24, 0x30	; 48
 658:	80 62       	ori	r24, 0x20	; 32
 65a:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~((1 << XMM1) | (1 << XMM0));
 65c:	80 b7       	in	r24, 0x30	; 48
 65e:	87 7e       	andi	r24, 0xE7	; 231
 660:	80 bf       	out	0x30, r24	; 48
 662:	08 95       	ret

00000664 <XMEM_read>:
}

uint8_t XMEM_read(uint16_t address) {
	volatile uint8_t *ext_mem = (uint8_t*) BASE_ADDRESS;
	return ext_mem[address];
 664:	90 5f       	subi	r25, 0xF0	; 240
 666:	fc 01       	movw	r30, r24
 668:	80 81       	ld	r24, Z
}
 66a:	08 95       	ret

0000066c <XMEM_write>:

void XMEM_write(uint8_t data, uint16_t address) {
	volatile uint8_t *ext_mem = (uint8_t *) BASE_ADDRESS;
	ext_mem[address] = data;
 66c:	fb 01       	movw	r30, r22
 66e:	f0 5f       	subi	r31, 0xF0	; 240
 670:	80 83       	st	Z, r24
 672:	08 95       	ret

00000674 <main>:
#include "Drivers/oled.h"
#define MYUBRR 31


int main(void)
{
 674:	cf 93       	push	r28
 676:	df 93       	push	r29
 678:	cd b7       	in	r28, 0x3d	; 61
 67a:	de b7       	in	r29, 0x3e	; 62
 67c:	2a 97       	sbiw	r28, 0x0a	; 10
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	f8 94       	cli
 682:	de bf       	out	0x3e, r29	; 62
 684:	0f be       	out	0x3f, r0	; 63
 686:	cd bf       	out	0x3d, r28	; 61
	INTERRUPT_init();
 688:	0e 94 29 01 	call	0x252	; 0x252 <INTERRUPT_init>
	UART_init(MYUBRR);
 68c:	8f e1       	ldi	r24, 0x1F	; 31
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 1b 03 	call	0x636	; 0x636 <UART_init>
	XMEM_init();
 694:	0e 94 28 03 	call	0x650	; 0x650 <XMEM_init>
	btn_init();
 698:	0e 94 26 01 	call	0x24c	; 0x24c <btn_init>
	printf("\nStarting.... \n\r");
 69c:	89 eb       	ldi	r24, 0xB9	; 185
 69e:	91 e0       	ldi	r25, 0x01	; 1
 6a0:	9f 93       	push	r25
 6a2:	8f 93       	push	r24
 6a4:	0e 94 ca 03 	call	0x794	; 0x794 <printf>
	timer_8bit256divisionCheckOnlyinit();
 6a8:	0e 94 0d 03 	call	0x61a	; 0x61a <timer_8bit256divisionCheckOnlyinit>
	CAN_init();
 6ac:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>

	
	
	OLED_init();
 6b0:	0e 94 32 02 	call	0x464	; 0x464 <OLED_init>
	OLED_clearAll();
 6b4:	0e 94 e6 02 	call	0x5cc	; 0x5cc <OLED_clearAll>
	OLED_refresh();
 6b8:	0e 94 ab 02 	call	0x556	; 0x556 <OLED_refresh>

	MENU_navigate(mainMenuPtr);
	*/
	
	msg_t msg;
	msg.id = 0xA5;
 6bc:	85 ea       	ldi	r24, 0xA5	; 165
 6be:	89 83       	std	Y+1, r24	; 0x01
	msg.length = 3;
 6c0:	83 e0       	ldi	r24, 0x03	; 3
 6c2:	8a 83       	std	Y+2, r24	; 0x02
	msg.data[0] = 0xC;
 6c4:	8c e0       	ldi	r24, 0x0C	; 12
 6c6:	8b 83       	std	Y+3, r24	; 0x03
	msg.data[1] = 0xF;
 6c8:	8f e0       	ldi	r24, 0x0F	; 15
 6ca:	8c 83       	std	Y+4, r24	; 0x04
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6d0:	2f ef       	ldi	r18, 0xFF	; 255
 6d2:	8f e7       	ldi	r24, 0x7F	; 127
 6d4:	97 e0       	ldi	r25, 0x07	; 7
 6d6:	21 50       	subi	r18, 0x01	; 1
 6d8:	80 40       	sbci	r24, 0x00	; 0
 6da:	90 40       	sbci	r25, 0x00	; 0
 6dc:	e1 f7       	brne	.-8      	; 0x6d6 <main+0x62>
 6de:	00 c0       	rjmp	.+0      	; 0x6e0 <main+0x6c>
 6e0:	00 00       	nop
		printf("MCP_read = %d\n\r", MCP_read(MCP_RXF0SIDH));
		_delay_ms(500);
		*/
		
		// Testing CAN
		CAN_message_send(msgPtr);
 6e2:	ce 01       	movw	r24, r28
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	0e 94 84 00 	call	0x108	; 0x108 <CAN_message_send>
 6ea:	2f ef       	ldi	r18, 0xFF	; 255
 6ec:	8f ef       	ldi	r24, 0xFF	; 255
 6ee:	9a e4       	ldi	r25, 0x4A	; 74
 6f0:	21 50       	subi	r18, 0x01	; 1
 6f2:	80 40       	sbci	r24, 0x00	; 0
 6f4:	90 40       	sbci	r25, 0x00	; 0
 6f6:	e1 f7       	brne	.-8      	; 0x6f0 <main+0x7c>
 6f8:	00 c0       	rjmp	.+0      	; 0x6fa <main+0x86>
 6fa:	00 00       	nop
 6fc:	e9 cf       	rjmp	.-46     	; 0x6d0 <main+0x5c>

000006fe <fdevopen>:
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	ec 01       	movw	r28, r24
 708:	8b 01       	movw	r16, r22
 70a:	00 97       	sbiw	r24, 0x00	; 0
 70c:	31 f4       	brne	.+12     	; 0x71a <fdevopen+0x1c>
 70e:	61 15       	cp	r22, r1
 710:	71 05       	cpc	r23, r1
 712:	19 f4       	brne	.+6      	; 0x71a <fdevopen+0x1c>
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	38 c0       	rjmp	.+112    	; 0x78a <fdevopen+0x8c>
 71a:	6e e0       	ldi	r22, 0x0E	; 14
 71c:	70 e0       	ldi	r23, 0x00	; 0
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 b0 05 	call	0xb60	; 0xb60 <calloc>
 726:	fc 01       	movw	r30, r24
 728:	00 97       	sbiw	r24, 0x00	; 0
 72a:	a1 f3       	breq	.-24     	; 0x714 <fdevopen+0x16>
 72c:	80 e8       	ldi	r24, 0x80	; 128
 72e:	83 83       	std	Z+3, r24	; 0x03
 730:	01 15       	cp	r16, r1
 732:	11 05       	cpc	r17, r1
 734:	71 f0       	breq	.+28     	; 0x752 <fdevopen+0x54>
 736:	13 87       	std	Z+11, r17	; 0x0b
 738:	02 87       	std	Z+10, r16	; 0x0a
 73a:	81 e8       	ldi	r24, 0x81	; 129
 73c:	83 83       	std	Z+3, r24	; 0x03
 73e:	80 91 cc 01 	lds	r24, 0x01CC
 742:	90 91 cd 01 	lds	r25, 0x01CD
 746:	89 2b       	or	r24, r25
 748:	21 f4       	brne	.+8      	; 0x752 <fdevopen+0x54>
 74a:	f0 93 cd 01 	sts	0x01CD, r31
 74e:	e0 93 cc 01 	sts	0x01CC, r30
 752:	20 97       	sbiw	r28, 0x00	; 0
 754:	c9 f0       	breq	.+50     	; 0x788 <fdevopen+0x8a>
 756:	d1 87       	std	Z+9, r29	; 0x09
 758:	c0 87       	std	Z+8, r28	; 0x08
 75a:	83 81       	ldd	r24, Z+3	; 0x03
 75c:	82 60       	ori	r24, 0x02	; 2
 75e:	83 83       	std	Z+3, r24	; 0x03
 760:	80 91 ce 01 	lds	r24, 0x01CE
 764:	90 91 cf 01 	lds	r25, 0x01CF
 768:	89 2b       	or	r24, r25
 76a:	71 f4       	brne	.+28     	; 0x788 <fdevopen+0x8a>
 76c:	f0 93 cf 01 	sts	0x01CF, r31
 770:	e0 93 ce 01 	sts	0x01CE, r30
 774:	80 91 d0 01 	lds	r24, 0x01D0
 778:	90 91 d1 01 	lds	r25, 0x01D1
 77c:	89 2b       	or	r24, r25
 77e:	21 f4       	brne	.+8      	; 0x788 <fdevopen+0x8a>
 780:	f0 93 d1 01 	sts	0x01D1, r31
 784:	e0 93 d0 01 	sts	0x01D0, r30
 788:	cf 01       	movw	r24, r30
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	0f 91       	pop	r16
 792:	08 95       	ret

00000794 <printf>:
 794:	a0 e0       	ldi	r26, 0x00	; 0
 796:	b0 e0       	ldi	r27, 0x00	; 0
 798:	e0 ed       	ldi	r30, 0xD0	; 208
 79a:	f3 e0       	ldi	r31, 0x03	; 3
 79c:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__prologue_saves__+0x20>
 7a0:	fe 01       	movw	r30, r28
 7a2:	35 96       	adiw	r30, 0x05	; 5
 7a4:	61 91       	ld	r22, Z+
 7a6:	71 91       	ld	r23, Z+
 7a8:	af 01       	movw	r20, r30
 7aa:	80 91 ce 01 	lds	r24, 0x01CE
 7ae:	90 91 cf 01 	lds	r25, 0x01CF
 7b2:	0e 94 de 03 	call	0x7bc	; 0x7bc <vfprintf>
 7b6:	e2 e0       	ldi	r30, 0x02	; 2
 7b8:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__epilogue_restores__+0x20>

000007bc <vfprintf>:
 7bc:	ac e0       	ldi	r26, 0x0C	; 12
 7be:	b0 e0       	ldi	r27, 0x00	; 0
 7c0:	e4 ee       	ldi	r30, 0xE4	; 228
 7c2:	f3 e0       	ldi	r31, 0x03	; 3
 7c4:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__prologue_saves__>
 7c8:	7c 01       	movw	r14, r24
 7ca:	6b 01       	movw	r12, r22
 7cc:	8a 01       	movw	r16, r20
 7ce:	fc 01       	movw	r30, r24
 7d0:	17 82       	std	Z+7, r1	; 0x07
 7d2:	16 82       	std	Z+6, r1	; 0x06
 7d4:	83 81       	ldd	r24, Z+3	; 0x03
 7d6:	81 ff       	sbrs	r24, 1
 7d8:	bd c1       	rjmp	.+890    	; 0xb54 <vfprintf+0x398>
 7da:	ce 01       	movw	r24, r28
 7dc:	01 96       	adiw	r24, 0x01	; 1
 7de:	4c 01       	movw	r8, r24
 7e0:	f7 01       	movw	r30, r14
 7e2:	93 81       	ldd	r25, Z+3	; 0x03
 7e4:	f6 01       	movw	r30, r12
 7e6:	93 fd       	sbrc	r25, 3
 7e8:	85 91       	lpm	r24, Z+
 7ea:	93 ff       	sbrs	r25, 3
 7ec:	81 91       	ld	r24, Z+
 7ee:	6f 01       	movw	r12, r30
 7f0:	88 23       	and	r24, r24
 7f2:	09 f4       	brne	.+2      	; 0x7f6 <vfprintf+0x3a>
 7f4:	ab c1       	rjmp	.+854    	; 0xb4c <vfprintf+0x390>
 7f6:	85 32       	cpi	r24, 0x25	; 37
 7f8:	39 f4       	brne	.+14     	; 0x808 <vfprintf+0x4c>
 7fa:	93 fd       	sbrc	r25, 3
 7fc:	85 91       	lpm	r24, Z+
 7fe:	93 ff       	sbrs	r25, 3
 800:	81 91       	ld	r24, Z+
 802:	6f 01       	movw	r12, r30
 804:	85 32       	cpi	r24, 0x25	; 37
 806:	29 f4       	brne	.+10     	; 0x812 <vfprintf+0x56>
 808:	b7 01       	movw	r22, r14
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 810:	e7 cf       	rjmp	.-50     	; 0x7e0 <vfprintf+0x24>
 812:	51 2c       	mov	r5, r1
 814:	31 2c       	mov	r3, r1
 816:	20 e0       	ldi	r18, 0x00	; 0
 818:	20 32       	cpi	r18, 0x20	; 32
 81a:	a0 f4       	brcc	.+40     	; 0x844 <vfprintf+0x88>
 81c:	8b 32       	cpi	r24, 0x2B	; 43
 81e:	69 f0       	breq	.+26     	; 0x83a <vfprintf+0x7e>
 820:	30 f4       	brcc	.+12     	; 0x82e <vfprintf+0x72>
 822:	80 32       	cpi	r24, 0x20	; 32
 824:	59 f0       	breq	.+22     	; 0x83c <vfprintf+0x80>
 826:	83 32       	cpi	r24, 0x23	; 35
 828:	69 f4       	brne	.+26     	; 0x844 <vfprintf+0x88>
 82a:	20 61       	ori	r18, 0x10	; 16
 82c:	2c c0       	rjmp	.+88     	; 0x886 <vfprintf+0xca>
 82e:	8d 32       	cpi	r24, 0x2D	; 45
 830:	39 f0       	breq	.+14     	; 0x840 <vfprintf+0x84>
 832:	80 33       	cpi	r24, 0x30	; 48
 834:	39 f4       	brne	.+14     	; 0x844 <vfprintf+0x88>
 836:	21 60       	ori	r18, 0x01	; 1
 838:	26 c0       	rjmp	.+76     	; 0x886 <vfprintf+0xca>
 83a:	22 60       	ori	r18, 0x02	; 2
 83c:	24 60       	ori	r18, 0x04	; 4
 83e:	23 c0       	rjmp	.+70     	; 0x886 <vfprintf+0xca>
 840:	28 60       	ori	r18, 0x08	; 8
 842:	21 c0       	rjmp	.+66     	; 0x886 <vfprintf+0xca>
 844:	27 fd       	sbrc	r18, 7
 846:	27 c0       	rjmp	.+78     	; 0x896 <vfprintf+0xda>
 848:	30 ed       	ldi	r19, 0xD0	; 208
 84a:	38 0f       	add	r19, r24
 84c:	3a 30       	cpi	r19, 0x0A	; 10
 84e:	78 f4       	brcc	.+30     	; 0x86e <vfprintf+0xb2>
 850:	26 ff       	sbrs	r18, 6
 852:	06 c0       	rjmp	.+12     	; 0x860 <vfprintf+0xa4>
 854:	fa e0       	ldi	r31, 0x0A	; 10
 856:	5f 9e       	mul	r5, r31
 858:	30 0d       	add	r19, r0
 85a:	11 24       	eor	r1, r1
 85c:	53 2e       	mov	r5, r19
 85e:	13 c0       	rjmp	.+38     	; 0x886 <vfprintf+0xca>
 860:	8a e0       	ldi	r24, 0x0A	; 10
 862:	38 9e       	mul	r3, r24
 864:	30 0d       	add	r19, r0
 866:	11 24       	eor	r1, r1
 868:	33 2e       	mov	r3, r19
 86a:	20 62       	ori	r18, 0x20	; 32
 86c:	0c c0       	rjmp	.+24     	; 0x886 <vfprintf+0xca>
 86e:	8e 32       	cpi	r24, 0x2E	; 46
 870:	21 f4       	brne	.+8      	; 0x87a <vfprintf+0xbe>
 872:	26 fd       	sbrc	r18, 6
 874:	6b c1       	rjmp	.+726    	; 0xb4c <vfprintf+0x390>
 876:	20 64       	ori	r18, 0x40	; 64
 878:	06 c0       	rjmp	.+12     	; 0x886 <vfprintf+0xca>
 87a:	8c 36       	cpi	r24, 0x6C	; 108
 87c:	11 f4       	brne	.+4      	; 0x882 <vfprintf+0xc6>
 87e:	20 68       	ori	r18, 0x80	; 128
 880:	02 c0       	rjmp	.+4      	; 0x886 <vfprintf+0xca>
 882:	88 36       	cpi	r24, 0x68	; 104
 884:	41 f4       	brne	.+16     	; 0x896 <vfprintf+0xda>
 886:	f6 01       	movw	r30, r12
 888:	93 fd       	sbrc	r25, 3
 88a:	85 91       	lpm	r24, Z+
 88c:	93 ff       	sbrs	r25, 3
 88e:	81 91       	ld	r24, Z+
 890:	6f 01       	movw	r12, r30
 892:	81 11       	cpse	r24, r1
 894:	c1 cf       	rjmp	.-126    	; 0x818 <vfprintf+0x5c>
 896:	98 2f       	mov	r25, r24
 898:	9f 7d       	andi	r25, 0xDF	; 223
 89a:	95 54       	subi	r25, 0x45	; 69
 89c:	93 30       	cpi	r25, 0x03	; 3
 89e:	28 f4       	brcc	.+10     	; 0x8aa <vfprintf+0xee>
 8a0:	0c 5f       	subi	r16, 0xFC	; 252
 8a2:	1f 4f       	sbci	r17, 0xFF	; 255
 8a4:	ff e3       	ldi	r31, 0x3F	; 63
 8a6:	f9 83       	std	Y+1, r31	; 0x01
 8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <vfprintf+0x108>
 8aa:	83 36       	cpi	r24, 0x63	; 99
 8ac:	31 f0       	breq	.+12     	; 0x8ba <vfprintf+0xfe>
 8ae:	83 37       	cpi	r24, 0x73	; 115
 8b0:	71 f0       	breq	.+28     	; 0x8ce <vfprintf+0x112>
 8b2:	83 35       	cpi	r24, 0x53	; 83
 8b4:	09 f0       	breq	.+2      	; 0x8b8 <vfprintf+0xfc>
 8b6:	5b c0       	rjmp	.+182    	; 0x96e <vfprintf+0x1b2>
 8b8:	22 c0       	rjmp	.+68     	; 0x8fe <vfprintf+0x142>
 8ba:	f8 01       	movw	r30, r16
 8bc:	80 81       	ld	r24, Z
 8be:	89 83       	std	Y+1, r24	; 0x01
 8c0:	0e 5f       	subi	r16, 0xFE	; 254
 8c2:	1f 4f       	sbci	r17, 0xFF	; 255
 8c4:	44 24       	eor	r4, r4
 8c6:	43 94       	inc	r4
 8c8:	51 2c       	mov	r5, r1
 8ca:	54 01       	movw	r10, r8
 8cc:	15 c0       	rjmp	.+42     	; 0x8f8 <vfprintf+0x13c>
 8ce:	38 01       	movw	r6, r16
 8d0:	f2 e0       	ldi	r31, 0x02	; 2
 8d2:	6f 0e       	add	r6, r31
 8d4:	71 1c       	adc	r7, r1
 8d6:	f8 01       	movw	r30, r16
 8d8:	a0 80       	ld	r10, Z
 8da:	b1 80       	ldd	r11, Z+1	; 0x01
 8dc:	26 ff       	sbrs	r18, 6
 8de:	03 c0       	rjmp	.+6      	; 0x8e6 <vfprintf+0x12a>
 8e0:	65 2d       	mov	r22, r5
 8e2:	70 e0       	ldi	r23, 0x00	; 0
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <vfprintf+0x12e>
 8e6:	6f ef       	ldi	r22, 0xFF	; 255
 8e8:	7f ef       	ldi	r23, 0xFF	; 255
 8ea:	c5 01       	movw	r24, r10
 8ec:	2c 87       	std	Y+12, r18	; 0x0c
 8ee:	0e 94 05 07 	call	0xe0a	; 0xe0a <strnlen>
 8f2:	2c 01       	movw	r4, r24
 8f4:	83 01       	movw	r16, r6
 8f6:	2c 85       	ldd	r18, Y+12	; 0x0c
 8f8:	2f 77       	andi	r18, 0x7F	; 127
 8fa:	22 2e       	mov	r2, r18
 8fc:	17 c0       	rjmp	.+46     	; 0x92c <vfprintf+0x170>
 8fe:	38 01       	movw	r6, r16
 900:	f2 e0       	ldi	r31, 0x02	; 2
 902:	6f 0e       	add	r6, r31
 904:	71 1c       	adc	r7, r1
 906:	f8 01       	movw	r30, r16
 908:	a0 80       	ld	r10, Z
 90a:	b1 80       	ldd	r11, Z+1	; 0x01
 90c:	26 ff       	sbrs	r18, 6
 90e:	03 c0       	rjmp	.+6      	; 0x916 <vfprintf+0x15a>
 910:	65 2d       	mov	r22, r5
 912:	70 e0       	ldi	r23, 0x00	; 0
 914:	02 c0       	rjmp	.+4      	; 0x91a <vfprintf+0x15e>
 916:	6f ef       	ldi	r22, 0xFF	; 255
 918:	7f ef       	ldi	r23, 0xFF	; 255
 91a:	c5 01       	movw	r24, r10
 91c:	2c 87       	std	Y+12, r18	; 0x0c
 91e:	0e 94 f3 06 	call	0xde6	; 0xde6 <strnlen_P>
 922:	2c 01       	movw	r4, r24
 924:	2c 85       	ldd	r18, Y+12	; 0x0c
 926:	20 68       	ori	r18, 0x80	; 128
 928:	22 2e       	mov	r2, r18
 92a:	83 01       	movw	r16, r6
 92c:	23 fc       	sbrc	r2, 3
 92e:	1b c0       	rjmp	.+54     	; 0x966 <vfprintf+0x1aa>
 930:	83 2d       	mov	r24, r3
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	48 16       	cp	r4, r24
 936:	59 06       	cpc	r5, r25
 938:	b0 f4       	brcc	.+44     	; 0x966 <vfprintf+0x1aa>
 93a:	b7 01       	movw	r22, r14
 93c:	80 e2       	ldi	r24, 0x20	; 32
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 944:	3a 94       	dec	r3
 946:	f4 cf       	rjmp	.-24     	; 0x930 <vfprintf+0x174>
 948:	f5 01       	movw	r30, r10
 94a:	27 fc       	sbrc	r2, 7
 94c:	85 91       	lpm	r24, Z+
 94e:	27 fe       	sbrs	r2, 7
 950:	81 91       	ld	r24, Z+
 952:	5f 01       	movw	r10, r30
 954:	b7 01       	movw	r22, r14
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 95c:	31 10       	cpse	r3, r1
 95e:	3a 94       	dec	r3
 960:	f1 e0       	ldi	r31, 0x01	; 1
 962:	4f 1a       	sub	r4, r31
 964:	51 08       	sbc	r5, r1
 966:	41 14       	cp	r4, r1
 968:	51 04       	cpc	r5, r1
 96a:	71 f7       	brne	.-36     	; 0x948 <vfprintf+0x18c>
 96c:	e5 c0       	rjmp	.+458    	; 0xb38 <vfprintf+0x37c>
 96e:	84 36       	cpi	r24, 0x64	; 100
 970:	11 f0       	breq	.+4      	; 0x976 <vfprintf+0x1ba>
 972:	89 36       	cpi	r24, 0x69	; 105
 974:	39 f5       	brne	.+78     	; 0x9c4 <vfprintf+0x208>
 976:	f8 01       	movw	r30, r16
 978:	27 ff       	sbrs	r18, 7
 97a:	07 c0       	rjmp	.+14     	; 0x98a <vfprintf+0x1ce>
 97c:	60 81       	ld	r22, Z
 97e:	71 81       	ldd	r23, Z+1	; 0x01
 980:	82 81       	ldd	r24, Z+2	; 0x02
 982:	93 81       	ldd	r25, Z+3	; 0x03
 984:	0c 5f       	subi	r16, 0xFC	; 252
 986:	1f 4f       	sbci	r17, 0xFF	; 255
 988:	08 c0       	rjmp	.+16     	; 0x99a <vfprintf+0x1de>
 98a:	60 81       	ld	r22, Z
 98c:	71 81       	ldd	r23, Z+1	; 0x01
 98e:	88 27       	eor	r24, r24
 990:	77 fd       	sbrc	r23, 7
 992:	80 95       	com	r24
 994:	98 2f       	mov	r25, r24
 996:	0e 5f       	subi	r16, 0xFE	; 254
 998:	1f 4f       	sbci	r17, 0xFF	; 255
 99a:	2f 76       	andi	r18, 0x6F	; 111
 99c:	b2 2e       	mov	r11, r18
 99e:	97 ff       	sbrs	r25, 7
 9a0:	09 c0       	rjmp	.+18     	; 0x9b4 <vfprintf+0x1f8>
 9a2:	90 95       	com	r25
 9a4:	80 95       	com	r24
 9a6:	70 95       	com	r23
 9a8:	61 95       	neg	r22
 9aa:	7f 4f       	sbci	r23, 0xFF	; 255
 9ac:	8f 4f       	sbci	r24, 0xFF	; 255
 9ae:	9f 4f       	sbci	r25, 0xFF	; 255
 9b0:	20 68       	ori	r18, 0x80	; 128
 9b2:	b2 2e       	mov	r11, r18
 9b4:	2a e0       	ldi	r18, 0x0A	; 10
 9b6:	30 e0       	ldi	r19, 0x00	; 0
 9b8:	a4 01       	movw	r20, r8
 9ba:	0e 94 42 07 	call	0xe84	; 0xe84 <__ultoa_invert>
 9be:	a8 2e       	mov	r10, r24
 9c0:	a8 18       	sub	r10, r8
 9c2:	44 c0       	rjmp	.+136    	; 0xa4c <vfprintf+0x290>
 9c4:	85 37       	cpi	r24, 0x75	; 117
 9c6:	29 f4       	brne	.+10     	; 0x9d2 <vfprintf+0x216>
 9c8:	2f 7e       	andi	r18, 0xEF	; 239
 9ca:	b2 2e       	mov	r11, r18
 9cc:	2a e0       	ldi	r18, 0x0A	; 10
 9ce:	30 e0       	ldi	r19, 0x00	; 0
 9d0:	25 c0       	rjmp	.+74     	; 0xa1c <vfprintf+0x260>
 9d2:	f2 2f       	mov	r31, r18
 9d4:	f9 7f       	andi	r31, 0xF9	; 249
 9d6:	bf 2e       	mov	r11, r31
 9d8:	8f 36       	cpi	r24, 0x6F	; 111
 9da:	c1 f0       	breq	.+48     	; 0xa0c <vfprintf+0x250>
 9dc:	18 f4       	brcc	.+6      	; 0x9e4 <vfprintf+0x228>
 9de:	88 35       	cpi	r24, 0x58	; 88
 9e0:	79 f0       	breq	.+30     	; 0xa00 <vfprintf+0x244>
 9e2:	b4 c0       	rjmp	.+360    	; 0xb4c <vfprintf+0x390>
 9e4:	80 37       	cpi	r24, 0x70	; 112
 9e6:	19 f0       	breq	.+6      	; 0x9ee <vfprintf+0x232>
 9e8:	88 37       	cpi	r24, 0x78	; 120
 9ea:	21 f0       	breq	.+8      	; 0x9f4 <vfprintf+0x238>
 9ec:	af c0       	rjmp	.+350    	; 0xb4c <vfprintf+0x390>
 9ee:	2f 2f       	mov	r18, r31
 9f0:	20 61       	ori	r18, 0x10	; 16
 9f2:	b2 2e       	mov	r11, r18
 9f4:	b4 fe       	sbrs	r11, 4
 9f6:	0d c0       	rjmp	.+26     	; 0xa12 <vfprintf+0x256>
 9f8:	8b 2d       	mov	r24, r11
 9fa:	84 60       	ori	r24, 0x04	; 4
 9fc:	b8 2e       	mov	r11, r24
 9fe:	09 c0       	rjmp	.+18     	; 0xa12 <vfprintf+0x256>
 a00:	24 ff       	sbrs	r18, 4
 a02:	0a c0       	rjmp	.+20     	; 0xa18 <vfprintf+0x25c>
 a04:	9f 2f       	mov	r25, r31
 a06:	96 60       	ori	r25, 0x06	; 6
 a08:	b9 2e       	mov	r11, r25
 a0a:	06 c0       	rjmp	.+12     	; 0xa18 <vfprintf+0x25c>
 a0c:	28 e0       	ldi	r18, 0x08	; 8
 a0e:	30 e0       	ldi	r19, 0x00	; 0
 a10:	05 c0       	rjmp	.+10     	; 0xa1c <vfprintf+0x260>
 a12:	20 e1       	ldi	r18, 0x10	; 16
 a14:	30 e0       	ldi	r19, 0x00	; 0
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <vfprintf+0x260>
 a18:	20 e1       	ldi	r18, 0x10	; 16
 a1a:	32 e0       	ldi	r19, 0x02	; 2
 a1c:	f8 01       	movw	r30, r16
 a1e:	b7 fe       	sbrs	r11, 7
 a20:	07 c0       	rjmp	.+14     	; 0xa30 <vfprintf+0x274>
 a22:	60 81       	ld	r22, Z
 a24:	71 81       	ldd	r23, Z+1	; 0x01
 a26:	82 81       	ldd	r24, Z+2	; 0x02
 a28:	93 81       	ldd	r25, Z+3	; 0x03
 a2a:	0c 5f       	subi	r16, 0xFC	; 252
 a2c:	1f 4f       	sbci	r17, 0xFF	; 255
 a2e:	06 c0       	rjmp	.+12     	; 0xa3c <vfprintf+0x280>
 a30:	60 81       	ld	r22, Z
 a32:	71 81       	ldd	r23, Z+1	; 0x01
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	0e 5f       	subi	r16, 0xFE	; 254
 a3a:	1f 4f       	sbci	r17, 0xFF	; 255
 a3c:	a4 01       	movw	r20, r8
 a3e:	0e 94 42 07 	call	0xe84	; 0xe84 <__ultoa_invert>
 a42:	a8 2e       	mov	r10, r24
 a44:	a8 18       	sub	r10, r8
 a46:	fb 2d       	mov	r31, r11
 a48:	ff 77       	andi	r31, 0x7F	; 127
 a4a:	bf 2e       	mov	r11, r31
 a4c:	b6 fe       	sbrs	r11, 6
 a4e:	0b c0       	rjmp	.+22     	; 0xa66 <vfprintf+0x2aa>
 a50:	2b 2d       	mov	r18, r11
 a52:	2e 7f       	andi	r18, 0xFE	; 254
 a54:	a5 14       	cp	r10, r5
 a56:	50 f4       	brcc	.+20     	; 0xa6c <vfprintf+0x2b0>
 a58:	b4 fe       	sbrs	r11, 4
 a5a:	0a c0       	rjmp	.+20     	; 0xa70 <vfprintf+0x2b4>
 a5c:	b2 fc       	sbrc	r11, 2
 a5e:	08 c0       	rjmp	.+16     	; 0xa70 <vfprintf+0x2b4>
 a60:	2b 2d       	mov	r18, r11
 a62:	2e 7e       	andi	r18, 0xEE	; 238
 a64:	05 c0       	rjmp	.+10     	; 0xa70 <vfprintf+0x2b4>
 a66:	7a 2c       	mov	r7, r10
 a68:	2b 2d       	mov	r18, r11
 a6a:	03 c0       	rjmp	.+6      	; 0xa72 <vfprintf+0x2b6>
 a6c:	7a 2c       	mov	r7, r10
 a6e:	01 c0       	rjmp	.+2      	; 0xa72 <vfprintf+0x2b6>
 a70:	75 2c       	mov	r7, r5
 a72:	24 ff       	sbrs	r18, 4
 a74:	0d c0       	rjmp	.+26     	; 0xa90 <vfprintf+0x2d4>
 a76:	fe 01       	movw	r30, r28
 a78:	ea 0d       	add	r30, r10
 a7a:	f1 1d       	adc	r31, r1
 a7c:	80 81       	ld	r24, Z
 a7e:	80 33       	cpi	r24, 0x30	; 48
 a80:	11 f4       	brne	.+4      	; 0xa86 <vfprintf+0x2ca>
 a82:	29 7e       	andi	r18, 0xE9	; 233
 a84:	09 c0       	rjmp	.+18     	; 0xa98 <vfprintf+0x2dc>
 a86:	22 ff       	sbrs	r18, 2
 a88:	06 c0       	rjmp	.+12     	; 0xa96 <vfprintf+0x2da>
 a8a:	73 94       	inc	r7
 a8c:	73 94       	inc	r7
 a8e:	04 c0       	rjmp	.+8      	; 0xa98 <vfprintf+0x2dc>
 a90:	82 2f       	mov	r24, r18
 a92:	86 78       	andi	r24, 0x86	; 134
 a94:	09 f0       	breq	.+2      	; 0xa98 <vfprintf+0x2dc>
 a96:	73 94       	inc	r7
 a98:	23 fd       	sbrc	r18, 3
 a9a:	13 c0       	rjmp	.+38     	; 0xac2 <vfprintf+0x306>
 a9c:	20 ff       	sbrs	r18, 0
 a9e:	06 c0       	rjmp	.+12     	; 0xaac <vfprintf+0x2f0>
 aa0:	5a 2c       	mov	r5, r10
 aa2:	73 14       	cp	r7, r3
 aa4:	18 f4       	brcc	.+6      	; 0xaac <vfprintf+0x2f0>
 aa6:	53 0c       	add	r5, r3
 aa8:	57 18       	sub	r5, r7
 aaa:	73 2c       	mov	r7, r3
 aac:	73 14       	cp	r7, r3
 aae:	68 f4       	brcc	.+26     	; 0xaca <vfprintf+0x30e>
 ab0:	b7 01       	movw	r22, r14
 ab2:	80 e2       	ldi	r24, 0x20	; 32
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	2c 87       	std	Y+12, r18	; 0x0c
 ab8:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 abc:	73 94       	inc	r7
 abe:	2c 85       	ldd	r18, Y+12	; 0x0c
 ac0:	f5 cf       	rjmp	.-22     	; 0xaac <vfprintf+0x2f0>
 ac2:	73 14       	cp	r7, r3
 ac4:	10 f4       	brcc	.+4      	; 0xaca <vfprintf+0x30e>
 ac6:	37 18       	sub	r3, r7
 ac8:	01 c0       	rjmp	.+2      	; 0xacc <vfprintf+0x310>
 aca:	31 2c       	mov	r3, r1
 acc:	24 ff       	sbrs	r18, 4
 ace:	12 c0       	rjmp	.+36     	; 0xaf4 <vfprintf+0x338>
 ad0:	b7 01       	movw	r22, r14
 ad2:	80 e3       	ldi	r24, 0x30	; 48
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	2c 87       	std	Y+12, r18	; 0x0c
 ad8:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 adc:	2c 85       	ldd	r18, Y+12	; 0x0c
 ade:	22 ff       	sbrs	r18, 2
 ae0:	17 c0       	rjmp	.+46     	; 0xb10 <vfprintf+0x354>
 ae2:	21 ff       	sbrs	r18, 1
 ae4:	03 c0       	rjmp	.+6      	; 0xaec <vfprintf+0x330>
 ae6:	88 e5       	ldi	r24, 0x58	; 88
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	02 c0       	rjmp	.+4      	; 0xaf0 <vfprintf+0x334>
 aec:	88 e7       	ldi	r24, 0x78	; 120
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	b7 01       	movw	r22, r14
 af2:	0c c0       	rjmp	.+24     	; 0xb0c <vfprintf+0x350>
 af4:	82 2f       	mov	r24, r18
 af6:	86 78       	andi	r24, 0x86	; 134
 af8:	59 f0       	breq	.+22     	; 0xb10 <vfprintf+0x354>
 afa:	21 fd       	sbrc	r18, 1
 afc:	02 c0       	rjmp	.+4      	; 0xb02 <vfprintf+0x346>
 afe:	80 e2       	ldi	r24, 0x20	; 32
 b00:	01 c0       	rjmp	.+2      	; 0xb04 <vfprintf+0x348>
 b02:	8b e2       	ldi	r24, 0x2B	; 43
 b04:	27 fd       	sbrc	r18, 7
 b06:	8d e2       	ldi	r24, 0x2D	; 45
 b08:	b7 01       	movw	r22, r14
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 b10:	a5 14       	cp	r10, r5
 b12:	38 f4       	brcc	.+14     	; 0xb22 <vfprintf+0x366>
 b14:	b7 01       	movw	r22, r14
 b16:	80 e3       	ldi	r24, 0x30	; 48
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 b1e:	5a 94       	dec	r5
 b20:	f7 cf       	rjmp	.-18     	; 0xb10 <vfprintf+0x354>
 b22:	aa 94       	dec	r10
 b24:	f4 01       	movw	r30, r8
 b26:	ea 0d       	add	r30, r10
 b28:	f1 1d       	adc	r31, r1
 b2a:	80 81       	ld	r24, Z
 b2c:	b7 01       	movw	r22, r14
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 b34:	a1 10       	cpse	r10, r1
 b36:	f5 cf       	rjmp	.-22     	; 0xb22 <vfprintf+0x366>
 b38:	33 20       	and	r3, r3
 b3a:	09 f4       	brne	.+2      	; 0xb3e <vfprintf+0x382>
 b3c:	51 ce       	rjmp	.-862    	; 0x7e0 <vfprintf+0x24>
 b3e:	b7 01       	movw	r22, r14
 b40:	80 e2       	ldi	r24, 0x20	; 32
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	0e 94 10 07 	call	0xe20	; 0xe20 <fputc>
 b48:	3a 94       	dec	r3
 b4a:	f6 cf       	rjmp	.-20     	; 0xb38 <vfprintf+0x37c>
 b4c:	f7 01       	movw	r30, r14
 b4e:	86 81       	ldd	r24, Z+6	; 0x06
 b50:	97 81       	ldd	r25, Z+7	; 0x07
 b52:	02 c0       	rjmp	.+4      	; 0xb58 <vfprintf+0x39c>
 b54:	8f ef       	ldi	r24, 0xFF	; 255
 b56:	9f ef       	ldi	r25, 0xFF	; 255
 b58:	2c 96       	adiw	r28, 0x0c	; 12
 b5a:	e2 e1       	ldi	r30, 0x12	; 18
 b5c:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__epilogue_restores__>

00000b60 <calloc>:
 b60:	0f 93       	push	r16
 b62:	1f 93       	push	r17
 b64:	cf 93       	push	r28
 b66:	df 93       	push	r29
 b68:	86 9f       	mul	r24, r22
 b6a:	80 01       	movw	r16, r0
 b6c:	87 9f       	mul	r24, r23
 b6e:	10 0d       	add	r17, r0
 b70:	96 9f       	mul	r25, r22
 b72:	10 0d       	add	r17, r0
 b74:	11 24       	eor	r1, r1
 b76:	c8 01       	movw	r24, r16
 b78:	0e 94 cc 05 	call	0xb98	; 0xb98 <malloc>
 b7c:	ec 01       	movw	r28, r24
 b7e:	00 97       	sbiw	r24, 0x00	; 0
 b80:	29 f0       	breq	.+10     	; 0xb8c <calloc+0x2c>
 b82:	a8 01       	movw	r20, r16
 b84:	60 e0       	ldi	r22, 0x00	; 0
 b86:	70 e0       	ldi	r23, 0x00	; 0
 b88:	0e 94 fe 06 	call	0xdfc	; 0xdfc <memset>
 b8c:	ce 01       	movw	r24, r28
 b8e:	df 91       	pop	r29
 b90:	cf 91       	pop	r28
 b92:	1f 91       	pop	r17
 b94:	0f 91       	pop	r16
 b96:	08 95       	ret

00000b98 <malloc>:
 b98:	cf 93       	push	r28
 b9a:	df 93       	push	r29
 b9c:	82 30       	cpi	r24, 0x02	; 2
 b9e:	91 05       	cpc	r25, r1
 ba0:	10 f4       	brcc	.+4      	; 0xba6 <malloc+0xe>
 ba2:	82 e0       	ldi	r24, 0x02	; 2
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	e0 91 d4 01 	lds	r30, 0x01D4
 baa:	f0 91 d5 01 	lds	r31, 0x01D5
 bae:	20 e0       	ldi	r18, 0x00	; 0
 bb0:	30 e0       	ldi	r19, 0x00	; 0
 bb2:	a0 e0       	ldi	r26, 0x00	; 0
 bb4:	b0 e0       	ldi	r27, 0x00	; 0
 bb6:	30 97       	sbiw	r30, 0x00	; 0
 bb8:	39 f1       	breq	.+78     	; 0xc08 <malloc+0x70>
 bba:	40 81       	ld	r20, Z
 bbc:	51 81       	ldd	r21, Z+1	; 0x01
 bbe:	48 17       	cp	r20, r24
 bc0:	59 07       	cpc	r21, r25
 bc2:	b8 f0       	brcs	.+46     	; 0xbf2 <malloc+0x5a>
 bc4:	48 17       	cp	r20, r24
 bc6:	59 07       	cpc	r21, r25
 bc8:	71 f4       	brne	.+28     	; 0xbe6 <malloc+0x4e>
 bca:	82 81       	ldd	r24, Z+2	; 0x02
 bcc:	93 81       	ldd	r25, Z+3	; 0x03
 bce:	10 97       	sbiw	r26, 0x00	; 0
 bd0:	29 f0       	breq	.+10     	; 0xbdc <malloc+0x44>
 bd2:	13 96       	adiw	r26, 0x03	; 3
 bd4:	9c 93       	st	X, r25
 bd6:	8e 93       	st	-X, r24
 bd8:	12 97       	sbiw	r26, 0x02	; 2
 bda:	2c c0       	rjmp	.+88     	; 0xc34 <malloc+0x9c>
 bdc:	90 93 d5 01 	sts	0x01D5, r25
 be0:	80 93 d4 01 	sts	0x01D4, r24
 be4:	27 c0       	rjmp	.+78     	; 0xc34 <malloc+0x9c>
 be6:	21 15       	cp	r18, r1
 be8:	31 05       	cpc	r19, r1
 bea:	31 f0       	breq	.+12     	; 0xbf8 <malloc+0x60>
 bec:	42 17       	cp	r20, r18
 bee:	53 07       	cpc	r21, r19
 bf0:	18 f0       	brcs	.+6      	; 0xbf8 <malloc+0x60>
 bf2:	a9 01       	movw	r20, r18
 bf4:	db 01       	movw	r26, r22
 bf6:	01 c0       	rjmp	.+2      	; 0xbfa <malloc+0x62>
 bf8:	ef 01       	movw	r28, r30
 bfa:	9a 01       	movw	r18, r20
 bfc:	bd 01       	movw	r22, r26
 bfe:	df 01       	movw	r26, r30
 c00:	02 80       	ldd	r0, Z+2	; 0x02
 c02:	f3 81       	ldd	r31, Z+3	; 0x03
 c04:	e0 2d       	mov	r30, r0
 c06:	d7 cf       	rjmp	.-82     	; 0xbb6 <malloc+0x1e>
 c08:	21 15       	cp	r18, r1
 c0a:	31 05       	cpc	r19, r1
 c0c:	f9 f0       	breq	.+62     	; 0xc4c <malloc+0xb4>
 c0e:	28 1b       	sub	r18, r24
 c10:	39 0b       	sbc	r19, r25
 c12:	24 30       	cpi	r18, 0x04	; 4
 c14:	31 05       	cpc	r19, r1
 c16:	80 f4       	brcc	.+32     	; 0xc38 <malloc+0xa0>
 c18:	8a 81       	ldd	r24, Y+2	; 0x02
 c1a:	9b 81       	ldd	r25, Y+3	; 0x03
 c1c:	61 15       	cp	r22, r1
 c1e:	71 05       	cpc	r23, r1
 c20:	21 f0       	breq	.+8      	; 0xc2a <malloc+0x92>
 c22:	fb 01       	movw	r30, r22
 c24:	93 83       	std	Z+3, r25	; 0x03
 c26:	82 83       	std	Z+2, r24	; 0x02
 c28:	04 c0       	rjmp	.+8      	; 0xc32 <malloc+0x9a>
 c2a:	90 93 d5 01 	sts	0x01D5, r25
 c2e:	80 93 d4 01 	sts	0x01D4, r24
 c32:	fe 01       	movw	r30, r28
 c34:	32 96       	adiw	r30, 0x02	; 2
 c36:	44 c0       	rjmp	.+136    	; 0xcc0 <malloc+0x128>
 c38:	fe 01       	movw	r30, r28
 c3a:	e2 0f       	add	r30, r18
 c3c:	f3 1f       	adc	r31, r19
 c3e:	81 93       	st	Z+, r24
 c40:	91 93       	st	Z+, r25
 c42:	22 50       	subi	r18, 0x02	; 2
 c44:	31 09       	sbc	r19, r1
 c46:	39 83       	std	Y+1, r19	; 0x01
 c48:	28 83       	st	Y, r18
 c4a:	3a c0       	rjmp	.+116    	; 0xcc0 <malloc+0x128>
 c4c:	20 91 d2 01 	lds	r18, 0x01D2
 c50:	30 91 d3 01 	lds	r19, 0x01D3
 c54:	23 2b       	or	r18, r19
 c56:	41 f4       	brne	.+16     	; 0xc68 <malloc+0xd0>
 c58:	20 91 02 01 	lds	r18, 0x0102
 c5c:	30 91 03 01 	lds	r19, 0x0103
 c60:	30 93 d3 01 	sts	0x01D3, r19
 c64:	20 93 d2 01 	sts	0x01D2, r18
 c68:	20 91 00 01 	lds	r18, 0x0100
 c6c:	30 91 01 01 	lds	r19, 0x0101
 c70:	21 15       	cp	r18, r1
 c72:	31 05       	cpc	r19, r1
 c74:	41 f4       	brne	.+16     	; 0xc86 <malloc+0xee>
 c76:	2d b7       	in	r18, 0x3d	; 61
 c78:	3e b7       	in	r19, 0x3e	; 62
 c7a:	40 91 04 01 	lds	r20, 0x0104
 c7e:	50 91 05 01 	lds	r21, 0x0105
 c82:	24 1b       	sub	r18, r20
 c84:	35 0b       	sbc	r19, r21
 c86:	e0 91 d2 01 	lds	r30, 0x01D2
 c8a:	f0 91 d3 01 	lds	r31, 0x01D3
 c8e:	e2 17       	cp	r30, r18
 c90:	f3 07       	cpc	r31, r19
 c92:	a0 f4       	brcc	.+40     	; 0xcbc <malloc+0x124>
 c94:	2e 1b       	sub	r18, r30
 c96:	3f 0b       	sbc	r19, r31
 c98:	28 17       	cp	r18, r24
 c9a:	39 07       	cpc	r19, r25
 c9c:	78 f0       	brcs	.+30     	; 0xcbc <malloc+0x124>
 c9e:	ac 01       	movw	r20, r24
 ca0:	4e 5f       	subi	r20, 0xFE	; 254
 ca2:	5f 4f       	sbci	r21, 0xFF	; 255
 ca4:	24 17       	cp	r18, r20
 ca6:	35 07       	cpc	r19, r21
 ca8:	48 f0       	brcs	.+18     	; 0xcbc <malloc+0x124>
 caa:	4e 0f       	add	r20, r30
 cac:	5f 1f       	adc	r21, r31
 cae:	50 93 d3 01 	sts	0x01D3, r21
 cb2:	40 93 d2 01 	sts	0x01D2, r20
 cb6:	81 93       	st	Z+, r24
 cb8:	91 93       	st	Z+, r25
 cba:	02 c0       	rjmp	.+4      	; 0xcc0 <malloc+0x128>
 cbc:	e0 e0       	ldi	r30, 0x00	; 0
 cbe:	f0 e0       	ldi	r31, 0x00	; 0
 cc0:	cf 01       	movw	r24, r30
 cc2:	df 91       	pop	r29
 cc4:	cf 91       	pop	r28
 cc6:	08 95       	ret

00000cc8 <free>:
 cc8:	cf 93       	push	r28
 cca:	df 93       	push	r29
 ccc:	00 97       	sbiw	r24, 0x00	; 0
 cce:	09 f4       	brne	.+2      	; 0xcd2 <free+0xa>
 cd0:	87 c0       	rjmp	.+270    	; 0xde0 <free+0x118>
 cd2:	fc 01       	movw	r30, r24
 cd4:	32 97       	sbiw	r30, 0x02	; 2
 cd6:	13 82       	std	Z+3, r1	; 0x03
 cd8:	12 82       	std	Z+2, r1	; 0x02
 cda:	c0 91 d4 01 	lds	r28, 0x01D4
 cde:	d0 91 d5 01 	lds	r29, 0x01D5
 ce2:	20 97       	sbiw	r28, 0x00	; 0
 ce4:	81 f4       	brne	.+32     	; 0xd06 <free+0x3e>
 ce6:	20 81       	ld	r18, Z
 ce8:	31 81       	ldd	r19, Z+1	; 0x01
 cea:	28 0f       	add	r18, r24
 cec:	39 1f       	adc	r19, r25
 cee:	80 91 d2 01 	lds	r24, 0x01D2
 cf2:	90 91 d3 01 	lds	r25, 0x01D3
 cf6:	82 17       	cp	r24, r18
 cf8:	93 07       	cpc	r25, r19
 cfa:	79 f5       	brne	.+94     	; 0xd5a <free+0x92>
 cfc:	f0 93 d3 01 	sts	0x01D3, r31
 d00:	e0 93 d2 01 	sts	0x01D2, r30
 d04:	6d c0       	rjmp	.+218    	; 0xde0 <free+0x118>
 d06:	de 01       	movw	r26, r28
 d08:	20 e0       	ldi	r18, 0x00	; 0
 d0a:	30 e0       	ldi	r19, 0x00	; 0
 d0c:	ae 17       	cp	r26, r30
 d0e:	bf 07       	cpc	r27, r31
 d10:	50 f4       	brcc	.+20     	; 0xd26 <free+0x5e>
 d12:	12 96       	adiw	r26, 0x02	; 2
 d14:	4d 91       	ld	r20, X+
 d16:	5c 91       	ld	r21, X
 d18:	13 97       	sbiw	r26, 0x03	; 3
 d1a:	9d 01       	movw	r18, r26
 d1c:	41 15       	cp	r20, r1
 d1e:	51 05       	cpc	r21, r1
 d20:	09 f1       	breq	.+66     	; 0xd64 <free+0x9c>
 d22:	da 01       	movw	r26, r20
 d24:	f3 cf       	rjmp	.-26     	; 0xd0c <free+0x44>
 d26:	b3 83       	std	Z+3, r27	; 0x03
 d28:	a2 83       	std	Z+2, r26	; 0x02
 d2a:	40 81       	ld	r20, Z
 d2c:	51 81       	ldd	r21, Z+1	; 0x01
 d2e:	84 0f       	add	r24, r20
 d30:	95 1f       	adc	r25, r21
 d32:	8a 17       	cp	r24, r26
 d34:	9b 07       	cpc	r25, r27
 d36:	71 f4       	brne	.+28     	; 0xd54 <free+0x8c>
 d38:	8d 91       	ld	r24, X+
 d3a:	9c 91       	ld	r25, X
 d3c:	11 97       	sbiw	r26, 0x01	; 1
 d3e:	84 0f       	add	r24, r20
 d40:	95 1f       	adc	r25, r21
 d42:	02 96       	adiw	r24, 0x02	; 2
 d44:	91 83       	std	Z+1, r25	; 0x01
 d46:	80 83       	st	Z, r24
 d48:	12 96       	adiw	r26, 0x02	; 2
 d4a:	8d 91       	ld	r24, X+
 d4c:	9c 91       	ld	r25, X
 d4e:	13 97       	sbiw	r26, 0x03	; 3
 d50:	93 83       	std	Z+3, r25	; 0x03
 d52:	82 83       	std	Z+2, r24	; 0x02
 d54:	21 15       	cp	r18, r1
 d56:	31 05       	cpc	r19, r1
 d58:	29 f4       	brne	.+10     	; 0xd64 <free+0x9c>
 d5a:	f0 93 d5 01 	sts	0x01D5, r31
 d5e:	e0 93 d4 01 	sts	0x01D4, r30
 d62:	3e c0       	rjmp	.+124    	; 0xde0 <free+0x118>
 d64:	d9 01       	movw	r26, r18
 d66:	13 96       	adiw	r26, 0x03	; 3
 d68:	fc 93       	st	X, r31
 d6a:	ee 93       	st	-X, r30
 d6c:	12 97       	sbiw	r26, 0x02	; 2
 d6e:	4d 91       	ld	r20, X+
 d70:	5d 91       	ld	r21, X+
 d72:	a4 0f       	add	r26, r20
 d74:	b5 1f       	adc	r27, r21
 d76:	ea 17       	cp	r30, r26
 d78:	fb 07       	cpc	r31, r27
 d7a:	79 f4       	brne	.+30     	; 0xd9a <free+0xd2>
 d7c:	80 81       	ld	r24, Z
 d7e:	91 81       	ldd	r25, Z+1	; 0x01
 d80:	84 0f       	add	r24, r20
 d82:	95 1f       	adc	r25, r21
 d84:	02 96       	adiw	r24, 0x02	; 2
 d86:	d9 01       	movw	r26, r18
 d88:	11 96       	adiw	r26, 0x01	; 1
 d8a:	9c 93       	st	X, r25
 d8c:	8e 93       	st	-X, r24
 d8e:	82 81       	ldd	r24, Z+2	; 0x02
 d90:	93 81       	ldd	r25, Z+3	; 0x03
 d92:	13 96       	adiw	r26, 0x03	; 3
 d94:	9c 93       	st	X, r25
 d96:	8e 93       	st	-X, r24
 d98:	12 97       	sbiw	r26, 0x02	; 2
 d9a:	e0 e0       	ldi	r30, 0x00	; 0
 d9c:	f0 e0       	ldi	r31, 0x00	; 0
 d9e:	8a 81       	ldd	r24, Y+2	; 0x02
 da0:	9b 81       	ldd	r25, Y+3	; 0x03
 da2:	00 97       	sbiw	r24, 0x00	; 0
 da4:	19 f0       	breq	.+6      	; 0xdac <free+0xe4>
 da6:	fe 01       	movw	r30, r28
 da8:	ec 01       	movw	r28, r24
 daa:	f9 cf       	rjmp	.-14     	; 0xd9e <free+0xd6>
 dac:	ce 01       	movw	r24, r28
 dae:	02 96       	adiw	r24, 0x02	; 2
 db0:	28 81       	ld	r18, Y
 db2:	39 81       	ldd	r19, Y+1	; 0x01
 db4:	82 0f       	add	r24, r18
 db6:	93 1f       	adc	r25, r19
 db8:	20 91 d2 01 	lds	r18, 0x01D2
 dbc:	30 91 d3 01 	lds	r19, 0x01D3
 dc0:	28 17       	cp	r18, r24
 dc2:	39 07       	cpc	r19, r25
 dc4:	69 f4       	brne	.+26     	; 0xde0 <free+0x118>
 dc6:	30 97       	sbiw	r30, 0x00	; 0
 dc8:	29 f4       	brne	.+10     	; 0xdd4 <free+0x10c>
 dca:	10 92 d5 01 	sts	0x01D5, r1
 dce:	10 92 d4 01 	sts	0x01D4, r1
 dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <free+0x110>
 dd4:	13 82       	std	Z+3, r1	; 0x03
 dd6:	12 82       	std	Z+2, r1	; 0x02
 dd8:	d0 93 d3 01 	sts	0x01D3, r29
 ddc:	c0 93 d2 01 	sts	0x01D2, r28
 de0:	df 91       	pop	r29
 de2:	cf 91       	pop	r28
 de4:	08 95       	ret

00000de6 <strnlen_P>:
 de6:	fc 01       	movw	r30, r24
 de8:	05 90       	lpm	r0, Z+
 dea:	61 50       	subi	r22, 0x01	; 1
 dec:	70 40       	sbci	r23, 0x00	; 0
 dee:	01 10       	cpse	r0, r1
 df0:	d8 f7       	brcc	.-10     	; 0xde8 <strnlen_P+0x2>
 df2:	80 95       	com	r24
 df4:	90 95       	com	r25
 df6:	8e 0f       	add	r24, r30
 df8:	9f 1f       	adc	r25, r31
 dfa:	08 95       	ret

00000dfc <memset>:
 dfc:	dc 01       	movw	r26, r24
 dfe:	01 c0       	rjmp	.+2      	; 0xe02 <memset+0x6>
 e00:	6d 93       	st	X+, r22
 e02:	41 50       	subi	r20, 0x01	; 1
 e04:	50 40       	sbci	r21, 0x00	; 0
 e06:	e0 f7       	brcc	.-8      	; 0xe00 <memset+0x4>
 e08:	08 95       	ret

00000e0a <strnlen>:
 e0a:	fc 01       	movw	r30, r24
 e0c:	61 50       	subi	r22, 0x01	; 1
 e0e:	70 40       	sbci	r23, 0x00	; 0
 e10:	01 90       	ld	r0, Z+
 e12:	01 10       	cpse	r0, r1
 e14:	d8 f7       	brcc	.-10     	; 0xe0c <strnlen+0x2>
 e16:	80 95       	com	r24
 e18:	90 95       	com	r25
 e1a:	8e 0f       	add	r24, r30
 e1c:	9f 1f       	adc	r25, r31
 e1e:	08 95       	ret

00000e20 <fputc>:
 e20:	0f 93       	push	r16
 e22:	1f 93       	push	r17
 e24:	cf 93       	push	r28
 e26:	df 93       	push	r29
 e28:	18 2f       	mov	r17, r24
 e2a:	09 2f       	mov	r16, r25
 e2c:	eb 01       	movw	r28, r22
 e2e:	8b 81       	ldd	r24, Y+3	; 0x03
 e30:	81 fd       	sbrc	r24, 1
 e32:	03 c0       	rjmp	.+6      	; 0xe3a <fputc+0x1a>
 e34:	8f ef       	ldi	r24, 0xFF	; 255
 e36:	9f ef       	ldi	r25, 0xFF	; 255
 e38:	20 c0       	rjmp	.+64     	; 0xe7a <fputc+0x5a>
 e3a:	82 ff       	sbrs	r24, 2
 e3c:	10 c0       	rjmp	.+32     	; 0xe5e <fputc+0x3e>
 e3e:	4e 81       	ldd	r20, Y+6	; 0x06
 e40:	5f 81       	ldd	r21, Y+7	; 0x07
 e42:	2c 81       	ldd	r18, Y+4	; 0x04
 e44:	3d 81       	ldd	r19, Y+5	; 0x05
 e46:	42 17       	cp	r20, r18
 e48:	53 07       	cpc	r21, r19
 e4a:	7c f4       	brge	.+30     	; 0xe6a <fputc+0x4a>
 e4c:	e8 81       	ld	r30, Y
 e4e:	f9 81       	ldd	r31, Y+1	; 0x01
 e50:	9f 01       	movw	r18, r30
 e52:	2f 5f       	subi	r18, 0xFF	; 255
 e54:	3f 4f       	sbci	r19, 0xFF	; 255
 e56:	39 83       	std	Y+1, r19	; 0x01
 e58:	28 83       	st	Y, r18
 e5a:	10 83       	st	Z, r17
 e5c:	06 c0       	rjmp	.+12     	; 0xe6a <fputc+0x4a>
 e5e:	e8 85       	ldd	r30, Y+8	; 0x08
 e60:	f9 85       	ldd	r31, Y+9	; 0x09
 e62:	81 2f       	mov	r24, r17
 e64:	09 95       	icall
 e66:	89 2b       	or	r24, r25
 e68:	29 f7       	brne	.-54     	; 0xe34 <fputc+0x14>
 e6a:	2e 81       	ldd	r18, Y+6	; 0x06
 e6c:	3f 81       	ldd	r19, Y+7	; 0x07
 e6e:	2f 5f       	subi	r18, 0xFF	; 255
 e70:	3f 4f       	sbci	r19, 0xFF	; 255
 e72:	3f 83       	std	Y+7, r19	; 0x07
 e74:	2e 83       	std	Y+6, r18	; 0x06
 e76:	81 2f       	mov	r24, r17
 e78:	90 2f       	mov	r25, r16
 e7a:	df 91       	pop	r29
 e7c:	cf 91       	pop	r28
 e7e:	1f 91       	pop	r17
 e80:	0f 91       	pop	r16
 e82:	08 95       	ret

00000e84 <__ultoa_invert>:
 e84:	fa 01       	movw	r30, r20
 e86:	aa 27       	eor	r26, r26
 e88:	28 30       	cpi	r18, 0x08	; 8
 e8a:	51 f1       	breq	.+84     	; 0xee0 <__ultoa_invert+0x5c>
 e8c:	20 31       	cpi	r18, 0x10	; 16
 e8e:	81 f1       	breq	.+96     	; 0xef0 <__ultoa_invert+0x6c>
 e90:	e8 94       	clt
 e92:	6f 93       	push	r22
 e94:	6e 7f       	andi	r22, 0xFE	; 254
 e96:	6e 5f       	subi	r22, 0xFE	; 254
 e98:	7f 4f       	sbci	r23, 0xFF	; 255
 e9a:	8f 4f       	sbci	r24, 0xFF	; 255
 e9c:	9f 4f       	sbci	r25, 0xFF	; 255
 e9e:	af 4f       	sbci	r26, 0xFF	; 255
 ea0:	b1 e0       	ldi	r27, 0x01	; 1
 ea2:	3e d0       	rcall	.+124    	; 0xf20 <__ultoa_invert+0x9c>
 ea4:	b4 e0       	ldi	r27, 0x04	; 4
 ea6:	3c d0       	rcall	.+120    	; 0xf20 <__ultoa_invert+0x9c>
 ea8:	67 0f       	add	r22, r23
 eaa:	78 1f       	adc	r23, r24
 eac:	89 1f       	adc	r24, r25
 eae:	9a 1f       	adc	r25, r26
 eb0:	a1 1d       	adc	r26, r1
 eb2:	68 0f       	add	r22, r24
 eb4:	79 1f       	adc	r23, r25
 eb6:	8a 1f       	adc	r24, r26
 eb8:	91 1d       	adc	r25, r1
 eba:	a1 1d       	adc	r26, r1
 ebc:	6a 0f       	add	r22, r26
 ebe:	71 1d       	adc	r23, r1
 ec0:	81 1d       	adc	r24, r1
 ec2:	91 1d       	adc	r25, r1
 ec4:	a1 1d       	adc	r26, r1
 ec6:	20 d0       	rcall	.+64     	; 0xf08 <__ultoa_invert+0x84>
 ec8:	09 f4       	brne	.+2      	; 0xecc <__ultoa_invert+0x48>
 eca:	68 94       	set
 ecc:	3f 91       	pop	r19
 ece:	2a e0       	ldi	r18, 0x0A	; 10
 ed0:	26 9f       	mul	r18, r22
 ed2:	11 24       	eor	r1, r1
 ed4:	30 19       	sub	r19, r0
 ed6:	30 5d       	subi	r19, 0xD0	; 208
 ed8:	31 93       	st	Z+, r19
 eda:	de f6       	brtc	.-74     	; 0xe92 <__ultoa_invert+0xe>
 edc:	cf 01       	movw	r24, r30
 ede:	08 95       	ret
 ee0:	46 2f       	mov	r20, r22
 ee2:	47 70       	andi	r20, 0x07	; 7
 ee4:	40 5d       	subi	r20, 0xD0	; 208
 ee6:	41 93       	st	Z+, r20
 ee8:	b3 e0       	ldi	r27, 0x03	; 3
 eea:	0f d0       	rcall	.+30     	; 0xf0a <__ultoa_invert+0x86>
 eec:	c9 f7       	brne	.-14     	; 0xee0 <__ultoa_invert+0x5c>
 eee:	f6 cf       	rjmp	.-20     	; 0xedc <__ultoa_invert+0x58>
 ef0:	46 2f       	mov	r20, r22
 ef2:	4f 70       	andi	r20, 0x0F	; 15
 ef4:	40 5d       	subi	r20, 0xD0	; 208
 ef6:	4a 33       	cpi	r20, 0x3A	; 58
 ef8:	18 f0       	brcs	.+6      	; 0xf00 <__ultoa_invert+0x7c>
 efa:	49 5d       	subi	r20, 0xD9	; 217
 efc:	31 fd       	sbrc	r19, 1
 efe:	40 52       	subi	r20, 0x20	; 32
 f00:	41 93       	st	Z+, r20
 f02:	02 d0       	rcall	.+4      	; 0xf08 <__ultoa_invert+0x84>
 f04:	a9 f7       	brne	.-22     	; 0xef0 <__ultoa_invert+0x6c>
 f06:	ea cf       	rjmp	.-44     	; 0xedc <__ultoa_invert+0x58>
 f08:	b4 e0       	ldi	r27, 0x04	; 4
 f0a:	a6 95       	lsr	r26
 f0c:	97 95       	ror	r25
 f0e:	87 95       	ror	r24
 f10:	77 95       	ror	r23
 f12:	67 95       	ror	r22
 f14:	ba 95       	dec	r27
 f16:	c9 f7       	brne	.-14     	; 0xf0a <__ultoa_invert+0x86>
 f18:	00 97       	sbiw	r24, 0x00	; 0
 f1a:	61 05       	cpc	r22, r1
 f1c:	71 05       	cpc	r23, r1
 f1e:	08 95       	ret
 f20:	9b 01       	movw	r18, r22
 f22:	ac 01       	movw	r20, r24
 f24:	0a 2e       	mov	r0, r26
 f26:	06 94       	lsr	r0
 f28:	57 95       	ror	r21
 f2a:	47 95       	ror	r20
 f2c:	37 95       	ror	r19
 f2e:	27 95       	ror	r18
 f30:	ba 95       	dec	r27
 f32:	c9 f7       	brne	.-14     	; 0xf26 <__ultoa_invert+0xa2>
 f34:	62 0f       	add	r22, r18
 f36:	73 1f       	adc	r23, r19
 f38:	84 1f       	adc	r24, r20
 f3a:	95 1f       	adc	r25, r21
 f3c:	a0 1d       	adc	r26, r0
 f3e:	08 95       	ret

00000f40 <__prologue_saves__>:
 f40:	2f 92       	push	r2
 f42:	3f 92       	push	r3
 f44:	4f 92       	push	r4
 f46:	5f 92       	push	r5
 f48:	6f 92       	push	r6
 f4a:	7f 92       	push	r7
 f4c:	8f 92       	push	r8
 f4e:	9f 92       	push	r9
 f50:	af 92       	push	r10
 f52:	bf 92       	push	r11
 f54:	cf 92       	push	r12
 f56:	df 92       	push	r13
 f58:	ef 92       	push	r14
 f5a:	ff 92       	push	r15
 f5c:	0f 93       	push	r16
 f5e:	1f 93       	push	r17
 f60:	cf 93       	push	r28
 f62:	df 93       	push	r29
 f64:	cd b7       	in	r28, 0x3d	; 61
 f66:	de b7       	in	r29, 0x3e	; 62
 f68:	ca 1b       	sub	r28, r26
 f6a:	db 0b       	sbc	r29, r27
 f6c:	0f b6       	in	r0, 0x3f	; 63
 f6e:	f8 94       	cli
 f70:	de bf       	out	0x3e, r29	; 62
 f72:	0f be       	out	0x3f, r0	; 63
 f74:	cd bf       	out	0x3d, r28	; 61
 f76:	09 94       	ijmp

00000f78 <__epilogue_restores__>:
 f78:	2a 88       	ldd	r2, Y+18	; 0x12
 f7a:	39 88       	ldd	r3, Y+17	; 0x11
 f7c:	48 88       	ldd	r4, Y+16	; 0x10
 f7e:	5f 84       	ldd	r5, Y+15	; 0x0f
 f80:	6e 84       	ldd	r6, Y+14	; 0x0e
 f82:	7d 84       	ldd	r7, Y+13	; 0x0d
 f84:	8c 84       	ldd	r8, Y+12	; 0x0c
 f86:	9b 84       	ldd	r9, Y+11	; 0x0b
 f88:	aa 84       	ldd	r10, Y+10	; 0x0a
 f8a:	b9 84       	ldd	r11, Y+9	; 0x09
 f8c:	c8 84       	ldd	r12, Y+8	; 0x08
 f8e:	df 80       	ldd	r13, Y+7	; 0x07
 f90:	ee 80       	ldd	r14, Y+6	; 0x06
 f92:	fd 80       	ldd	r15, Y+5	; 0x05
 f94:	0c 81       	ldd	r16, Y+4	; 0x04
 f96:	1b 81       	ldd	r17, Y+3	; 0x03
 f98:	aa 81       	ldd	r26, Y+2	; 0x02
 f9a:	b9 81       	ldd	r27, Y+1	; 0x01
 f9c:	ce 0f       	add	r28, r30
 f9e:	d1 1d       	adc	r29, r1
 fa0:	0f b6       	in	r0, 0x3f	; 63
 fa2:	f8 94       	cli
 fa4:	de bf       	out	0x3e, r29	; 62
 fa6:	0f be       	out	0x3f, r0	; 63
 fa8:	cd bf       	out	0x3d, r28	; 61
 faa:	ed 01       	movw	r28, r26
 fac:	08 95       	ret

00000fae <_exit>:
 fae:	f8 94       	cli

00000fb0 <__stop_program>:
 fb0:	ff cf       	rjmp	.-2      	; 0xfb0 <__stop_program>
