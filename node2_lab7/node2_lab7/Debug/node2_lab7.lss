
node2_lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800200  0000107e  00001112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000107e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002b0  008002b0  000011c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b02  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000130f  00000000  00000000  00002eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c3e  00000000  00000000  000041e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00004e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007af  00000000  00000000  0000515c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000841  00000000  00000000  0000590b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000614c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	31 c1       	rjmp	.+610    	; 0x270 <__vector_3>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e7       	ldi	r30, 0x7E	; 126
      fc:	f0 e1       	ldi	r31, 0x10	; 16
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3b       	cpi	r26, 0xB0	; 176
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a0 eb       	ldi	r26, 0xB0	; 176
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 3b       	cpi	r26, 0xBA	; 186
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	ba d1       	rcall	.+884    	; 0x494 <main>
     120:	ac c7       	rjmp	.+3928   	; 0x107a <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:
		MCP_write(i, msgPtr->data[dataIterator]);
		dataIterator++;
	}
	MCP_requestToSend(0);
	// Transmission of CAN msg will start when the device detects that the bus is available...
}
     124:	cf 93       	push	r28
     126:	c8 2f       	mov	r28, r24
     128:	0e d1       	rcall	.+540    	; 0x346 <MCP_init>
     12a:	65 e0       	ldi	r22, 0x05	; 5
     12c:	8b e2       	ldi	r24, 0x2B	; 43
     12e:	19 d1       	rcall	.+562    	; 0x362 <MCP_write>
     130:	45 e8       	ldi	r20, 0x85	; 133
     132:	65 e0       	ldi	r22, 0x05	; 5
     134:	8b e2       	ldi	r24, 0x2B	; 43
     136:	24 d1       	rcall	.+584    	; 0x380 <MCP_bitModify>
     138:	8b e2       	ldi	r24, 0x2B	; 43
     13a:	08 d1       	rcall	.+528    	; 0x34c <MCP_read>
     13c:	1f 92       	push	r1
     13e:	8f 93       	push	r24
     140:	86 e0       	ldi	r24, 0x06	; 6
     142:	92 e0       	ldi	r25, 0x02	; 2
     144:	9f 93       	push	r25
     146:	8f 93       	push	r24
     148:	96 d3       	rcall	.+1836   	; 0x876 <printf>
     14a:	4c 2f       	mov	r20, r28
     14c:	60 ee       	ldi	r22, 0xE0	; 224
     14e:	8f e0       	ldi	r24, 0x0F	; 15
     150:	17 d1       	rcall	.+558    	; 0x380 <MCP_bitModify>
     152:	40 e6       	ldi	r20, 0x60	; 96
     154:	60 e6       	ldi	r22, 0x60	; 96
     156:	80 e6       	ldi	r24, 0x60	; 96
     158:	13 d1       	rcall	.+550    	; 0x380 <MCP_bitModify>
     15a:	8f e0       	ldi	r24, 0x0F	; 15
     15c:	f7 d0       	rcall	.+494    	; 0x34c <MCP_read>
     15e:	0f 90       	pop	r0
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	86 ff       	sbrs	r24, 6
     168:	07 c0       	rjmp	.+14     	; 0x178 <CAN_init+0x54>
     16a:	82 e2       	ldi	r24, 0x22	; 34
     16c:	92 e0       	ldi	r25, 0x02	; 2
     16e:	9f 93       	push	r25
     170:	8f 93       	push	r24
     172:	81 d3       	rcall	.+1794   	; 0x876 <printf>
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	cf 91       	pop	r28
     17a:	08 95       	ret

0000017c <CAN_message_recieve>:

msg_t CAN_message_recieve(void) {
     17c:	7f 92       	push	r7
     17e:	8f 92       	push	r8
     180:	9f 92       	push	r9
     182:	af 92       	push	r10
     184:	bf 92       	push	r11
     186:	cf 92       	push	r12
     188:	df 92       	push	r13
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
     19a:	2a 97       	sbiw	r28, 0x0a	; 10
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	f8 94       	cli
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	5c 01       	movw	r10, r24
	msg_t msg;
	
	// Read ID from RXB0SIDH and RXB0SIDL
	uint8_t upperId = MCP_read(MCP_RXB0CTRL + 1);
     1a8:	81 e6       	ldi	r24, 0x61	; 97
     1aa:	d0 d0       	rcall	.+416    	; 0x34c <MCP_read>
     1ac:	78 2e       	mov	r7, r24
	
	msg.id = upperId ;
	
	// Read length from RXB0DLC
	msg.length = MCP_read(MCP_RXB0CTRL + 5);
     1ae:	85 e6       	ldi	r24, 0x65	; 101
     1b0:	cd d0       	rcall	.+410    	; 0x34c <MCP_read>
     1b2:	08 2f       	mov	r16, r24
	
	// Read data
	int dataIterator = 0;
	for (uint8_t i = MCP_RXB0CTRL + 6; i <= MCP_RXB0CTRL + 6 + msg.length; i++) {
     1b4:	c8 2e       	mov	r12, r24
     1b6:	d1 2c       	mov	r13, r1
     1b8:	26 e6       	ldi	r18, 0x66	; 102
     1ba:	c2 0e       	add	r12, r18
     1bc:	d1 1c       	adc	r13, r1
     1be:	36 e6       	ldi	r19, 0x66	; 102
     1c0:	c3 16       	cp	r12, r19
     1c2:	d1 04       	cpc	r13, r1
     1c4:	c4 f0       	brlt	.+48     	; 0x1f6 <CAN_message_recieve+0x7a>
     1c6:	7e 01       	movw	r14, r28
     1c8:	83 e0       	ldi	r24, 0x03	; 3
     1ca:	e8 0e       	add	r14, r24
     1cc:	f1 1c       	adc	r15, r1
     1ce:	16 e6       	ldi	r17, 0x66	; 102
     1d0:	ce 01       	movw	r24, r28
     1d2:	80 95       	com	r24
     1d4:	90 95       	com	r25
     1d6:	fc 01       	movw	r30, r24
     1d8:	ec 59       	subi	r30, 0x9C	; 156
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
		msg.data[dataIterator] = MCP_read(i);
     1dc:	4f 01       	movw	r8, r30
     1de:	81 2f       	mov	r24, r17
     1e0:	b5 d0       	rcall	.+362    	; 0x34c <MCP_read>
     1e2:	f7 01       	movw	r30, r14
     1e4:	81 93       	st	Z+, r24
     1e6:	7f 01       	movw	r14, r30
	// Read length from RXB0DLC
	msg.length = MCP_read(MCP_RXB0CTRL + 5);
	
	// Read data
	int dataIterator = 0;
	for (uint8_t i = MCP_RXB0CTRL + 6; i <= MCP_RXB0CTRL + 6 + msg.length; i++) {
     1e8:	1f 5f       	subi	r17, 0xFF	; 255
     1ea:	c4 01       	movw	r24, r8
     1ec:	8e 0f       	add	r24, r30
     1ee:	9f 1f       	adc	r25, r31
     1f0:	c8 16       	cp	r12, r24
     1f2:	d9 06       	cpc	r13, r25
     1f4:	a4 f7       	brge	.-24     	; 0x1de <CAN_message_recieve+0x62>
		msg.data[dataIterator] = MCP_read(i);
		dataIterator++;
	}
	return msg;
     1f6:	79 82       	std	Y+1, r7	; 0x01
     1f8:	0a 83       	std	Y+2, r16	; 0x02
     1fa:	8a e0       	ldi	r24, 0x0A	; 10
     1fc:	fe 01       	movw	r30, r28
     1fe:	31 96       	adiw	r30, 0x01	; 1
     200:	d5 01       	movw	r26, r10
     202:	01 90       	ld	r0, Z+
     204:	0d 92       	st	X+, r0
     206:	8a 95       	dec	r24
     208:	e1 f7       	brne	.-8      	; 0x202 <CAN_message_recieve+0x86>
} 
     20a:	c5 01       	movw	r24, r10
     20c:	2a 96       	adiw	r28, 0x0a	; 10
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	f8 94       	cli
     212:	de bf       	out	0x3e, r29	; 62
     214:	0f be       	out	0x3f, r0	; 63
     216:	cd bf       	out	0x3d, r28	; 61
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	1f 91       	pop	r17
     21e:	0f 91       	pop	r16
     220:	ff 90       	pop	r15
     222:	ef 90       	pop	r14
     224:	df 90       	pop	r13
     226:	cf 90       	pop	r12
     228:	bf 90       	pop	r11
     22a:	af 90       	pop	r10
     22c:	9f 90       	pop	r9
     22e:	8f 90       	pop	r8
     230:	7f 90       	pop	r7
     232:	08 95       	ret

00000234 <IR_init>:

void IR_init(void) {
	// Initialization of the internal ACD of the atmega2560 (convert analog signals [0, 2.56]V to digital signals [0-255]) 
	
	// Set PF0 (ADC0) as input
	DDRF &= ~(1 << PF0);
     234:	80 98       	cbi	0x10, 0	; 16
	
	// Set internal 2.56 voltage reference, set ADC0 as input (MUX5 = 0, MUX4:0 = 0), and left adjust the result of the conversion in the ADCH register
	ADMUX |= (1 << REFS1) | (1 << REFS0) | (1 << ADLAR);
     236:	ec e7       	ldi	r30, 0x7C	; 124
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	80 6e       	ori	r24, 0xE0	; 224
     23e:	80 83       	st	Z, r24
	
	// Set ADC prescaler to a division factor of 32 (0.026 ms for each new sample), enable ADC auto trigger (free running mode set by default)
	ADCSRA |= (1 << ADPS2) | (1 << ADPS0) | (1 << ADATE);
     240:	ea e7       	ldi	r30, 0x7A	; 122
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	85 62       	ori	r24, 0x25	; 37
     248:	80 83       	st	Z, r24
	
	// Enable the ADC
	ADCSRA |= (1 << ADEN) | (1 << ADSC);
     24a:	80 81       	ld	r24, Z
     24c:	80 6c       	ori	r24, 0xC0	; 192
     24e:	80 83       	st	Z, r24
     250:	08 95       	ret

00000252 <IR_read>:
}

uint8_t IR_read(void) {
	// For 8-bit resolution, we only need to read ADCH and not ADCL
	int value = ADCH;
     252:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		//printf("hallo");
	//	value += ADCH;
	//}
	return value;
	// Return the average value of the digital signal over 4 A-D conversions (digital filter to reduce noise)
     256:	08 95       	ret

00000258 <INTERRUPT_init>:
volatile int ADC_INTERRUPT_READY = 0;
//volatile int SPI_TRANSMISSION_COMPLETE = 0;

void INTERRUPT_init() {
	// disable global interrupts (set SREG register)
	cli();
     258:	f8 94       	cli
	
	// The falling edge of INT2 generates an interrupt request
	EICRA &= ~(1 << ISC20);
     25a:	e9 e6       	ldi	r30, 0x69	; 105
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	8f 7e       	andi	r24, 0xEF	; 239
     262:	80 83       	st	Z, r24
	EICRA |= (1 << ISC21); 
     264:	80 81       	ld	r24, Z
     266:	80 62       	ori	r24, 0x20	; 32
     268:	80 83       	st	Z, r24
	
	// Enable interrupt on INT2
	EIMSK |= (1 << INT2);
     26a:	ea 9a       	sbi	0x1d, 2	; 29
		
	// Enable global interrupts (set SREG register)
	sei();
     26c:	78 94       	sei
     26e:	08 95       	ret

00000270 <__vector_3>:
}


// CAN interrupts
ISR(INT2_vect) {
     270:	1f 92       	push	r1
     272:	0f 92       	push	r0
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	0f 92       	push	r0
     278:	11 24       	eor	r1, r1
     27a:	0b b6       	in	r0, 0x3b	; 59
     27c:	0f 92       	push	r0
     27e:	2f 93       	push	r18
     280:	3f 93       	push	r19
     282:	4f 93       	push	r20
     284:	5f 93       	push	r21
     286:	6f 93       	push	r22
     288:	7f 93       	push	r23
     28a:	8f 93       	push	r24
     28c:	9f 93       	push	r25
     28e:	af 93       	push	r26
     290:	bf 93       	push	r27
     292:	ef 93       	push	r30
     294:	ff 93       	push	r31
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	2a 97       	sbiw	r28, 0x0a	; 10
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61
	if (MCP_read(MCP_CANINTF) & MCP_TX0IF) {
     2a4:	8c e2       	ldi	r24, 0x2C	; 44
     2a6:	52 d0       	rcall	.+164    	; 0x34c <MCP_read>
     2a8:	82 ff       	sbrs	r24, 2
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <__vector_3+0x44>
		//printf("Message sendt succesfully\n\r");
		
		// Reset transmit flag
		MCP_bitModify(MCP_CANINTF, MCP_TX0IF, 0);
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	64 e0       	ldi	r22, 0x04	; 4
     2b0:	8c e2       	ldi	r24, 0x2C	; 44
     2b2:	66 d0       	rcall	.+204    	; 0x380 <MCP_bitModify>
	}
	// Message recieved at recieve buffer 0
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF) {
     2b4:	8c e2       	ldi	r24, 0x2C	; 44
     2b6:	4a d0       	rcall	.+148    	; 0x34c <MCP_read>
     2b8:	80 ff       	sbrs	r24, 0
     2ba:	23 c0       	rjmp	.+70     	; 0x302 <__vector_3+0x92>
		struct CAN_message msg = CAN_message_recieve();
     2bc:	ce 01       	movw	r24, r28
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	5d df       	rcall	.-326    	; 0x17c <CAN_message_recieve>
     2c2:	99 81       	ldd	r25, Y+1	; 0x01
     2c4:	8b 81       	ldd	r24, Y+3	; 0x03
     2c6:	91 30       	cpi	r25, 0x01	; 1
		//printf("Message recieved with ID: %#X\n\r", msg.id);
		if (msg.id == JOYSTICK_DIR_ID) {
     2c8:	61 f4       	brne	.+24     	; 0x2e2 <__vector_3+0x72>
     2ca:	1f 92       	push	r1
			printf("JOYSTICK: %d\n\r", msg.data[0]);
     2cc:	8f 93       	push	r24
     2ce:	84 e4       	ldi	r24, 0x44	; 68
     2d0:	92 e0       	ldi	r25, 0x02	; 2
     2d2:	9f 93       	push	r25
     2d4:	8f 93       	push	r24
     2d6:	cf d2       	rcall	.+1438   	; 0x876 <printf>
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	0c c0       	rjmp	.+24     	; 0x2fa <__vector_3+0x8a>
		}
		else if (msg.id == JOYSTICK_POS_ID){
     2e2:	92 30       	cpi	r25, 0x02	; 2
     2e4:	19 f4       	brne	.+6      	; 0x2ec <__vector_3+0x7c>
			//printf("Joystick x pos = %d\n\r", msg.data[0]);
			PWM_set_duty_cycle(msg.data[0]);
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	71 d0       	rcall	.+226    	; 0x3cc <PWM_set_duty_cycle>
     2ea:	07 c0       	rjmp	.+14     	; 0x2fa <__vector_3+0x8a>
		}
		else {
			printf("CANNOT IDENTIFY MESSAGE");
     2ec:	83 e5       	ldi	r24, 0x53	; 83
     2ee:	92 e0       	ldi	r25, 0x02	; 2
     2f0:	9f 93       	push	r25
     2f2:	8f 93       	push	r24
     2f4:	c0 d2       	rcall	.+1408   	; 0x876 <printf>
     2f6:	0f 90       	pop	r0
		}
	
		// Reset recieve flag
		MCP_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
     2f8:	0f 90       	pop	r0
     2fa:	40 e0       	ldi	r20, 0x00	; 0
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	8c e2       	ldi	r24, 0x2C	; 44
     300:	3f d0       	rcall	.+126    	; 0x380 <MCP_bitModify>
	}
	if (MCP_read(MCP_CANINTF) & MCP_MERRF) {
     302:	8c e2       	ldi	r24, 0x2C	; 44
     304:	23 d0       	rcall	.+70     	; 0x34c <MCP_read>
     306:	2a 96       	adiw	r28, 0x0a	; 10
		//printf("CAN BUS ERROR!");
	}
}
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	de bf       	out	0x3e, r29	; 62
     30e:	0f be       	out	0x3f, r0	; 63
     310:	cd bf       	out	0x3d, r28	; 61
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	ff 91       	pop	r31
     318:	ef 91       	pop	r30
     31a:	bf 91       	pop	r27
     31c:	af 91       	pop	r26
     31e:	9f 91       	pop	r25
     320:	8f 91       	pop	r24
     322:	7f 91       	pop	r23
     324:	6f 91       	pop	r22
     326:	5f 91       	pop	r21
     328:	4f 91       	pop	r20
     32a:	3f 91       	pop	r19
     32c:	2f 91       	pop	r18
     32e:	0f 90       	pop	r0
     330:	0b be       	out	0x3b, r0	; 59
     332:	0f 90       	pop	r0
     334:	0f be       	out	0x3f, r0	; 63
     336:	0f 90       	pop	r0
     338:	1f 90       	pop	r1
     33a:	18 95       	reti

0000033c <MCP_reset>:
     33c:	2f 98       	cbi	0x05, 7	; 5
	else {
		SPI_transmit(MCP_RTS_ALL);
	}
	
	// Deselect CAN controller
	PORTB |= (1 << PB7);
     33e:	80 ec       	ldi	r24, 0xC0	; 192
     340:	7d d0       	rcall	.+250    	; 0x43c <SPI_transmit>
     342:	2f 9a       	sbi	0x05, 7	; 5
     344:	08 95       	ret

00000346 <MCP_init>:
     346:	66 d0       	rcall	.+204    	; 0x414 <SPI_MasterInit>
     348:	f9 cf       	rjmp	.-14     	; 0x33c <MCP_reset>
     34a:	08 95       	ret

0000034c <MCP_read>:
     34c:	cf 93       	push	r28
     34e:	c8 2f       	mov	r28, r24
     350:	2f 98       	cbi	0x05, 7	; 5
     352:	83 e0       	ldi	r24, 0x03	; 3
     354:	73 d0       	rcall	.+230    	; 0x43c <SPI_transmit>
     356:	8c 2f       	mov	r24, r28
     358:	71 d0       	rcall	.+226    	; 0x43c <SPI_transmit>
     35a:	75 d0       	rcall	.+234    	; 0x446 <SPI_read>
     35c:	2f 9a       	sbi	0x05, 7	; 5
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <MCP_write>:
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	d8 2f       	mov	r29, r24
     368:	c6 2f       	mov	r28, r22
     36a:	2f 98       	cbi	0x05, 7	; 5
     36c:	82 e0       	ldi	r24, 0x02	; 2
     36e:	66 d0       	rcall	.+204    	; 0x43c <SPI_transmit>
     370:	8d 2f       	mov	r24, r29
     372:	64 d0       	rcall	.+200    	; 0x43c <SPI_transmit>
     374:	8c 2f       	mov	r24, r28
     376:	62 d0       	rcall	.+196    	; 0x43c <SPI_transmit>
     378:	2f 9a       	sbi	0x05, 7	; 5
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <MCP_bitModify>:
}

void MCP_bitModify(uint8_t address, uint8_t mask, uint8_t data) {
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	18 2f       	mov	r17, r24
     388:	d6 2f       	mov	r29, r22
     38a:	c4 2f       	mov	r28, r20
	// Select CAN controller
	PORTB &= ~(1 << PB7);
     38c:	2f 98       	cbi	0x05, 7	; 5
	
	// Send BIT MODIFY instruction
	SPI_transmit(MCP_BITMOD);
     38e:	85 e0       	ldi	r24, 0x05	; 5
     390:	55 d0       	rcall	.+170    	; 0x43c <SPI_transmit>
	
	// Send address of register
	SPI_transmit(address);
     392:	81 2f       	mov	r24, r17
     394:	53 d0       	rcall	.+166    	; 0x43c <SPI_transmit>
	
	// Send mask byte
	SPI_transmit(mask);
     396:	8d 2f       	mov	r24, r29
     398:	51 d0       	rcall	.+162    	; 0x43c <SPI_transmit>
	
	// Send data byte
	SPI_transmit(data);
     39a:	8c 2f       	mov	r24, r28
     39c:	4f d0       	rcall	.+158    	; 0x43c <SPI_transmit>
     39e:	2f 9a       	sbi	0x05, 7	; 5
	
	// Deselect CAN controller
	PORTB |= (1 << PB7);
     3a0:	df 91       	pop	r29
}
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	08 95       	ret

000003a8 <PWM_init>:

#include <avr/io.h>

void PWM_init(void) {
	// Set PB5 as output for PWM signal
	DDRB |= (1 << PB6);
     3a8:	26 9a       	sbi	0x04, 6	; 4

	// Set polarity (non inverting) and lower bits for mode 14 (fast PWM)
	TCCR1A |= (1 << COM1B1) | (1 << WGM11);
     3aa:	e0 e8       	ldi	r30, 0x80	; 128
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	80 81       	ld	r24, Z
     3b0:	82 62       	ori	r24, 0x22	; 34
     3b2:	80 83       	st	Z, r24

	// Set upper bits for mode 14 and set prescaler f_osc/8
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);
     3b4:	e1 e8       	ldi	r30, 0x81	; 129
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	8a 61       	ori	r24, 0x1A	; 26
     3bc:	80 83       	st	Z, r24
	
	// Set input capture register 5 to 40 000 (this should create a compare match every 20 ms)
	ICR1 = 0x9C40;
     3be:	80 e4       	ldi	r24, 0x40	; 64
     3c0:	9c e9       	ldi	r25, 0x9C	; 156
     3c2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     3c6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     3ca:	08 95       	ret

000003cc <PWM_set_duty_cycle>:
}

// duty cycle = {0, 100}
void PWM_set_duty_cycle(unsigned int duty_cycle)  {
	if (duty_cycle < 100) {
     3cc:	84 36       	cpi	r24, 0x64	; 100
     3ce:	91 05       	cpc	r25, r1
     3d0:	c8 f4       	brcc	.+50     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		uint16_t d = (duty_cycle*0.012 + 0.9)*2000;
     3d2:	bc 01       	movw	r22, r24
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	13 d1       	rcall	.+550    	; 0x600 <__floatunsisf>
     3da:	26 ea       	ldi	r18, 0xA6	; 166
     3dc:	3b e9       	ldi	r19, 0x9B	; 155
     3de:	44 e4       	ldi	r20, 0x44	; 68
     3e0:	5c e3       	ldi	r21, 0x3C	; 60
     3e2:	9c d1       	rcall	.+824    	; 0x71c <__mulsf3>
     3e4:	26 e6       	ldi	r18, 0x66	; 102
     3e6:	36 e6       	ldi	r19, 0x66	; 102
     3e8:	46 e6       	ldi	r20, 0x66	; 102
     3ea:	5f e3       	ldi	r21, 0x3F	; 63
     3ec:	79 d0       	rcall	.+242    	; 0x4e0 <__addsf3>
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	4a ef       	ldi	r20, 0xFA	; 250
     3f4:	54 e4       	ldi	r21, 0x44	; 68
     3f6:	92 d1       	rcall	.+804    	; 0x71c <__mulsf3>
     3f8:	d7 d0       	rcall	.+430    	; 0x5a8 <__fixunssfsi>

		// New duty cycle is automatically set at new period (BOTTOM)
		OCR1B = d;
     3fa:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     3fe:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
	} else {
		printf("Error: PWM duty cycle is too large\n\r");
     402:	08 95       	ret
     404:	8b e6       	ldi	r24, 0x6B	; 107
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	9f 93       	push	r25
     40a:	8f 93       	push	r24
     40c:	34 d2       	rcall	.+1128   	; 0x876 <printf>
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	08 95       	ret

00000414 <SPI_MasterInit>:
#include "interrupt.h"
#include <avr/io.h>

void SPI_MasterInit(void) {
	// Set PB7 (/SS), PB2 (MOSI) and PB1 (SCK) as output
	DDRB |= (1 << DDB7) | (1 << DDB2) | (1 << DDB1) | (1 << DDB0);
     414:	84 b1       	in	r24, 0x04	; 4
     416:	87 68       	ori	r24, 0x87	; 135
     418:	84 b9       	out	0x04, r24	; 4
	
	// Set PB3 (MISO) as input
	DDRB &= ~(1 << DDB3);
     41a:	23 98       	cbi	0x04, 3	; 4
	
	// Select Master SPI mode, SPI enable
	SPCR |= (1 << MSTR) | (1 << SPE);
     41c:	8c b5       	in	r24, 0x2c	; 44
     41e:	80 65       	ori	r24, 0x50	; 80
     420:	8c bd       	out	0x2c, r24	; 44
	
	// Transmit MSB of the data word first
	SPCR &= ~(1 << DORD);
     422:	8c b5       	in	r24, 0x2c	; 44
     424:	8f 7d       	andi	r24, 0xDF	; 223
     426:	8c bd       	out	0x2c, r24	; 44
	
	// Configure clock polarity (SCK is low when idle)
	SPCR &= ~(1 << CPOL);
     428:	8c b5       	in	r24, 0x2c	; 44
     42a:	87 7f       	andi	r24, 0xF7	; 247
     42c:	8c bd       	out	0x2c, r24	; 44
	
	// Configure clock phase (data is sampled on leading edge)
	SPCR &= ~(1 << CPHA);
     42e:	8c b5       	in	r24, 0x2c	; 44
     430:	8b 7f       	andi	r24, 0xFB	; 251
     432:	8c bd       	out	0x2c, r24	; 44
	
	// Configure SCK rate (f_osc/16)
	SPCR |= (1 << SPR0);
     434:	8c b5       	in	r24, 0x2c	; 44
     436:	81 60       	ori	r24, 0x01	; 1
     438:	8c bd       	out	0x2c, r24	; 44
     43a:	08 95       	ret

0000043c <SPI_transmit>:
}

void SPI_transmit(uint8_t data) {
	// Initiate data transmission
	SPDR = data;
     43c:	8e bd       	out	0x2e, r24	; 46
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
     43e:	0d b4       	in	r0, 0x2d	; 45
     440:	07 fe       	sbrs	r0, 7
     442:	fd cf       	rjmp	.-6      	; 0x43e <SPI_transmit+0x2>
}	
     444:	08 95       	ret

00000446 <SPI_read>:

uint8_t SPI_read(void) {
	SPDR = 0xFF; // Send dummy byte
     446:	8f ef       	ldi	r24, 0xFF	; 255
     448:	8e bd       	out	0x2e, r24	; 46
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
     44a:	0d b4       	in	r0, 0x2d	; 45
     44c:	07 fe       	sbrs	r0, 7
     44e:	fd cf       	rjmp	.-6      	; 0x44a <SPI_read+0x4>
	
	return SPDR;
     450:	8e b5       	in	r24, 0x2e	; 46
	// SPIF bit in SPSR register is reset when accessing SPDR
}
     452:	08 95       	ret

00000454 <UART_transmit>:
#include <util/delay.h>
#include "uart.h"

void UART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while ( ! (UCSR0A & (1<<UDRE0))) {
     454:	e0 ec       	ldi	r30, 0xC0	; 192
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	90 81       	ld	r25, Z
     45a:	95 ff       	sbrs	r25, 5
     45c:	fd cf       	rjmp	.-6      	; 0x458 <UART_transmit+0x4>
		// waiting...
	}
	// Put data into buffer, sends the data
	UDR0 = data;
     45e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     462:	08 95       	ret

00000464 <UART_receive>:
}

unsigned char UART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1 << RXC0))) {
     464:	e0 ec       	ldi	r30, 0xC0	; 192
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	88 23       	and	r24, r24
     46c:	ec f7       	brge	.-6      	; 0x468 <UART_receive+0x4>
		// wait...
	}
	return UDR0;
     46e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	
}
     472:	08 95       	ret

00000474 <UART_init>:

void UART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = ubrr>>8;
     474:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = ubrr;
     478:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     47c:	88 e1       	ldi	r24, 0x18	; 24
     47e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
     482:	8e e0       	ldi	r24, 0x0E	; 14
     484:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	
	fdevopen(UART_transmit, UART_receive);
     488:	62 e3       	ldi	r22, 0x32	; 50
     48a:	72 e0       	ldi	r23, 0x02	; 2
     48c:	8a e2       	ldi	r24, 0x2A	; 42
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	a8 c1       	rjmp	.+848    	; 0x7e2 <fdevopen>
     492:	08 95       	ret

00000494 <main>:
#define MYUBRR 103

int main(void)
{
	
	UART_init(MYUBRR);
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	ed df       	rcall	.-38     	; 0x474 <UART_init>
	printf("Node 2 starting...\n\r");
     49a:	80 e9       	ldi	r24, 0x90	; 144
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	9f 93       	push	r25
     4a0:	8f 93       	push	r24
	INTERRUPT_init();
     4a2:	e9 d1       	rcall	.+978    	; 0x876 <printf>
	CAN_init(MODE_NORMAL);
     4a4:	d9 de       	rcall	.-590    	; 0x258 <INTERRUPT_init>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
	PWM_init();
     4a8:	3d de       	rcall	.-902    	; 0x124 <CAN_init>
     4aa:	7e df       	rcall	.-260    	; 0x3a8 <PWM_init>
	IR_init();
     4ac:	c3 de       	rcall	.-634    	; 0x234 <IR_init>
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
	msg.data[1] = 0xF;
	msg_ptr msgPtr = &msg;
	
	while(1)
	{
		printf("ADC = %d\n\r", IR_read());	
     4b2:	c5 ea       	ldi	r28, 0xA5	; 165
     4b4:	d2 e0       	ldi	r29, 0x02	; 2
     4b6:	cd de       	rcall	.-614    	; 0x252 <IR_read>
     4b8:	1f 92       	push	r1
     4ba:	8f 93       	push	r24
     4bc:	df 93       	push	r29
     4be:	cf 93       	push	r28
     4c0:	da d1       	rcall	.+948    	; 0x876 <printf>
     4c2:	9f ef       	ldi	r25, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c4:	21 ee       	ldi	r18, 0xE1	; 225
     4c6:	84 e0       	ldi	r24, 0x04	; 4
     4c8:	91 50       	subi	r25, 0x01	; 1
     4ca:	20 40       	sbci	r18, 0x00	; 0
     4cc:	80 40       	sbci	r24, 0x00	; 0
     4ce:	e1 f7       	brne	.-8      	; 0x4c8 <main+0x34>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <main+0x3e>
     4d2:	00 00       	nop
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	ec cf       	rjmp	.-40     	; 0x4b6 <main+0x22>

000004de <__subsf3>:
     4de:	50 58       	subi	r21, 0x80	; 128

000004e0 <__addsf3>:
     4e0:	bb 27       	eor	r27, r27
     4e2:	aa 27       	eor	r26, r26
     4e4:	0e d0       	rcall	.+28     	; 0x502 <__addsf3x>
     4e6:	e0 c0       	rjmp	.+448    	; 0x6a8 <__fp_round>
     4e8:	d1 d0       	rcall	.+418    	; 0x68c <__fp_pscA>
     4ea:	30 f0       	brcs	.+12     	; 0x4f8 <__addsf3+0x18>
     4ec:	d6 d0       	rcall	.+428    	; 0x69a <__fp_pscB>
     4ee:	20 f0       	brcs	.+8      	; 0x4f8 <__addsf3+0x18>
     4f0:	31 f4       	brne	.+12     	; 0x4fe <__addsf3+0x1e>
     4f2:	9f 3f       	cpi	r25, 0xFF	; 255
     4f4:	11 f4       	brne	.+4      	; 0x4fa <__addsf3+0x1a>
     4f6:	1e f4       	brtc	.+6      	; 0x4fe <__addsf3+0x1e>
     4f8:	c6 c0       	rjmp	.+396    	; 0x686 <__fp_nan>
     4fa:	0e f4       	brtc	.+2      	; 0x4fe <__addsf3+0x1e>
     4fc:	e0 95       	com	r30
     4fe:	e7 fb       	bst	r30, 7
     500:	bc c0       	rjmp	.+376    	; 0x67a <__fp_inf>

00000502 <__addsf3x>:
     502:	e9 2f       	mov	r30, r25
     504:	e2 d0       	rcall	.+452    	; 0x6ca <__fp_split3>
     506:	80 f3       	brcs	.-32     	; 0x4e8 <__addsf3+0x8>
     508:	ba 17       	cp	r27, r26
     50a:	62 07       	cpc	r22, r18
     50c:	73 07       	cpc	r23, r19
     50e:	84 07       	cpc	r24, r20
     510:	95 07       	cpc	r25, r21
     512:	18 f0       	brcs	.+6      	; 0x51a <__addsf3x+0x18>
     514:	71 f4       	brne	.+28     	; 0x532 <__addsf3x+0x30>
     516:	9e f5       	brtc	.+102    	; 0x57e <__addsf3x+0x7c>
     518:	fa c0       	rjmp	.+500    	; 0x70e <__fp_zero>
     51a:	0e f4       	brtc	.+2      	; 0x51e <__addsf3x+0x1c>
     51c:	e0 95       	com	r30
     51e:	0b 2e       	mov	r0, r27
     520:	ba 2f       	mov	r27, r26
     522:	a0 2d       	mov	r26, r0
     524:	0b 01       	movw	r0, r22
     526:	b9 01       	movw	r22, r18
     528:	90 01       	movw	r18, r0
     52a:	0c 01       	movw	r0, r24
     52c:	ca 01       	movw	r24, r20
     52e:	a0 01       	movw	r20, r0
     530:	11 24       	eor	r1, r1
     532:	ff 27       	eor	r31, r31
     534:	59 1b       	sub	r21, r25
     536:	99 f0       	breq	.+38     	; 0x55e <__addsf3x+0x5c>
     538:	59 3f       	cpi	r21, 0xF9	; 249
     53a:	50 f4       	brcc	.+20     	; 0x550 <__addsf3x+0x4e>
     53c:	50 3e       	cpi	r21, 0xE0	; 224
     53e:	68 f1       	brcs	.+90     	; 0x59a <__addsf3x+0x98>
     540:	1a 16       	cp	r1, r26
     542:	f0 40       	sbci	r31, 0x00	; 0
     544:	a2 2f       	mov	r26, r18
     546:	23 2f       	mov	r18, r19
     548:	34 2f       	mov	r19, r20
     54a:	44 27       	eor	r20, r20
     54c:	58 5f       	subi	r21, 0xF8	; 248
     54e:	f3 cf       	rjmp	.-26     	; 0x536 <__addsf3x+0x34>
     550:	46 95       	lsr	r20
     552:	37 95       	ror	r19
     554:	27 95       	ror	r18
     556:	a7 95       	ror	r26
     558:	f0 40       	sbci	r31, 0x00	; 0
     55a:	53 95       	inc	r21
     55c:	c9 f7       	brne	.-14     	; 0x550 <__addsf3x+0x4e>
     55e:	7e f4       	brtc	.+30     	; 0x57e <__addsf3x+0x7c>
     560:	1f 16       	cp	r1, r31
     562:	ba 0b       	sbc	r27, r26
     564:	62 0b       	sbc	r22, r18
     566:	73 0b       	sbc	r23, r19
     568:	84 0b       	sbc	r24, r20
     56a:	ba f0       	brmi	.+46     	; 0x59a <__addsf3x+0x98>
     56c:	91 50       	subi	r25, 0x01	; 1
     56e:	a1 f0       	breq	.+40     	; 0x598 <__addsf3x+0x96>
     570:	ff 0f       	add	r31, r31
     572:	bb 1f       	adc	r27, r27
     574:	66 1f       	adc	r22, r22
     576:	77 1f       	adc	r23, r23
     578:	88 1f       	adc	r24, r24
     57a:	c2 f7       	brpl	.-16     	; 0x56c <__addsf3x+0x6a>
     57c:	0e c0       	rjmp	.+28     	; 0x59a <__addsf3x+0x98>
     57e:	ba 0f       	add	r27, r26
     580:	62 1f       	adc	r22, r18
     582:	73 1f       	adc	r23, r19
     584:	84 1f       	adc	r24, r20
     586:	48 f4       	brcc	.+18     	; 0x59a <__addsf3x+0x98>
     588:	87 95       	ror	r24
     58a:	77 95       	ror	r23
     58c:	67 95       	ror	r22
     58e:	b7 95       	ror	r27
     590:	f7 95       	ror	r31
     592:	9e 3f       	cpi	r25, 0xFE	; 254
     594:	08 f0       	brcs	.+2      	; 0x598 <__addsf3x+0x96>
     596:	b3 cf       	rjmp	.-154    	; 0x4fe <__addsf3+0x1e>
     598:	93 95       	inc	r25
     59a:	88 0f       	add	r24, r24
     59c:	08 f0       	brcs	.+2      	; 0x5a0 <__addsf3x+0x9e>
     59e:	99 27       	eor	r25, r25
     5a0:	ee 0f       	add	r30, r30
     5a2:	97 95       	ror	r25
     5a4:	87 95       	ror	r24
     5a6:	08 95       	ret

000005a8 <__fixunssfsi>:
     5a8:	98 d0       	rcall	.+304    	; 0x6da <__fp_splitA>
     5aa:	88 f0       	brcs	.+34     	; 0x5ce <__fixunssfsi+0x26>
     5ac:	9f 57       	subi	r25, 0x7F	; 127
     5ae:	90 f0       	brcs	.+36     	; 0x5d4 <__fixunssfsi+0x2c>
     5b0:	b9 2f       	mov	r27, r25
     5b2:	99 27       	eor	r25, r25
     5b4:	b7 51       	subi	r27, 0x17	; 23
     5b6:	a0 f0       	brcs	.+40     	; 0x5e0 <__fixunssfsi+0x38>
     5b8:	d1 f0       	breq	.+52     	; 0x5ee <__fixunssfsi+0x46>
     5ba:	66 0f       	add	r22, r22
     5bc:	77 1f       	adc	r23, r23
     5be:	88 1f       	adc	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	1a f0       	brmi	.+6      	; 0x5ca <__fixunssfsi+0x22>
     5c4:	ba 95       	dec	r27
     5c6:	c9 f7       	brne	.-14     	; 0x5ba <__fixunssfsi+0x12>
     5c8:	12 c0       	rjmp	.+36     	; 0x5ee <__fixunssfsi+0x46>
     5ca:	b1 30       	cpi	r27, 0x01	; 1
     5cc:	81 f0       	breq	.+32     	; 0x5ee <__fixunssfsi+0x46>
     5ce:	9f d0       	rcall	.+318    	; 0x70e <__fp_zero>
     5d0:	b1 e0       	ldi	r27, 0x01	; 1
     5d2:	08 95       	ret
     5d4:	9c c0       	rjmp	.+312    	; 0x70e <__fp_zero>
     5d6:	67 2f       	mov	r22, r23
     5d8:	78 2f       	mov	r23, r24
     5da:	88 27       	eor	r24, r24
     5dc:	b8 5f       	subi	r27, 0xF8	; 248
     5de:	39 f0       	breq	.+14     	; 0x5ee <__fixunssfsi+0x46>
     5e0:	b9 3f       	cpi	r27, 0xF9	; 249
     5e2:	cc f3       	brlt	.-14     	; 0x5d6 <__fixunssfsi+0x2e>
     5e4:	86 95       	lsr	r24
     5e6:	77 95       	ror	r23
     5e8:	67 95       	ror	r22
     5ea:	b3 95       	inc	r27
     5ec:	d9 f7       	brne	.-10     	; 0x5e4 <__fixunssfsi+0x3c>
     5ee:	3e f4       	brtc	.+14     	; 0x5fe <__fixunssfsi+0x56>
     5f0:	90 95       	com	r25
     5f2:	80 95       	com	r24
     5f4:	70 95       	com	r23
     5f6:	61 95       	neg	r22
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	8f 4f       	sbci	r24, 0xFF	; 255
     5fc:	9f 4f       	sbci	r25, 0xFF	; 255
     5fe:	08 95       	ret

00000600 <__floatunsisf>:
     600:	e8 94       	clt
     602:	09 c0       	rjmp	.+18     	; 0x616 <__floatsisf+0x12>

00000604 <__floatsisf>:
     604:	97 fb       	bst	r25, 7
     606:	3e f4       	brtc	.+14     	; 0x616 <__floatsisf+0x12>
     608:	90 95       	com	r25
     60a:	80 95       	com	r24
     60c:	70 95       	com	r23
     60e:	61 95       	neg	r22
     610:	7f 4f       	sbci	r23, 0xFF	; 255
     612:	8f 4f       	sbci	r24, 0xFF	; 255
     614:	9f 4f       	sbci	r25, 0xFF	; 255
     616:	99 23       	and	r25, r25
     618:	a9 f0       	breq	.+42     	; 0x644 <__floatsisf+0x40>
     61a:	f9 2f       	mov	r31, r25
     61c:	96 e9       	ldi	r25, 0x96	; 150
     61e:	bb 27       	eor	r27, r27
     620:	93 95       	inc	r25
     622:	f6 95       	lsr	r31
     624:	87 95       	ror	r24
     626:	77 95       	ror	r23
     628:	67 95       	ror	r22
     62a:	b7 95       	ror	r27
     62c:	f1 11       	cpse	r31, r1
     62e:	f8 cf       	rjmp	.-16     	; 0x620 <__floatsisf+0x1c>
     630:	fa f4       	brpl	.+62     	; 0x670 <__floatsisf+0x6c>
     632:	bb 0f       	add	r27, r27
     634:	11 f4       	brne	.+4      	; 0x63a <__floatsisf+0x36>
     636:	60 ff       	sbrs	r22, 0
     638:	1b c0       	rjmp	.+54     	; 0x670 <__floatsisf+0x6c>
     63a:	6f 5f       	subi	r22, 0xFF	; 255
     63c:	7f 4f       	sbci	r23, 0xFF	; 255
     63e:	8f 4f       	sbci	r24, 0xFF	; 255
     640:	9f 4f       	sbci	r25, 0xFF	; 255
     642:	16 c0       	rjmp	.+44     	; 0x670 <__floatsisf+0x6c>
     644:	88 23       	and	r24, r24
     646:	11 f0       	breq	.+4      	; 0x64c <__floatsisf+0x48>
     648:	96 e9       	ldi	r25, 0x96	; 150
     64a:	11 c0       	rjmp	.+34     	; 0x66e <__floatsisf+0x6a>
     64c:	77 23       	and	r23, r23
     64e:	21 f0       	breq	.+8      	; 0x658 <__floatsisf+0x54>
     650:	9e e8       	ldi	r25, 0x8E	; 142
     652:	87 2f       	mov	r24, r23
     654:	76 2f       	mov	r23, r22
     656:	05 c0       	rjmp	.+10     	; 0x662 <__floatsisf+0x5e>
     658:	66 23       	and	r22, r22
     65a:	71 f0       	breq	.+28     	; 0x678 <__floatsisf+0x74>
     65c:	96 e8       	ldi	r25, 0x86	; 134
     65e:	86 2f       	mov	r24, r22
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	2a f0       	brmi	.+10     	; 0x670 <__floatsisf+0x6c>
     666:	9a 95       	dec	r25
     668:	66 0f       	add	r22, r22
     66a:	77 1f       	adc	r23, r23
     66c:	88 1f       	adc	r24, r24
     66e:	da f7       	brpl	.-10     	; 0x666 <__floatsisf+0x62>
     670:	88 0f       	add	r24, r24
     672:	96 95       	lsr	r25
     674:	87 95       	ror	r24
     676:	97 f9       	bld	r25, 7
     678:	08 95       	ret

0000067a <__fp_inf>:
     67a:	97 f9       	bld	r25, 7
     67c:	9f 67       	ori	r25, 0x7F	; 127
     67e:	80 e8       	ldi	r24, 0x80	; 128
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	08 95       	ret

00000686 <__fp_nan>:
     686:	9f ef       	ldi	r25, 0xFF	; 255
     688:	80 ec       	ldi	r24, 0xC0	; 192
     68a:	08 95       	ret

0000068c <__fp_pscA>:
     68c:	00 24       	eor	r0, r0
     68e:	0a 94       	dec	r0
     690:	16 16       	cp	r1, r22
     692:	17 06       	cpc	r1, r23
     694:	18 06       	cpc	r1, r24
     696:	09 06       	cpc	r0, r25
     698:	08 95       	ret

0000069a <__fp_pscB>:
     69a:	00 24       	eor	r0, r0
     69c:	0a 94       	dec	r0
     69e:	12 16       	cp	r1, r18
     6a0:	13 06       	cpc	r1, r19
     6a2:	14 06       	cpc	r1, r20
     6a4:	05 06       	cpc	r0, r21
     6a6:	08 95       	ret

000006a8 <__fp_round>:
     6a8:	09 2e       	mov	r0, r25
     6aa:	03 94       	inc	r0
     6ac:	00 0c       	add	r0, r0
     6ae:	11 f4       	brne	.+4      	; 0x6b4 <__fp_round+0xc>
     6b0:	88 23       	and	r24, r24
     6b2:	52 f0       	brmi	.+20     	; 0x6c8 <__fp_round+0x20>
     6b4:	bb 0f       	add	r27, r27
     6b6:	40 f4       	brcc	.+16     	; 0x6c8 <__fp_round+0x20>
     6b8:	bf 2b       	or	r27, r31
     6ba:	11 f4       	brne	.+4      	; 0x6c0 <__fp_round+0x18>
     6bc:	60 ff       	sbrs	r22, 0
     6be:	04 c0       	rjmp	.+8      	; 0x6c8 <__fp_round+0x20>
     6c0:	6f 5f       	subi	r22, 0xFF	; 255
     6c2:	7f 4f       	sbci	r23, 0xFF	; 255
     6c4:	8f 4f       	sbci	r24, 0xFF	; 255
     6c6:	9f 4f       	sbci	r25, 0xFF	; 255
     6c8:	08 95       	ret

000006ca <__fp_split3>:
     6ca:	57 fd       	sbrc	r21, 7
     6cc:	90 58       	subi	r25, 0x80	; 128
     6ce:	44 0f       	add	r20, r20
     6d0:	55 1f       	adc	r21, r21
     6d2:	59 f0       	breq	.+22     	; 0x6ea <__fp_splitA+0x10>
     6d4:	5f 3f       	cpi	r21, 0xFF	; 255
     6d6:	71 f0       	breq	.+28     	; 0x6f4 <__fp_splitA+0x1a>
     6d8:	47 95       	ror	r20

000006da <__fp_splitA>:
     6da:	88 0f       	add	r24, r24
     6dc:	97 fb       	bst	r25, 7
     6de:	99 1f       	adc	r25, r25
     6e0:	61 f0       	breq	.+24     	; 0x6fa <__fp_splitA+0x20>
     6e2:	9f 3f       	cpi	r25, 0xFF	; 255
     6e4:	79 f0       	breq	.+30     	; 0x704 <__fp_splitA+0x2a>
     6e6:	87 95       	ror	r24
     6e8:	08 95       	ret
     6ea:	12 16       	cp	r1, r18
     6ec:	13 06       	cpc	r1, r19
     6ee:	14 06       	cpc	r1, r20
     6f0:	55 1f       	adc	r21, r21
     6f2:	f2 cf       	rjmp	.-28     	; 0x6d8 <__fp_split3+0xe>
     6f4:	46 95       	lsr	r20
     6f6:	f1 df       	rcall	.-30     	; 0x6da <__fp_splitA>
     6f8:	08 c0       	rjmp	.+16     	; 0x70a <__fp_splitA+0x30>
     6fa:	16 16       	cp	r1, r22
     6fc:	17 06       	cpc	r1, r23
     6fe:	18 06       	cpc	r1, r24
     700:	99 1f       	adc	r25, r25
     702:	f1 cf       	rjmp	.-30     	; 0x6e6 <__fp_splitA+0xc>
     704:	86 95       	lsr	r24
     706:	71 05       	cpc	r23, r1
     708:	61 05       	cpc	r22, r1
     70a:	08 94       	sec
     70c:	08 95       	ret

0000070e <__fp_zero>:
     70e:	e8 94       	clt

00000710 <__fp_szero>:
     710:	bb 27       	eor	r27, r27
     712:	66 27       	eor	r22, r22
     714:	77 27       	eor	r23, r23
     716:	cb 01       	movw	r24, r22
     718:	97 f9       	bld	r25, 7
     71a:	08 95       	ret

0000071c <__mulsf3>:
     71c:	0b d0       	rcall	.+22     	; 0x734 <__mulsf3x>
     71e:	c4 cf       	rjmp	.-120    	; 0x6a8 <__fp_round>
     720:	b5 df       	rcall	.-150    	; 0x68c <__fp_pscA>
     722:	28 f0       	brcs	.+10     	; 0x72e <__mulsf3+0x12>
     724:	ba df       	rcall	.-140    	; 0x69a <__fp_pscB>
     726:	18 f0       	brcs	.+6      	; 0x72e <__mulsf3+0x12>
     728:	95 23       	and	r25, r21
     72a:	09 f0       	breq	.+2      	; 0x72e <__mulsf3+0x12>
     72c:	a6 cf       	rjmp	.-180    	; 0x67a <__fp_inf>
     72e:	ab cf       	rjmp	.-170    	; 0x686 <__fp_nan>
     730:	11 24       	eor	r1, r1
     732:	ee cf       	rjmp	.-36     	; 0x710 <__fp_szero>

00000734 <__mulsf3x>:
     734:	ca df       	rcall	.-108    	; 0x6ca <__fp_split3>
     736:	a0 f3       	brcs	.-24     	; 0x720 <__mulsf3+0x4>

00000738 <__mulsf3_pse>:
     738:	95 9f       	mul	r25, r21
     73a:	d1 f3       	breq	.-12     	; 0x730 <__mulsf3+0x14>
     73c:	95 0f       	add	r25, r21
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	55 1f       	adc	r21, r21
     742:	62 9f       	mul	r22, r18
     744:	f0 01       	movw	r30, r0
     746:	72 9f       	mul	r23, r18
     748:	bb 27       	eor	r27, r27
     74a:	f0 0d       	add	r31, r0
     74c:	b1 1d       	adc	r27, r1
     74e:	63 9f       	mul	r22, r19
     750:	aa 27       	eor	r26, r26
     752:	f0 0d       	add	r31, r0
     754:	b1 1d       	adc	r27, r1
     756:	aa 1f       	adc	r26, r26
     758:	64 9f       	mul	r22, r20
     75a:	66 27       	eor	r22, r22
     75c:	b0 0d       	add	r27, r0
     75e:	a1 1d       	adc	r26, r1
     760:	66 1f       	adc	r22, r22
     762:	82 9f       	mul	r24, r18
     764:	22 27       	eor	r18, r18
     766:	b0 0d       	add	r27, r0
     768:	a1 1d       	adc	r26, r1
     76a:	62 1f       	adc	r22, r18
     76c:	73 9f       	mul	r23, r19
     76e:	b0 0d       	add	r27, r0
     770:	a1 1d       	adc	r26, r1
     772:	62 1f       	adc	r22, r18
     774:	83 9f       	mul	r24, r19
     776:	a0 0d       	add	r26, r0
     778:	61 1d       	adc	r22, r1
     77a:	22 1f       	adc	r18, r18
     77c:	74 9f       	mul	r23, r20
     77e:	33 27       	eor	r19, r19
     780:	a0 0d       	add	r26, r0
     782:	61 1d       	adc	r22, r1
     784:	23 1f       	adc	r18, r19
     786:	84 9f       	mul	r24, r20
     788:	60 0d       	add	r22, r0
     78a:	21 1d       	adc	r18, r1
     78c:	82 2f       	mov	r24, r18
     78e:	76 2f       	mov	r23, r22
     790:	6a 2f       	mov	r22, r26
     792:	11 24       	eor	r1, r1
     794:	9f 57       	subi	r25, 0x7F	; 127
     796:	50 40       	sbci	r21, 0x00	; 0
     798:	8a f0       	brmi	.+34     	; 0x7bc <__mulsf3_pse+0x84>
     79a:	e1 f0       	breq	.+56     	; 0x7d4 <__mulsf3_pse+0x9c>
     79c:	88 23       	and	r24, r24
     79e:	4a f0       	brmi	.+18     	; 0x7b2 <__mulsf3_pse+0x7a>
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	bb 1f       	adc	r27, r27
     7a6:	66 1f       	adc	r22, r22
     7a8:	77 1f       	adc	r23, r23
     7aa:	88 1f       	adc	r24, r24
     7ac:	91 50       	subi	r25, 0x01	; 1
     7ae:	50 40       	sbci	r21, 0x00	; 0
     7b0:	a9 f7       	brne	.-22     	; 0x79c <__mulsf3_pse+0x64>
     7b2:	9e 3f       	cpi	r25, 0xFE	; 254
     7b4:	51 05       	cpc	r21, r1
     7b6:	70 f0       	brcs	.+28     	; 0x7d4 <__mulsf3_pse+0x9c>
     7b8:	60 cf       	rjmp	.-320    	; 0x67a <__fp_inf>
     7ba:	aa cf       	rjmp	.-172    	; 0x710 <__fp_szero>
     7bc:	5f 3f       	cpi	r21, 0xFF	; 255
     7be:	ec f3       	brlt	.-6      	; 0x7ba <__mulsf3_pse+0x82>
     7c0:	98 3e       	cpi	r25, 0xE8	; 232
     7c2:	dc f3       	brlt	.-10     	; 0x7ba <__mulsf3_pse+0x82>
     7c4:	86 95       	lsr	r24
     7c6:	77 95       	ror	r23
     7c8:	67 95       	ror	r22
     7ca:	b7 95       	ror	r27
     7cc:	f7 95       	ror	r31
     7ce:	e7 95       	ror	r30
     7d0:	9f 5f       	subi	r25, 0xFF	; 255
     7d2:	c1 f7       	brne	.-16     	; 0x7c4 <__mulsf3_pse+0x8c>
     7d4:	fe 2b       	or	r31, r30
     7d6:	88 0f       	add	r24, r24
     7d8:	91 1d       	adc	r25, r1
     7da:	96 95       	lsr	r25
     7dc:	87 95       	ror	r24
     7de:	97 f9       	bld	r25, 7
     7e0:	08 95       	ret

000007e2 <fdevopen>:
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	00 97       	sbiw	r24, 0x00	; 0
     7ec:	31 f4       	brne	.+12     	; 0x7fa <fdevopen+0x18>
     7ee:	61 15       	cp	r22, r1
     7f0:	71 05       	cpc	r23, r1
     7f2:	19 f4       	brne	.+6      	; 0x7fa <fdevopen+0x18>
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	39 c0       	rjmp	.+114    	; 0x86c <fdevopen+0x8a>
     7fa:	8b 01       	movw	r16, r22
     7fc:	ec 01       	movw	r28, r24
     7fe:	6e e0       	ldi	r22, 0x0E	; 14
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	47 d2       	rcall	.+1166   	; 0xc96 <calloc>
     808:	fc 01       	movw	r30, r24
     80a:	89 2b       	or	r24, r25
     80c:	99 f3       	breq	.-26     	; 0x7f4 <fdevopen+0x12>
     80e:	80 e8       	ldi	r24, 0x80	; 128
     810:	83 83       	std	Z+3, r24	; 0x03
     812:	01 15       	cp	r16, r1
     814:	11 05       	cpc	r17, r1
     816:	71 f0       	breq	.+28     	; 0x834 <fdevopen+0x52>
     818:	13 87       	std	Z+11, r17	; 0x0b
     81a:	02 87       	std	Z+10, r16	; 0x0a
     81c:	81 e8       	ldi	r24, 0x81	; 129
     81e:	83 83       	std	Z+3, r24	; 0x03
     820:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__data_end>
     824:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <__data_end+0x1>
     828:	89 2b       	or	r24, r25
     82a:	21 f4       	brne	.+8      	; 0x834 <fdevopen+0x52>
     82c:	f0 93 b1 02 	sts	0x02B1, r31	; 0x8002b1 <__data_end+0x1>
     830:	e0 93 b0 02 	sts	0x02B0, r30	; 0x8002b0 <__data_end>
     834:	20 97       	sbiw	r28, 0x00	; 0
     836:	c9 f0       	breq	.+50     	; 0x86a <fdevopen+0x88>
     838:	d1 87       	std	Z+9, r29	; 0x09
     83a:	c0 87       	std	Z+8, r28	; 0x08
     83c:	83 81       	ldd	r24, Z+3	; 0x03
     83e:	82 60       	ori	r24, 0x02	; 2
     840:	83 83       	std	Z+3, r24	; 0x03
     842:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <__data_end+0x2>
     846:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <__data_end+0x3>
     84a:	89 2b       	or	r24, r25
     84c:	71 f4       	brne	.+28     	; 0x86a <fdevopen+0x88>
     84e:	f0 93 b3 02 	sts	0x02B3, r31	; 0x8002b3 <__data_end+0x3>
     852:	e0 93 b2 02 	sts	0x02B2, r30	; 0x8002b2 <__data_end+0x2>
     856:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <__data_end+0x4>
     85a:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <__data_end+0x5>
     85e:	89 2b       	or	r24, r25
     860:	21 f4       	brne	.+8      	; 0x86a <fdevopen+0x88>
     862:	f0 93 b5 02 	sts	0x02B5, r31	; 0x8002b5 <__data_end+0x5>
     866:	e0 93 b4 02 	sts	0x02B4, r30	; 0x8002b4 <__data_end+0x4>
     86a:	cf 01       	movw	r24, r30
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <printf>:
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	ae 01       	movw	r20, r28
     880:	4a 5f       	subi	r20, 0xFA	; 250
     882:	5f 4f       	sbci	r21, 0xFF	; 255
     884:	fa 01       	movw	r30, r20
     886:	61 91       	ld	r22, Z+
     888:	71 91       	ld	r23, Z+
     88a:	af 01       	movw	r20, r30
     88c:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <__data_end+0x2>
     890:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <__data_end+0x3>
     894:	03 d0       	rcall	.+6      	; 0x89c <vfprintf>
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <vfprintf>:
     89c:	2f 92       	push	r2
     89e:	3f 92       	push	r3
     8a0:	4f 92       	push	r4
     8a2:	5f 92       	push	r5
     8a4:	6f 92       	push	r6
     8a6:	7f 92       	push	r7
     8a8:	8f 92       	push	r8
     8aa:	9f 92       	push	r9
     8ac:	af 92       	push	r10
     8ae:	bf 92       	push	r11
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	2b 97       	sbiw	r28, 0x0b	; 11
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	6c 01       	movw	r12, r24
     8d2:	7b 01       	movw	r14, r22
     8d4:	8a 01       	movw	r16, r20
     8d6:	fc 01       	movw	r30, r24
     8d8:	17 82       	std	Z+7, r1	; 0x07
     8da:	16 82       	std	Z+6, r1	; 0x06
     8dc:	83 81       	ldd	r24, Z+3	; 0x03
     8de:	81 ff       	sbrs	r24, 1
     8e0:	bf c1       	rjmp	.+894    	; 0xc60 <vfprintf+0x3c4>
     8e2:	ce 01       	movw	r24, r28
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	3c 01       	movw	r6, r24
     8e8:	f6 01       	movw	r30, r12
     8ea:	93 81       	ldd	r25, Z+3	; 0x03
     8ec:	f7 01       	movw	r30, r14
     8ee:	93 fd       	sbrc	r25, 3
     8f0:	85 91       	lpm	r24, Z+
     8f2:	93 ff       	sbrs	r25, 3
     8f4:	81 91       	ld	r24, Z+
     8f6:	7f 01       	movw	r14, r30
     8f8:	88 23       	and	r24, r24
     8fa:	09 f4       	brne	.+2      	; 0x8fe <vfprintf+0x62>
     8fc:	ad c1       	rjmp	.+858    	; 0xc58 <vfprintf+0x3bc>
     8fe:	85 32       	cpi	r24, 0x25	; 37
     900:	39 f4       	brne	.+14     	; 0x910 <vfprintf+0x74>
     902:	93 fd       	sbrc	r25, 3
     904:	85 91       	lpm	r24, Z+
     906:	93 ff       	sbrs	r25, 3
     908:	81 91       	ld	r24, Z+
     90a:	7f 01       	movw	r14, r30
     90c:	85 32       	cpi	r24, 0x25	; 37
     90e:	21 f4       	brne	.+8      	; 0x918 <vfprintf+0x7c>
     910:	b6 01       	movw	r22, r12
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	18 d3       	rcall	.+1584   	; 0xf46 <fputc>
     916:	e8 cf       	rjmp	.-48     	; 0x8e8 <vfprintf+0x4c>
     918:	91 2c       	mov	r9, r1
     91a:	21 2c       	mov	r2, r1
     91c:	31 2c       	mov	r3, r1
     91e:	ff e1       	ldi	r31, 0x1F	; 31
     920:	f3 15       	cp	r31, r3
     922:	d8 f0       	brcs	.+54     	; 0x95a <vfprintf+0xbe>
     924:	8b 32       	cpi	r24, 0x2B	; 43
     926:	79 f0       	breq	.+30     	; 0x946 <vfprintf+0xaa>
     928:	38 f4       	brcc	.+14     	; 0x938 <vfprintf+0x9c>
     92a:	80 32       	cpi	r24, 0x20	; 32
     92c:	79 f0       	breq	.+30     	; 0x94c <vfprintf+0xb0>
     92e:	83 32       	cpi	r24, 0x23	; 35
     930:	a1 f4       	brne	.+40     	; 0x95a <vfprintf+0xbe>
     932:	23 2d       	mov	r18, r3
     934:	20 61       	ori	r18, 0x10	; 16
     936:	1d c0       	rjmp	.+58     	; 0x972 <vfprintf+0xd6>
     938:	8d 32       	cpi	r24, 0x2D	; 45
     93a:	61 f0       	breq	.+24     	; 0x954 <vfprintf+0xb8>
     93c:	80 33       	cpi	r24, 0x30	; 48
     93e:	69 f4       	brne	.+26     	; 0x95a <vfprintf+0xbe>
     940:	23 2d       	mov	r18, r3
     942:	21 60       	ori	r18, 0x01	; 1
     944:	16 c0       	rjmp	.+44     	; 0x972 <vfprintf+0xd6>
     946:	83 2d       	mov	r24, r3
     948:	82 60       	ori	r24, 0x02	; 2
     94a:	38 2e       	mov	r3, r24
     94c:	e3 2d       	mov	r30, r3
     94e:	e4 60       	ori	r30, 0x04	; 4
     950:	3e 2e       	mov	r3, r30
     952:	2a c0       	rjmp	.+84     	; 0x9a8 <vfprintf+0x10c>
     954:	f3 2d       	mov	r31, r3
     956:	f8 60       	ori	r31, 0x08	; 8
     958:	1d c0       	rjmp	.+58     	; 0x994 <vfprintf+0xf8>
     95a:	37 fc       	sbrc	r3, 7
     95c:	2d c0       	rjmp	.+90     	; 0x9b8 <vfprintf+0x11c>
     95e:	20 ed       	ldi	r18, 0xD0	; 208
     960:	28 0f       	add	r18, r24
     962:	2a 30       	cpi	r18, 0x0A	; 10
     964:	40 f0       	brcs	.+16     	; 0x976 <vfprintf+0xda>
     966:	8e 32       	cpi	r24, 0x2E	; 46
     968:	b9 f4       	brne	.+46     	; 0x998 <vfprintf+0xfc>
     96a:	36 fc       	sbrc	r3, 6
     96c:	75 c1       	rjmp	.+746    	; 0xc58 <vfprintf+0x3bc>
     96e:	23 2d       	mov	r18, r3
     970:	20 64       	ori	r18, 0x40	; 64
     972:	32 2e       	mov	r3, r18
     974:	19 c0       	rjmp	.+50     	; 0x9a8 <vfprintf+0x10c>
     976:	36 fe       	sbrs	r3, 6
     978:	06 c0       	rjmp	.+12     	; 0x986 <vfprintf+0xea>
     97a:	8a e0       	ldi	r24, 0x0A	; 10
     97c:	98 9e       	mul	r9, r24
     97e:	20 0d       	add	r18, r0
     980:	11 24       	eor	r1, r1
     982:	92 2e       	mov	r9, r18
     984:	11 c0       	rjmp	.+34     	; 0x9a8 <vfprintf+0x10c>
     986:	ea e0       	ldi	r30, 0x0A	; 10
     988:	2e 9e       	mul	r2, r30
     98a:	20 0d       	add	r18, r0
     98c:	11 24       	eor	r1, r1
     98e:	22 2e       	mov	r2, r18
     990:	f3 2d       	mov	r31, r3
     992:	f0 62       	ori	r31, 0x20	; 32
     994:	3f 2e       	mov	r3, r31
     996:	08 c0       	rjmp	.+16     	; 0x9a8 <vfprintf+0x10c>
     998:	8c 36       	cpi	r24, 0x6C	; 108
     99a:	21 f4       	brne	.+8      	; 0x9a4 <vfprintf+0x108>
     99c:	83 2d       	mov	r24, r3
     99e:	80 68       	ori	r24, 0x80	; 128
     9a0:	38 2e       	mov	r3, r24
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <vfprintf+0x10c>
     9a4:	88 36       	cpi	r24, 0x68	; 104
     9a6:	41 f4       	brne	.+16     	; 0x9b8 <vfprintf+0x11c>
     9a8:	f7 01       	movw	r30, r14
     9aa:	93 fd       	sbrc	r25, 3
     9ac:	85 91       	lpm	r24, Z+
     9ae:	93 ff       	sbrs	r25, 3
     9b0:	81 91       	ld	r24, Z+
     9b2:	7f 01       	movw	r14, r30
     9b4:	81 11       	cpse	r24, r1
     9b6:	b3 cf       	rjmp	.-154    	; 0x91e <vfprintf+0x82>
     9b8:	98 2f       	mov	r25, r24
     9ba:	9f 7d       	andi	r25, 0xDF	; 223
     9bc:	95 54       	subi	r25, 0x45	; 69
     9be:	93 30       	cpi	r25, 0x03	; 3
     9c0:	28 f4       	brcc	.+10     	; 0x9cc <vfprintf+0x130>
     9c2:	0c 5f       	subi	r16, 0xFC	; 252
     9c4:	1f 4f       	sbci	r17, 0xFF	; 255
     9c6:	9f e3       	ldi	r25, 0x3F	; 63
     9c8:	99 83       	std	Y+1, r25	; 0x01
     9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <vfprintf+0x14a>
     9cc:	83 36       	cpi	r24, 0x63	; 99
     9ce:	31 f0       	breq	.+12     	; 0x9dc <vfprintf+0x140>
     9d0:	83 37       	cpi	r24, 0x73	; 115
     9d2:	71 f0       	breq	.+28     	; 0x9f0 <vfprintf+0x154>
     9d4:	83 35       	cpi	r24, 0x53	; 83
     9d6:	09 f0       	breq	.+2      	; 0x9da <vfprintf+0x13e>
     9d8:	55 c0       	rjmp	.+170    	; 0xa84 <vfprintf+0x1e8>
     9da:	20 c0       	rjmp	.+64     	; 0xa1c <vfprintf+0x180>
     9dc:	f8 01       	movw	r30, r16
     9de:	80 81       	ld	r24, Z
     9e0:	89 83       	std	Y+1, r24	; 0x01
     9e2:	0e 5f       	subi	r16, 0xFE	; 254
     9e4:	1f 4f       	sbci	r17, 0xFF	; 255
     9e6:	88 24       	eor	r8, r8
     9e8:	83 94       	inc	r8
     9ea:	91 2c       	mov	r9, r1
     9ec:	53 01       	movw	r10, r6
     9ee:	12 c0       	rjmp	.+36     	; 0xa14 <vfprintf+0x178>
     9f0:	28 01       	movw	r4, r16
     9f2:	f2 e0       	ldi	r31, 0x02	; 2
     9f4:	4f 0e       	add	r4, r31
     9f6:	51 1c       	adc	r5, r1
     9f8:	f8 01       	movw	r30, r16
     9fa:	a0 80       	ld	r10, Z
     9fc:	b1 80       	ldd	r11, Z+1	; 0x01
     9fe:	36 fe       	sbrs	r3, 6
     a00:	03 c0       	rjmp	.+6      	; 0xa08 <vfprintf+0x16c>
     a02:	69 2d       	mov	r22, r9
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <vfprintf+0x170>
     a08:	6f ef       	ldi	r22, 0xFF	; 255
     a0a:	7f ef       	ldi	r23, 0xFF	; 255
     a0c:	c5 01       	movw	r24, r10
     a0e:	90 d2       	rcall	.+1312   	; 0xf30 <strnlen>
     a10:	4c 01       	movw	r8, r24
     a12:	82 01       	movw	r16, r4
     a14:	f3 2d       	mov	r31, r3
     a16:	ff 77       	andi	r31, 0x7F	; 127
     a18:	3f 2e       	mov	r3, r31
     a1a:	15 c0       	rjmp	.+42     	; 0xa46 <vfprintf+0x1aa>
     a1c:	28 01       	movw	r4, r16
     a1e:	22 e0       	ldi	r18, 0x02	; 2
     a20:	42 0e       	add	r4, r18
     a22:	51 1c       	adc	r5, r1
     a24:	f8 01       	movw	r30, r16
     a26:	a0 80       	ld	r10, Z
     a28:	b1 80       	ldd	r11, Z+1	; 0x01
     a2a:	36 fe       	sbrs	r3, 6
     a2c:	03 c0       	rjmp	.+6      	; 0xa34 <vfprintf+0x198>
     a2e:	69 2d       	mov	r22, r9
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <vfprintf+0x19c>
     a34:	6f ef       	ldi	r22, 0xFF	; 255
     a36:	7f ef       	ldi	r23, 0xFF	; 255
     a38:	c5 01       	movw	r24, r10
     a3a:	68 d2       	rcall	.+1232   	; 0xf0c <strnlen_P>
     a3c:	4c 01       	movw	r8, r24
     a3e:	f3 2d       	mov	r31, r3
     a40:	f0 68       	ori	r31, 0x80	; 128
     a42:	3f 2e       	mov	r3, r31
     a44:	82 01       	movw	r16, r4
     a46:	33 fc       	sbrc	r3, 3
     a48:	19 c0       	rjmp	.+50     	; 0xa7c <vfprintf+0x1e0>
     a4a:	82 2d       	mov	r24, r2
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	88 16       	cp	r8, r24
     a50:	99 06       	cpc	r9, r25
     a52:	a0 f4       	brcc	.+40     	; 0xa7c <vfprintf+0x1e0>
     a54:	b6 01       	movw	r22, r12
     a56:	80 e2       	ldi	r24, 0x20	; 32
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	75 d2       	rcall	.+1258   	; 0xf46 <fputc>
     a5c:	2a 94       	dec	r2
     a5e:	f5 cf       	rjmp	.-22     	; 0xa4a <vfprintf+0x1ae>
     a60:	f5 01       	movw	r30, r10
     a62:	37 fc       	sbrc	r3, 7
     a64:	85 91       	lpm	r24, Z+
     a66:	37 fe       	sbrs	r3, 7
     a68:	81 91       	ld	r24, Z+
     a6a:	5f 01       	movw	r10, r30
     a6c:	b6 01       	movw	r22, r12
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	6a d2       	rcall	.+1236   	; 0xf46 <fputc>
     a72:	21 10       	cpse	r2, r1
     a74:	2a 94       	dec	r2
     a76:	21 e0       	ldi	r18, 0x01	; 1
     a78:	82 1a       	sub	r8, r18
     a7a:	91 08       	sbc	r9, r1
     a7c:	81 14       	cp	r8, r1
     a7e:	91 04       	cpc	r9, r1
     a80:	79 f7       	brne	.-34     	; 0xa60 <vfprintf+0x1c4>
     a82:	e1 c0       	rjmp	.+450    	; 0xc46 <vfprintf+0x3aa>
     a84:	84 36       	cpi	r24, 0x64	; 100
     a86:	11 f0       	breq	.+4      	; 0xa8c <vfprintf+0x1f0>
     a88:	89 36       	cpi	r24, 0x69	; 105
     a8a:	39 f5       	brne	.+78     	; 0xada <vfprintf+0x23e>
     a8c:	f8 01       	movw	r30, r16
     a8e:	37 fe       	sbrs	r3, 7
     a90:	07 c0       	rjmp	.+14     	; 0xaa0 <vfprintf+0x204>
     a92:	60 81       	ld	r22, Z
     a94:	71 81       	ldd	r23, Z+1	; 0x01
     a96:	82 81       	ldd	r24, Z+2	; 0x02
     a98:	93 81       	ldd	r25, Z+3	; 0x03
     a9a:	0c 5f       	subi	r16, 0xFC	; 252
     a9c:	1f 4f       	sbci	r17, 0xFF	; 255
     a9e:	08 c0       	rjmp	.+16     	; 0xab0 <vfprintf+0x214>
     aa0:	60 81       	ld	r22, Z
     aa2:	71 81       	ldd	r23, Z+1	; 0x01
     aa4:	07 2e       	mov	r0, r23
     aa6:	00 0c       	add	r0, r0
     aa8:	88 0b       	sbc	r24, r24
     aaa:	99 0b       	sbc	r25, r25
     aac:	0e 5f       	subi	r16, 0xFE	; 254
     aae:	1f 4f       	sbci	r17, 0xFF	; 255
     ab0:	f3 2d       	mov	r31, r3
     ab2:	ff 76       	andi	r31, 0x6F	; 111
     ab4:	3f 2e       	mov	r3, r31
     ab6:	97 ff       	sbrs	r25, 7
     ab8:	09 c0       	rjmp	.+18     	; 0xacc <vfprintf+0x230>
     aba:	90 95       	com	r25
     abc:	80 95       	com	r24
     abe:	70 95       	com	r23
     ac0:	61 95       	neg	r22
     ac2:	7f 4f       	sbci	r23, 0xFF	; 255
     ac4:	8f 4f       	sbci	r24, 0xFF	; 255
     ac6:	9f 4f       	sbci	r25, 0xFF	; 255
     ac8:	f0 68       	ori	r31, 0x80	; 128
     aca:	3f 2e       	mov	r3, r31
     acc:	2a e0       	ldi	r18, 0x0A	; 10
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	a3 01       	movw	r20, r6
     ad2:	75 d2       	rcall	.+1258   	; 0xfbe <__ultoa_invert>
     ad4:	88 2e       	mov	r8, r24
     ad6:	86 18       	sub	r8, r6
     ad8:	44 c0       	rjmp	.+136    	; 0xb62 <vfprintf+0x2c6>
     ada:	85 37       	cpi	r24, 0x75	; 117
     adc:	31 f4       	brne	.+12     	; 0xaea <vfprintf+0x24e>
     ade:	23 2d       	mov	r18, r3
     ae0:	2f 7e       	andi	r18, 0xEF	; 239
     ae2:	b2 2e       	mov	r11, r18
     ae4:	2a e0       	ldi	r18, 0x0A	; 10
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	25 c0       	rjmp	.+74     	; 0xb34 <vfprintf+0x298>
     aea:	93 2d       	mov	r25, r3
     aec:	99 7f       	andi	r25, 0xF9	; 249
     aee:	b9 2e       	mov	r11, r25
     af0:	8f 36       	cpi	r24, 0x6F	; 111
     af2:	c1 f0       	breq	.+48     	; 0xb24 <vfprintf+0x288>
     af4:	18 f4       	brcc	.+6      	; 0xafc <vfprintf+0x260>
     af6:	88 35       	cpi	r24, 0x58	; 88
     af8:	79 f0       	breq	.+30     	; 0xb18 <vfprintf+0x27c>
     afa:	ae c0       	rjmp	.+348    	; 0xc58 <vfprintf+0x3bc>
     afc:	80 37       	cpi	r24, 0x70	; 112
     afe:	19 f0       	breq	.+6      	; 0xb06 <vfprintf+0x26a>
     b00:	88 37       	cpi	r24, 0x78	; 120
     b02:	21 f0       	breq	.+8      	; 0xb0c <vfprintf+0x270>
     b04:	a9 c0       	rjmp	.+338    	; 0xc58 <vfprintf+0x3bc>
     b06:	e9 2f       	mov	r30, r25
     b08:	e0 61       	ori	r30, 0x10	; 16
     b0a:	be 2e       	mov	r11, r30
     b0c:	b4 fe       	sbrs	r11, 4
     b0e:	0d c0       	rjmp	.+26     	; 0xb2a <vfprintf+0x28e>
     b10:	fb 2d       	mov	r31, r11
     b12:	f4 60       	ori	r31, 0x04	; 4
     b14:	bf 2e       	mov	r11, r31
     b16:	09 c0       	rjmp	.+18     	; 0xb2a <vfprintf+0x28e>
     b18:	34 fe       	sbrs	r3, 4
     b1a:	0a c0       	rjmp	.+20     	; 0xb30 <vfprintf+0x294>
     b1c:	29 2f       	mov	r18, r25
     b1e:	26 60       	ori	r18, 0x06	; 6
     b20:	b2 2e       	mov	r11, r18
     b22:	06 c0       	rjmp	.+12     	; 0xb30 <vfprintf+0x294>
     b24:	28 e0       	ldi	r18, 0x08	; 8
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	05 c0       	rjmp	.+10     	; 0xb34 <vfprintf+0x298>
     b2a:	20 e1       	ldi	r18, 0x10	; 16
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <vfprintf+0x298>
     b30:	20 e1       	ldi	r18, 0x10	; 16
     b32:	32 e0       	ldi	r19, 0x02	; 2
     b34:	f8 01       	movw	r30, r16
     b36:	b7 fe       	sbrs	r11, 7
     b38:	07 c0       	rjmp	.+14     	; 0xb48 <vfprintf+0x2ac>
     b3a:	60 81       	ld	r22, Z
     b3c:	71 81       	ldd	r23, Z+1	; 0x01
     b3e:	82 81       	ldd	r24, Z+2	; 0x02
     b40:	93 81       	ldd	r25, Z+3	; 0x03
     b42:	0c 5f       	subi	r16, 0xFC	; 252
     b44:	1f 4f       	sbci	r17, 0xFF	; 255
     b46:	06 c0       	rjmp	.+12     	; 0xb54 <vfprintf+0x2b8>
     b48:	60 81       	ld	r22, Z
     b4a:	71 81       	ldd	r23, Z+1	; 0x01
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 5f       	subi	r16, 0xFE	; 254
     b52:	1f 4f       	sbci	r17, 0xFF	; 255
     b54:	a3 01       	movw	r20, r6
     b56:	33 d2       	rcall	.+1126   	; 0xfbe <__ultoa_invert>
     b58:	88 2e       	mov	r8, r24
     b5a:	86 18       	sub	r8, r6
     b5c:	fb 2d       	mov	r31, r11
     b5e:	ff 77       	andi	r31, 0x7F	; 127
     b60:	3f 2e       	mov	r3, r31
     b62:	36 fe       	sbrs	r3, 6
     b64:	0d c0       	rjmp	.+26     	; 0xb80 <vfprintf+0x2e4>
     b66:	23 2d       	mov	r18, r3
     b68:	2e 7f       	andi	r18, 0xFE	; 254
     b6a:	a2 2e       	mov	r10, r18
     b6c:	89 14       	cp	r8, r9
     b6e:	58 f4       	brcc	.+22     	; 0xb86 <vfprintf+0x2ea>
     b70:	34 fe       	sbrs	r3, 4
     b72:	0b c0       	rjmp	.+22     	; 0xb8a <vfprintf+0x2ee>
     b74:	32 fc       	sbrc	r3, 2
     b76:	09 c0       	rjmp	.+18     	; 0xb8a <vfprintf+0x2ee>
     b78:	83 2d       	mov	r24, r3
     b7a:	8e 7e       	andi	r24, 0xEE	; 238
     b7c:	a8 2e       	mov	r10, r24
     b7e:	05 c0       	rjmp	.+10     	; 0xb8a <vfprintf+0x2ee>
     b80:	b8 2c       	mov	r11, r8
     b82:	a3 2c       	mov	r10, r3
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <vfprintf+0x2f0>
     b86:	b8 2c       	mov	r11, r8
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <vfprintf+0x2f0>
     b8a:	b9 2c       	mov	r11, r9
     b8c:	a4 fe       	sbrs	r10, 4
     b8e:	0f c0       	rjmp	.+30     	; 0xbae <vfprintf+0x312>
     b90:	fe 01       	movw	r30, r28
     b92:	e8 0d       	add	r30, r8
     b94:	f1 1d       	adc	r31, r1
     b96:	80 81       	ld	r24, Z
     b98:	80 33       	cpi	r24, 0x30	; 48
     b9a:	21 f4       	brne	.+8      	; 0xba4 <vfprintf+0x308>
     b9c:	9a 2d       	mov	r25, r10
     b9e:	99 7e       	andi	r25, 0xE9	; 233
     ba0:	a9 2e       	mov	r10, r25
     ba2:	09 c0       	rjmp	.+18     	; 0xbb6 <vfprintf+0x31a>
     ba4:	a2 fe       	sbrs	r10, 2
     ba6:	06 c0       	rjmp	.+12     	; 0xbb4 <vfprintf+0x318>
     ba8:	b3 94       	inc	r11
     baa:	b3 94       	inc	r11
     bac:	04 c0       	rjmp	.+8      	; 0xbb6 <vfprintf+0x31a>
     bae:	8a 2d       	mov	r24, r10
     bb0:	86 78       	andi	r24, 0x86	; 134
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <vfprintf+0x31a>
     bb4:	b3 94       	inc	r11
     bb6:	a3 fc       	sbrc	r10, 3
     bb8:	10 c0       	rjmp	.+32     	; 0xbda <vfprintf+0x33e>
     bba:	a0 fe       	sbrs	r10, 0
     bbc:	06 c0       	rjmp	.+12     	; 0xbca <vfprintf+0x32e>
     bbe:	b2 14       	cp	r11, r2
     bc0:	80 f4       	brcc	.+32     	; 0xbe2 <vfprintf+0x346>
     bc2:	28 0c       	add	r2, r8
     bc4:	92 2c       	mov	r9, r2
     bc6:	9b 18       	sub	r9, r11
     bc8:	0d c0       	rjmp	.+26     	; 0xbe4 <vfprintf+0x348>
     bca:	b2 14       	cp	r11, r2
     bcc:	58 f4       	brcc	.+22     	; 0xbe4 <vfprintf+0x348>
     bce:	b6 01       	movw	r22, r12
     bd0:	80 e2       	ldi	r24, 0x20	; 32
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	b8 d1       	rcall	.+880    	; 0xf46 <fputc>
     bd6:	b3 94       	inc	r11
     bd8:	f8 cf       	rjmp	.-16     	; 0xbca <vfprintf+0x32e>
     bda:	b2 14       	cp	r11, r2
     bdc:	18 f4       	brcc	.+6      	; 0xbe4 <vfprintf+0x348>
     bde:	2b 18       	sub	r2, r11
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <vfprintf+0x34a>
     be2:	98 2c       	mov	r9, r8
     be4:	21 2c       	mov	r2, r1
     be6:	a4 fe       	sbrs	r10, 4
     be8:	0f c0       	rjmp	.+30     	; 0xc08 <vfprintf+0x36c>
     bea:	b6 01       	movw	r22, r12
     bec:	80 e3       	ldi	r24, 0x30	; 48
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	aa d1       	rcall	.+852    	; 0xf46 <fputc>
     bf2:	a2 fe       	sbrs	r10, 2
     bf4:	16 c0       	rjmp	.+44     	; 0xc22 <vfprintf+0x386>
     bf6:	a1 fc       	sbrc	r10, 1
     bf8:	03 c0       	rjmp	.+6      	; 0xc00 <vfprintf+0x364>
     bfa:	88 e7       	ldi	r24, 0x78	; 120
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <vfprintf+0x368>
     c00:	88 e5       	ldi	r24, 0x58	; 88
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	b6 01       	movw	r22, r12
     c06:	0c c0       	rjmp	.+24     	; 0xc20 <vfprintf+0x384>
     c08:	8a 2d       	mov	r24, r10
     c0a:	86 78       	andi	r24, 0x86	; 134
     c0c:	51 f0       	breq	.+20     	; 0xc22 <vfprintf+0x386>
     c0e:	a1 fe       	sbrs	r10, 1
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <vfprintf+0x37a>
     c12:	8b e2       	ldi	r24, 0x2B	; 43
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <vfprintf+0x37c>
     c16:	80 e2       	ldi	r24, 0x20	; 32
     c18:	a7 fc       	sbrc	r10, 7
     c1a:	8d e2       	ldi	r24, 0x2D	; 45
     c1c:	b6 01       	movw	r22, r12
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	92 d1       	rcall	.+804    	; 0xf46 <fputc>
     c22:	89 14       	cp	r8, r9
     c24:	30 f4       	brcc	.+12     	; 0xc32 <vfprintf+0x396>
     c26:	b6 01       	movw	r22, r12
     c28:	80 e3       	ldi	r24, 0x30	; 48
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	8c d1       	rcall	.+792    	; 0xf46 <fputc>
     c2e:	9a 94       	dec	r9
     c30:	f8 cf       	rjmp	.-16     	; 0xc22 <vfprintf+0x386>
     c32:	8a 94       	dec	r8
     c34:	f3 01       	movw	r30, r6
     c36:	e8 0d       	add	r30, r8
     c38:	f1 1d       	adc	r31, r1
     c3a:	80 81       	ld	r24, Z
     c3c:	b6 01       	movw	r22, r12
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	82 d1       	rcall	.+772    	; 0xf46 <fputc>
     c42:	81 10       	cpse	r8, r1
     c44:	f6 cf       	rjmp	.-20     	; 0xc32 <vfprintf+0x396>
     c46:	22 20       	and	r2, r2
     c48:	09 f4       	brne	.+2      	; 0xc4c <vfprintf+0x3b0>
     c4a:	4e ce       	rjmp	.-868    	; 0x8e8 <vfprintf+0x4c>
     c4c:	b6 01       	movw	r22, r12
     c4e:	80 e2       	ldi	r24, 0x20	; 32
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	79 d1       	rcall	.+754    	; 0xf46 <fputc>
     c54:	2a 94       	dec	r2
     c56:	f7 cf       	rjmp	.-18     	; 0xc46 <vfprintf+0x3aa>
     c58:	f6 01       	movw	r30, r12
     c5a:	86 81       	ldd	r24, Z+6	; 0x06
     c5c:	97 81       	ldd	r25, Z+7	; 0x07
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <vfprintf+0x3c8>
     c60:	8f ef       	ldi	r24, 0xFF	; 255
     c62:	9f ef       	ldi	r25, 0xFF	; 255
     c64:	2b 96       	adiw	r28, 0x0b	; 11
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	df 90       	pop	r13
     c7e:	cf 90       	pop	r12
     c80:	bf 90       	pop	r11
     c82:	af 90       	pop	r10
     c84:	9f 90       	pop	r9
     c86:	8f 90       	pop	r8
     c88:	7f 90       	pop	r7
     c8a:	6f 90       	pop	r6
     c8c:	5f 90       	pop	r5
     c8e:	4f 90       	pop	r4
     c90:	3f 90       	pop	r3
     c92:	2f 90       	pop	r2
     c94:	08 95       	ret

00000c96 <calloc>:
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	86 9f       	mul	r24, r22
     ca0:	80 01       	movw	r16, r0
     ca2:	87 9f       	mul	r24, r23
     ca4:	10 0d       	add	r17, r0
     ca6:	96 9f       	mul	r25, r22
     ca8:	10 0d       	add	r17, r0
     caa:	11 24       	eor	r1, r1
     cac:	c8 01       	movw	r24, r16
     cae:	0d d0       	rcall	.+26     	; 0xcca <malloc>
     cb0:	ec 01       	movw	r28, r24
     cb2:	00 97       	sbiw	r24, 0x00	; 0
     cb4:	21 f0       	breq	.+8      	; 0xcbe <calloc+0x28>
     cb6:	a8 01       	movw	r20, r16
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	32 d1       	rcall	.+612    	; 0xf22 <memset>
     cbe:	ce 01       	movw	r24, r28
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	08 95       	ret

00000cca <malloc>:
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	82 30       	cpi	r24, 0x02	; 2
     cd4:	91 05       	cpc	r25, r1
     cd6:	10 f4       	brcc	.+4      	; 0xcdc <malloc+0x12>
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <__flp>
     ce0:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <__flp+0x1>
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	a0 e0       	ldi	r26, 0x00	; 0
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	30 97       	sbiw	r30, 0x00	; 0
     cee:	19 f1       	breq	.+70     	; 0xd36 <malloc+0x6c>
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	02 81       	ldd	r16, Z+2	; 0x02
     cf6:	13 81       	ldd	r17, Z+3	; 0x03
     cf8:	48 17       	cp	r20, r24
     cfa:	59 07       	cpc	r21, r25
     cfc:	c8 f0       	brcs	.+50     	; 0xd30 <malloc+0x66>
     cfe:	84 17       	cp	r24, r20
     d00:	95 07       	cpc	r25, r21
     d02:	69 f4       	brne	.+26     	; 0xd1e <malloc+0x54>
     d04:	10 97       	sbiw	r26, 0x00	; 0
     d06:	31 f0       	breq	.+12     	; 0xd14 <malloc+0x4a>
     d08:	12 96       	adiw	r26, 0x02	; 2
     d0a:	0c 93       	st	X, r16
     d0c:	12 97       	sbiw	r26, 0x02	; 2
     d0e:	13 96       	adiw	r26, 0x03	; 3
     d10:	1c 93       	st	X, r17
     d12:	27 c0       	rjmp	.+78     	; 0xd62 <malloc+0x98>
     d14:	00 93 b8 02 	sts	0x02B8, r16	; 0x8002b8 <__flp>
     d18:	10 93 b9 02 	sts	0x02B9, r17	; 0x8002b9 <__flp+0x1>
     d1c:	22 c0       	rjmp	.+68     	; 0xd62 <malloc+0x98>
     d1e:	21 15       	cp	r18, r1
     d20:	31 05       	cpc	r19, r1
     d22:	19 f0       	breq	.+6      	; 0xd2a <malloc+0x60>
     d24:	42 17       	cp	r20, r18
     d26:	53 07       	cpc	r21, r19
     d28:	18 f4       	brcc	.+6      	; 0xd30 <malloc+0x66>
     d2a:	9a 01       	movw	r18, r20
     d2c:	bd 01       	movw	r22, r26
     d2e:	ef 01       	movw	r28, r30
     d30:	df 01       	movw	r26, r30
     d32:	f8 01       	movw	r30, r16
     d34:	db cf       	rjmp	.-74     	; 0xcec <malloc+0x22>
     d36:	21 15       	cp	r18, r1
     d38:	31 05       	cpc	r19, r1
     d3a:	f9 f0       	breq	.+62     	; 0xd7a <malloc+0xb0>
     d3c:	28 1b       	sub	r18, r24
     d3e:	39 0b       	sbc	r19, r25
     d40:	24 30       	cpi	r18, 0x04	; 4
     d42:	31 05       	cpc	r19, r1
     d44:	80 f4       	brcc	.+32     	; 0xd66 <malloc+0x9c>
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	9b 81       	ldd	r25, Y+3	; 0x03
     d4a:	61 15       	cp	r22, r1
     d4c:	71 05       	cpc	r23, r1
     d4e:	21 f0       	breq	.+8      	; 0xd58 <malloc+0x8e>
     d50:	fb 01       	movw	r30, r22
     d52:	93 83       	std	Z+3, r25	; 0x03
     d54:	82 83       	std	Z+2, r24	; 0x02
     d56:	04 c0       	rjmp	.+8      	; 0xd60 <malloc+0x96>
     d58:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <__flp+0x1>
     d5c:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <__flp>
     d60:	fe 01       	movw	r30, r28
     d62:	32 96       	adiw	r30, 0x02	; 2
     d64:	44 c0       	rjmp	.+136    	; 0xdee <malloc+0x124>
     d66:	fe 01       	movw	r30, r28
     d68:	e2 0f       	add	r30, r18
     d6a:	f3 1f       	adc	r31, r19
     d6c:	81 93       	st	Z+, r24
     d6e:	91 93       	st	Z+, r25
     d70:	22 50       	subi	r18, 0x02	; 2
     d72:	31 09       	sbc	r19, r1
     d74:	39 83       	std	Y+1, r19	; 0x01
     d76:	28 83       	st	Y, r18
     d78:	3a c0       	rjmp	.+116    	; 0xdee <malloc+0x124>
     d7a:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <__brkval>
     d7e:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <__brkval+0x1>
     d82:	23 2b       	or	r18, r19
     d84:	41 f4       	brne	.+16     	; 0xd96 <malloc+0xcc>
     d86:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
     d8a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
     d8e:	30 93 b7 02 	sts	0x02B7, r19	; 0x8002b7 <__brkval+0x1>
     d92:	20 93 b6 02 	sts	0x02B6, r18	; 0x8002b6 <__brkval>
     d96:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     d9a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     d9e:	21 15       	cp	r18, r1
     da0:	31 05       	cpc	r19, r1
     da2:	41 f4       	brne	.+16     	; 0xdb4 <malloc+0xea>
     da4:	2d b7       	in	r18, 0x3d	; 61
     da6:	3e b7       	in	r19, 0x3e	; 62
     da8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
     dac:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
     db0:	24 1b       	sub	r18, r20
     db2:	35 0b       	sbc	r19, r21
     db4:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <__brkval>
     db8:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <__brkval+0x1>
     dbc:	e2 17       	cp	r30, r18
     dbe:	f3 07       	cpc	r31, r19
     dc0:	a0 f4       	brcc	.+40     	; 0xdea <malloc+0x120>
     dc2:	2e 1b       	sub	r18, r30
     dc4:	3f 0b       	sbc	r19, r31
     dc6:	28 17       	cp	r18, r24
     dc8:	39 07       	cpc	r19, r25
     dca:	78 f0       	brcs	.+30     	; 0xdea <malloc+0x120>
     dcc:	ac 01       	movw	r20, r24
     dce:	4e 5f       	subi	r20, 0xFE	; 254
     dd0:	5f 4f       	sbci	r21, 0xFF	; 255
     dd2:	24 17       	cp	r18, r20
     dd4:	35 07       	cpc	r19, r21
     dd6:	48 f0       	brcs	.+18     	; 0xdea <malloc+0x120>
     dd8:	4e 0f       	add	r20, r30
     dda:	5f 1f       	adc	r21, r31
     ddc:	50 93 b7 02 	sts	0x02B7, r21	; 0x8002b7 <__brkval+0x1>
     de0:	40 93 b6 02 	sts	0x02B6, r20	; 0x8002b6 <__brkval>
     de4:	81 93       	st	Z+, r24
     de6:	91 93       	st	Z+, r25
     de8:	02 c0       	rjmp	.+4      	; 0xdee <malloc+0x124>
     dea:	e0 e0       	ldi	r30, 0x00	; 0
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	cf 01       	movw	r24, r30
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	08 95       	ret

00000dfa <free>:
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	09 f4       	brne	.+2      	; 0xe04 <free+0xa>
     e02:	81 c0       	rjmp	.+258    	; 0xf06 <free+0x10c>
     e04:	fc 01       	movw	r30, r24
     e06:	32 97       	sbiw	r30, 0x02	; 2
     e08:	13 82       	std	Z+3, r1	; 0x03
     e0a:	12 82       	std	Z+2, r1	; 0x02
     e0c:	a0 91 b8 02 	lds	r26, 0x02B8	; 0x8002b8 <__flp>
     e10:	b0 91 b9 02 	lds	r27, 0x02B9	; 0x8002b9 <__flp+0x1>
     e14:	10 97       	sbiw	r26, 0x00	; 0
     e16:	81 f4       	brne	.+32     	; 0xe38 <free+0x3e>
     e18:	20 81       	ld	r18, Z
     e1a:	31 81       	ldd	r19, Z+1	; 0x01
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <__brkval>
     e24:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <__brkval+0x1>
     e28:	28 17       	cp	r18, r24
     e2a:	39 07       	cpc	r19, r25
     e2c:	51 f5       	brne	.+84     	; 0xe82 <free+0x88>
     e2e:	f0 93 b7 02 	sts	0x02B7, r31	; 0x8002b7 <__brkval+0x1>
     e32:	e0 93 b6 02 	sts	0x02B6, r30	; 0x8002b6 <__brkval>
     e36:	67 c0       	rjmp	.+206    	; 0xf06 <free+0x10c>
     e38:	ed 01       	movw	r28, r26
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	ce 17       	cp	r28, r30
     e40:	df 07       	cpc	r29, r31
     e42:	40 f4       	brcc	.+16     	; 0xe54 <free+0x5a>
     e44:	4a 81       	ldd	r20, Y+2	; 0x02
     e46:	5b 81       	ldd	r21, Y+3	; 0x03
     e48:	9e 01       	movw	r18, r28
     e4a:	41 15       	cp	r20, r1
     e4c:	51 05       	cpc	r21, r1
     e4e:	f1 f0       	breq	.+60     	; 0xe8c <free+0x92>
     e50:	ea 01       	movw	r28, r20
     e52:	f5 cf       	rjmp	.-22     	; 0xe3e <free+0x44>
     e54:	d3 83       	std	Z+3, r29	; 0x03
     e56:	c2 83       	std	Z+2, r28	; 0x02
     e58:	40 81       	ld	r20, Z
     e5a:	51 81       	ldd	r21, Z+1	; 0x01
     e5c:	84 0f       	add	r24, r20
     e5e:	95 1f       	adc	r25, r21
     e60:	c8 17       	cp	r28, r24
     e62:	d9 07       	cpc	r29, r25
     e64:	59 f4       	brne	.+22     	; 0xe7c <free+0x82>
     e66:	88 81       	ld	r24, Y
     e68:	99 81       	ldd	r25, Y+1	; 0x01
     e6a:	84 0f       	add	r24, r20
     e6c:	95 1f       	adc	r25, r21
     e6e:	02 96       	adiw	r24, 0x02	; 2
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	80 83       	st	Z, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	9b 81       	ldd	r25, Y+3	; 0x03
     e78:	93 83       	std	Z+3, r25	; 0x03
     e7a:	82 83       	std	Z+2, r24	; 0x02
     e7c:	21 15       	cp	r18, r1
     e7e:	31 05       	cpc	r19, r1
     e80:	29 f4       	brne	.+10     	; 0xe8c <free+0x92>
     e82:	f0 93 b9 02 	sts	0x02B9, r31	; 0x8002b9 <__flp+0x1>
     e86:	e0 93 b8 02 	sts	0x02B8, r30	; 0x8002b8 <__flp>
     e8a:	3d c0       	rjmp	.+122    	; 0xf06 <free+0x10c>
     e8c:	e9 01       	movw	r28, r18
     e8e:	fb 83       	std	Y+3, r31	; 0x03
     e90:	ea 83       	std	Y+2, r30	; 0x02
     e92:	49 91       	ld	r20, Y+
     e94:	59 91       	ld	r21, Y+
     e96:	c4 0f       	add	r28, r20
     e98:	d5 1f       	adc	r29, r21
     e9a:	ec 17       	cp	r30, r28
     e9c:	fd 07       	cpc	r31, r29
     e9e:	61 f4       	brne	.+24     	; 0xeb8 <free+0xbe>
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	84 0f       	add	r24, r20
     ea6:	95 1f       	adc	r25, r21
     ea8:	02 96       	adiw	r24, 0x02	; 2
     eaa:	e9 01       	movw	r28, r18
     eac:	99 83       	std	Y+1, r25	; 0x01
     eae:	88 83       	st	Y, r24
     eb0:	82 81       	ldd	r24, Z+2	; 0x02
     eb2:	93 81       	ldd	r25, Z+3	; 0x03
     eb4:	9b 83       	std	Y+3, r25	; 0x03
     eb6:	8a 83       	std	Y+2, r24	; 0x02
     eb8:	e0 e0       	ldi	r30, 0x00	; 0
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	12 96       	adiw	r26, 0x02	; 2
     ebe:	8d 91       	ld	r24, X+
     ec0:	9c 91       	ld	r25, X
     ec2:	13 97       	sbiw	r26, 0x03	; 3
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	19 f0       	breq	.+6      	; 0xece <free+0xd4>
     ec8:	fd 01       	movw	r30, r26
     eca:	dc 01       	movw	r26, r24
     ecc:	f7 cf       	rjmp	.-18     	; 0xebc <free+0xc2>
     ece:	8d 91       	ld	r24, X+
     ed0:	9c 91       	ld	r25, X
     ed2:	11 97       	sbiw	r26, 0x01	; 1
     ed4:	9d 01       	movw	r18, r26
     ed6:	2e 5f       	subi	r18, 0xFE	; 254
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	82 0f       	add	r24, r18
     edc:	93 1f       	adc	r25, r19
     ede:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <__brkval>
     ee2:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <__brkval+0x1>
     ee6:	28 17       	cp	r18, r24
     ee8:	39 07       	cpc	r19, r25
     eea:	69 f4       	brne	.+26     	; 0xf06 <free+0x10c>
     eec:	30 97       	sbiw	r30, 0x00	; 0
     eee:	29 f4       	brne	.+10     	; 0xefa <free+0x100>
     ef0:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <__flp+0x1>
     ef4:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <__flp>
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <free+0x104>
     efa:	13 82       	std	Z+3, r1	; 0x03
     efc:	12 82       	std	Z+2, r1	; 0x02
     efe:	b0 93 b7 02 	sts	0x02B7, r27	; 0x8002b7 <__brkval+0x1>
     f02:	a0 93 b6 02 	sts	0x02B6, r26	; 0x8002b6 <__brkval>
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	08 95       	ret

00000f0c <strnlen_P>:
     f0c:	fc 01       	movw	r30, r24
     f0e:	05 90       	lpm	r0, Z+
     f10:	61 50       	subi	r22, 0x01	; 1
     f12:	70 40       	sbci	r23, 0x00	; 0
     f14:	01 10       	cpse	r0, r1
     f16:	d8 f7       	brcc	.-10     	; 0xf0e <strnlen_P+0x2>
     f18:	80 95       	com	r24
     f1a:	90 95       	com	r25
     f1c:	8e 0f       	add	r24, r30
     f1e:	9f 1f       	adc	r25, r31
     f20:	08 95       	ret

00000f22 <memset>:
     f22:	dc 01       	movw	r26, r24
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <memset+0x6>
     f26:	6d 93       	st	X+, r22
     f28:	41 50       	subi	r20, 0x01	; 1
     f2a:	50 40       	sbci	r21, 0x00	; 0
     f2c:	e0 f7       	brcc	.-8      	; 0xf26 <memset+0x4>
     f2e:	08 95       	ret

00000f30 <strnlen>:
     f30:	fc 01       	movw	r30, r24
     f32:	61 50       	subi	r22, 0x01	; 1
     f34:	70 40       	sbci	r23, 0x00	; 0
     f36:	01 90       	ld	r0, Z+
     f38:	01 10       	cpse	r0, r1
     f3a:	d8 f7       	brcc	.-10     	; 0xf32 <strnlen+0x2>
     f3c:	80 95       	com	r24
     f3e:	90 95       	com	r25
     f40:	8e 0f       	add	r24, r30
     f42:	9f 1f       	adc	r25, r31
     f44:	08 95       	ret

00000f46 <fputc>:
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	fb 01       	movw	r30, r22
     f50:	23 81       	ldd	r18, Z+3	; 0x03
     f52:	21 fd       	sbrc	r18, 1
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <fputc+0x16>
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	9f ef       	ldi	r25, 0xFF	; 255
     f5a:	2c c0       	rjmp	.+88     	; 0xfb4 <fputc+0x6e>
     f5c:	22 ff       	sbrs	r18, 2
     f5e:	16 c0       	rjmp	.+44     	; 0xf8c <fputc+0x46>
     f60:	46 81       	ldd	r20, Z+6	; 0x06
     f62:	57 81       	ldd	r21, Z+7	; 0x07
     f64:	24 81       	ldd	r18, Z+4	; 0x04
     f66:	35 81       	ldd	r19, Z+5	; 0x05
     f68:	42 17       	cp	r20, r18
     f6a:	53 07       	cpc	r21, r19
     f6c:	44 f4       	brge	.+16     	; 0xf7e <fputc+0x38>
     f6e:	a0 81       	ld	r26, Z
     f70:	b1 81       	ldd	r27, Z+1	; 0x01
     f72:	9d 01       	movw	r18, r26
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	31 83       	std	Z+1, r19	; 0x01
     f7a:	20 83       	st	Z, r18
     f7c:	8c 93       	st	X, r24
     f7e:	26 81       	ldd	r18, Z+6	; 0x06
     f80:	37 81       	ldd	r19, Z+7	; 0x07
     f82:	2f 5f       	subi	r18, 0xFF	; 255
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
     f86:	37 83       	std	Z+7, r19	; 0x07
     f88:	26 83       	std	Z+6, r18	; 0x06
     f8a:	14 c0       	rjmp	.+40     	; 0xfb4 <fputc+0x6e>
     f8c:	8b 01       	movw	r16, r22
     f8e:	ec 01       	movw	r28, r24
     f90:	fb 01       	movw	r30, r22
     f92:	00 84       	ldd	r0, Z+8	; 0x08
     f94:	f1 85       	ldd	r31, Z+9	; 0x09
     f96:	e0 2d       	mov	r30, r0
     f98:	19 95       	eicall
     f9a:	89 2b       	or	r24, r25
     f9c:	e1 f6       	brne	.-72     	; 0xf56 <fputc+0x10>
     f9e:	d8 01       	movw	r26, r16
     fa0:	16 96       	adiw	r26, 0x06	; 6
     fa2:	8d 91       	ld	r24, X+
     fa4:	9c 91       	ld	r25, X
     fa6:	17 97       	sbiw	r26, 0x07	; 7
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	17 96       	adiw	r26, 0x07	; 7
     fac:	9c 93       	st	X, r25
     fae:	8e 93       	st	-X, r24
     fb0:	16 97       	sbiw	r26, 0x06	; 6
     fb2:	ce 01       	movw	r24, r28
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <__ultoa_invert>:
     fbe:	fa 01       	movw	r30, r20
     fc0:	aa 27       	eor	r26, r26
     fc2:	28 30       	cpi	r18, 0x08	; 8
     fc4:	51 f1       	breq	.+84     	; 0x101a <__ultoa_invert+0x5c>
     fc6:	20 31       	cpi	r18, 0x10	; 16
     fc8:	81 f1       	breq	.+96     	; 0x102a <__ultoa_invert+0x6c>
     fca:	e8 94       	clt
     fcc:	6f 93       	push	r22
     fce:	6e 7f       	andi	r22, 0xFE	; 254
     fd0:	6e 5f       	subi	r22, 0xFE	; 254
     fd2:	7f 4f       	sbci	r23, 0xFF	; 255
     fd4:	8f 4f       	sbci	r24, 0xFF	; 255
     fd6:	9f 4f       	sbci	r25, 0xFF	; 255
     fd8:	af 4f       	sbci	r26, 0xFF	; 255
     fda:	b1 e0       	ldi	r27, 0x01	; 1
     fdc:	3e d0       	rcall	.+124    	; 0x105a <__ultoa_invert+0x9c>
     fde:	b4 e0       	ldi	r27, 0x04	; 4
     fe0:	3c d0       	rcall	.+120    	; 0x105a <__ultoa_invert+0x9c>
     fe2:	67 0f       	add	r22, r23
     fe4:	78 1f       	adc	r23, r24
     fe6:	89 1f       	adc	r24, r25
     fe8:	9a 1f       	adc	r25, r26
     fea:	a1 1d       	adc	r26, r1
     fec:	68 0f       	add	r22, r24
     fee:	79 1f       	adc	r23, r25
     ff0:	8a 1f       	adc	r24, r26
     ff2:	91 1d       	adc	r25, r1
     ff4:	a1 1d       	adc	r26, r1
     ff6:	6a 0f       	add	r22, r26
     ff8:	71 1d       	adc	r23, r1
     ffa:	81 1d       	adc	r24, r1
     ffc:	91 1d       	adc	r25, r1
     ffe:	a1 1d       	adc	r26, r1
    1000:	20 d0       	rcall	.+64     	; 0x1042 <__ultoa_invert+0x84>
    1002:	09 f4       	brne	.+2      	; 0x1006 <__ultoa_invert+0x48>
    1004:	68 94       	set
    1006:	3f 91       	pop	r19
    1008:	2a e0       	ldi	r18, 0x0A	; 10
    100a:	26 9f       	mul	r18, r22
    100c:	11 24       	eor	r1, r1
    100e:	30 19       	sub	r19, r0
    1010:	30 5d       	subi	r19, 0xD0	; 208
    1012:	31 93       	st	Z+, r19
    1014:	de f6       	brtc	.-74     	; 0xfcc <__ultoa_invert+0xe>
    1016:	cf 01       	movw	r24, r30
    1018:	08 95       	ret
    101a:	46 2f       	mov	r20, r22
    101c:	47 70       	andi	r20, 0x07	; 7
    101e:	40 5d       	subi	r20, 0xD0	; 208
    1020:	41 93       	st	Z+, r20
    1022:	b3 e0       	ldi	r27, 0x03	; 3
    1024:	0f d0       	rcall	.+30     	; 0x1044 <__ultoa_invert+0x86>
    1026:	c9 f7       	brne	.-14     	; 0x101a <__ultoa_invert+0x5c>
    1028:	f6 cf       	rjmp	.-20     	; 0x1016 <__ultoa_invert+0x58>
    102a:	46 2f       	mov	r20, r22
    102c:	4f 70       	andi	r20, 0x0F	; 15
    102e:	40 5d       	subi	r20, 0xD0	; 208
    1030:	4a 33       	cpi	r20, 0x3A	; 58
    1032:	18 f0       	brcs	.+6      	; 0x103a <__ultoa_invert+0x7c>
    1034:	49 5d       	subi	r20, 0xD9	; 217
    1036:	31 fd       	sbrc	r19, 1
    1038:	40 52       	subi	r20, 0x20	; 32
    103a:	41 93       	st	Z+, r20
    103c:	02 d0       	rcall	.+4      	; 0x1042 <__ultoa_invert+0x84>
    103e:	a9 f7       	brne	.-22     	; 0x102a <__ultoa_invert+0x6c>
    1040:	ea cf       	rjmp	.-44     	; 0x1016 <__ultoa_invert+0x58>
    1042:	b4 e0       	ldi	r27, 0x04	; 4
    1044:	a6 95       	lsr	r26
    1046:	97 95       	ror	r25
    1048:	87 95       	ror	r24
    104a:	77 95       	ror	r23
    104c:	67 95       	ror	r22
    104e:	ba 95       	dec	r27
    1050:	c9 f7       	brne	.-14     	; 0x1044 <__ultoa_invert+0x86>
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	61 05       	cpc	r22, r1
    1056:	71 05       	cpc	r23, r1
    1058:	08 95       	ret
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	0a 2e       	mov	r0, r26
    1060:	06 94       	lsr	r0
    1062:	57 95       	ror	r21
    1064:	47 95       	ror	r20
    1066:	37 95       	ror	r19
    1068:	27 95       	ror	r18
    106a:	ba 95       	dec	r27
    106c:	c9 f7       	brne	.-14     	; 0x1060 <__ultoa_invert+0xa2>
    106e:	62 0f       	add	r22, r18
    1070:	73 1f       	adc	r23, r19
    1072:	84 1f       	adc	r24, r20
    1074:	95 1f       	adc	r25, r21
    1076:	a0 1d       	adc	r26, r0
    1078:	08 95       	ret

0000107a <_exit>:
    107a:	f8 94       	cli

0000107c <__stop_program>:
    107c:	ff cf       	rjmp	.-2      	; 0x107c <__stop_program>
