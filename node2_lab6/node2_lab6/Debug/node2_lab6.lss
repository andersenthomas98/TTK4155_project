
node2_lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ea  00800200  00000dc2  00000e56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002ea  008002ea  00000f40  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e69  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000797  00000000  00000000  00001f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008fe  00000000  00000000  000026c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  00002fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000369  00000000  00000000  00003280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b1  00000000  00000000  000035e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003c9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	65 c1       	rjmp	.+714    	; 0x2d8 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ec       	ldi	r30, 0xC2	; 194
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 3e       	cpi	r26, 0xEA	; 234
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa ee       	ldi	r26, 0xEA	; 234
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 3f       	cpi	r26, 0xF4	; 244
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ed d1       	rcall	.+986    	; 0x4fa <main>
 120:	4e c6       	rjmp	.+3228   	; 0xdbe <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:
#include <stddef.h>
#include "uart.h"


void CAN_init(void) {
	MCP_init();
 124:	61 d1       	rcall	.+706    	; 0x3e8 <MCP_init>
	
	// Enable recieve and message error interrupts
	printf("Before: %#X\n\r", MCP_read(MCP_CANINTE));
 126:	8b e2       	ldi	r24, 0x2B	; 43
 128:	62 d1       	rcall	.+708    	; 0x3ee <MCP_read>
 12a:	1f 92       	push	r1
 12c:	8f 93       	push	r24
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	92 e0       	ldi	r25, 0x02	; 2
 132:	9f 93       	push	r25
 134:	8f 93       	push	r24
 136:	56 d2       	rcall	.+1196   	; 0x5e4 <printf>
	MCP_bitModify(MCP_CANINTE, 0b10000101, 0b10000101);
 138:	45 e8       	ldi	r20, 0x85	; 133
 13a:	65 e8       	ldi	r22, 0x85	; 133
 13c:	8b e2       	ldi	r24, 0x2B	; 43
 13e:	86 d1       	rcall	.+780    	; 0x44c <MCP_bitModify>
	printf("After: %#X\n\r", MCP_read(MCP_CANINTE));
 140:	8b e2       	ldi	r24, 0x2B	; 43
 142:	55 d1       	rcall	.+682    	; 0x3ee <MCP_read>
 144:	1f 92       	push	r1
 146:	8f 93       	push	r24
 148:	84 e1       	ldi	r24, 0x14	; 20
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	9f 93       	push	r25
 14e:	8f 93       	push	r24
 150:	49 d2       	rcall	.+1170   	; 0x5e4 <printf>
	
	MCP_bitModify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);	//enter loopback mode
 152:	40 e4       	ldi	r20, 0x40	; 64
 154:	60 ee       	ldi	r22, 0xE0	; 224
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	79 d1       	rcall	.+754    	; 0x44c <MCP_bitModify>
//	MCP_bitModify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);	//enter normal mode
	MCP_bitModify(MCP_RXB0CTRL, 0b01100000, 0b01100000); // Turn mask/filters off, recieve any message
 15a:	40 e6       	ldi	r20, 0x60	; 96
 15c:	60 e6       	ldi	r22, 0x60	; 96
 15e:	80 e6       	ldi	r24, 0x60	; 96
 160:	75 d1       	rcall	.+746    	; 0x44c <MCP_bitModify>
	
	if (MCP_read(MCP_CANCTRL) & 0b01000000) {
 162:	8f e0       	ldi	r24, 0x0F	; 15
 164:	44 d1       	rcall	.+648    	; 0x3ee <MCP_read>
 166:	2d b7       	in	r18, 0x3d	; 61
 168:	3e b7       	in	r19, 0x3e	; 62
 16a:	28 5f       	subi	r18, 0xF8	; 248
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	3e bf       	out	0x3e, r19	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	2d bf       	out	0x3d, r18	; 61
 178:	86 ff       	sbrs	r24, 6
 17a:	07 c0       	rjmp	.+14     	; 0x18a <CAN_init+0x66>
		printf("CAN controller in loopback mode\n\r");
 17c:	81 e2       	ldi	r24, 0x21	; 33
 17e:	92 e0       	ldi	r25, 0x02	; 2
 180:	9f 93       	push	r25
 182:	8f 93       	push	r24
 184:	2f d2       	rcall	.+1118   	; 0x5e4 <printf>
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	08 95       	ret

0000018c <CAN_message_send>:
	}
}

void CAN_message_send(msg_ptr msgPtr) {
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	8c 01       	movw	r16, r24
	// Set TXB0SIDH (higher ID-register)
	MCP_write(MCP_TXB0CTRL + 1, (msgPtr->id));
 198:	fc 01       	movw	r30, r24
 19a:	60 81       	ld	r22, Z
 19c:	81 e3       	ldi	r24, 0x31	; 49
 19e:	32 d1       	rcall	.+612    	; 0x404 <MCP_write>
	
	// Set TXB0DLC (length register)
	MCP_write(MCP_TXB0CTRL + 5, (msgPtr->length));
 1a0:	f8 01       	movw	r30, r16
 1a2:	61 81       	ldd	r22, Z+1	; 0x01
 1a4:	85 e3       	ldi	r24, 0x35	; 53
 1a6:	2e d1       	rcall	.+604    	; 0x404 <MCP_write>
	
	int dataIterator = 0;
	for (uint8_t i = MCP_TXB0CTRL + 6; i <= MCP_TXB0CTRL + 6 + msgPtr->length; i++) {
 1a8:	f8 01       	movw	r30, r16
 1aa:	81 81       	ldd	r24, Z+1	; 0x01
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	c6 96       	adiw	r24, 0x36	; 54
 1b0:	c6 97       	sbiw	r24, 0x36	; 54
 1b2:	a4 f0       	brlt	.+40     	; 0x1dc <CAN_message_send+0x50>
 1b4:	e8 01       	movw	r28, r16
 1b6:	22 96       	adiw	r28, 0x02	; 2
 1b8:	0f 2e       	mov	r0, r31
 1ba:	f6 e3       	ldi	r31, 0x36	; 54
 1bc:	ff 2e       	mov	r15, r31
 1be:	f0 2d       	mov	r31, r0
		MCP_write(i, msgPtr->data[dataIterator]);
 1c0:	69 91       	ld	r22, Y+
 1c2:	8f 2d       	mov	r24, r15
 1c4:	1f d1       	rcall	.+574    	; 0x404 <MCP_write>
	
	// Set TXB0DLC (length register)
	MCP_write(MCP_TXB0CTRL + 5, (msgPtr->length));
	
	int dataIterator = 0;
	for (uint8_t i = MCP_TXB0CTRL + 6; i <= MCP_TXB0CTRL + 6 + msgPtr->length; i++) {
 1c6:	f3 94       	inc	r15
 1c8:	4f 2d       	mov	r20, r15
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	f8 01       	movw	r30, r16
 1ce:	21 81       	ldd	r18, Z+1	; 0x01
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	2a 5c       	subi	r18, 0xCA	; 202
 1d4:	3f 4f       	sbci	r19, 0xFF	; 255
 1d6:	24 17       	cp	r18, r20
 1d8:	35 07       	cpc	r19, r21
 1da:	94 f7       	brge	.-28     	; 0x1c0 <CAN_message_send+0x34>
		MCP_write(i, msgPtr->data[dataIterator]);
		dataIterator++;
	}
	MCP_requestToSend(0);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	20 d1       	rcall	.+576    	; 0x422 <MCP_requestToSend>
	// Transmission of CAN msg will start when the device detects that the bus is available...
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	08 95       	ret

000001ee <CAN_message_recieve>:

msg_t CAN_message_recieve(void) {
 1ee:	7f 92       	push	r7
 1f0:	8f 92       	push	r8
 1f2:	9f 92       	push	r9
 1f4:	af 92       	push	r10
 1f6:	bf 92       	push	r11
 1f8:	cf 92       	push	r12
 1fa:	df 92       	push	r13
 1fc:	ef 92       	push	r14
 1fe:	ff 92       	push	r15
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	2a 97       	sbiw	r28, 0x0a	; 10
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	de bf       	out	0x3e, r29	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	cd bf       	out	0x3d, r28	; 61
 218:	5c 01       	movw	r10, r24
	msg_t msg;
	
	// Read ID from RXB0SIDH and RXB0SIDL
	uint8_t upperId = MCP_read(MCP_RXB0CTRL + 1);
 21a:	81 e6       	ldi	r24, 0x61	; 97
 21c:	e8 d0       	rcall	.+464    	; 0x3ee <MCP_read>
 21e:	98 2e       	mov	r9, r24
	printf("recieved upper ID = %#X \n\r", upperId);
 220:	1f 92       	push	r1
 222:	8f 93       	push	r24
 224:	23 e4       	ldi	r18, 0x43	; 67
 226:	32 e0       	ldi	r19, 0x02	; 2
 228:	3f 93       	push	r19
 22a:	2f 93       	push	r18
 22c:	db d1       	rcall	.+950    	; 0x5e4 <printf>
	//printf("recieved lower ID = %#X \n\r", lowerId);
	//msg.id =  (upperId << 8) + lowerId;
	msg.id = upperId ;
	
	// Read length from RXB0DLC
	msg.length = MCP_read(MCP_RXB0CTRL + 5);
 22e:	85 e6       	ldi	r24, 0x65	; 101
 230:	de d0       	rcall	.+444    	; 0x3ee <MCP_read>
 232:	88 2e       	mov	r8, r24
	
	// Read data
	int dataIterator = 0;
	for (uint8_t i = MCP_RXB0CTRL + 6; i <= MCP_RXB0CTRL + 6 + msg.length; i++) {
 234:	e8 2e       	mov	r14, r24
 236:	f1 2c       	mov	r15, r1
 238:	86 e6       	ldi	r24, 0x66	; 102
 23a:	e8 0e       	add	r14, r24
 23c:	f1 1c       	adc	r15, r1
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	96 e6       	ldi	r25, 0x66	; 102
 248:	e9 16       	cp	r14, r25
 24a:	f1 04       	cpc	r15, r1
 24c:	d4 f0       	brlt	.+52     	; 0x282 <CAN_message_recieve+0x94>
 24e:	8e 01       	movw	r16, r28
 250:	0d 5f       	subi	r16, 0xFD	; 253
 252:	1f 4f       	sbci	r17, 0xFF	; 255
 254:	0f 2e       	mov	r0, r31
 256:	f6 e6       	ldi	r31, 0x66	; 102
 258:	7f 2e       	mov	r7, r31
 25a:	f0 2d       	mov	r31, r0
 25c:	9e 01       	movw	r18, r28
 25e:	20 95       	com	r18
 260:	30 95       	com	r19
 262:	f9 01       	movw	r30, r18
 264:	ec 59       	subi	r30, 0x9C	; 156
 266:	ff 4f       	sbci	r31, 0xFF	; 255
 268:	6f 01       	movw	r12, r30
		msg.data[dataIterator] = MCP_read(i);
 26a:	87 2d       	mov	r24, r7
 26c:	c0 d0       	rcall	.+384    	; 0x3ee <MCP_read>
 26e:	f8 01       	movw	r30, r16
 270:	81 93       	st	Z+, r24
 272:	8f 01       	movw	r16, r30
	// Read length from RXB0DLC
	msg.length = MCP_read(MCP_RXB0CTRL + 5);
	
	// Read data
	int dataIterator = 0;
	for (uint8_t i = MCP_RXB0CTRL + 6; i <= MCP_RXB0CTRL + 6 + msg.length; i++) {
 274:	73 94       	inc	r7
 276:	96 01       	movw	r18, r12
 278:	2e 0f       	add	r18, r30
 27a:	3f 1f       	adc	r19, r31
 27c:	e2 16       	cp	r14, r18
 27e:	f3 06       	cpc	r15, r19
 280:	a4 f7       	brge	.-24     	; 0x26a <CAN_message_recieve+0x7c>
		msg.data[dataIterator] = MCP_read(i);
		dataIterator++;
	}
	return msg;
 282:	99 82       	std	Y+1, r9	; 0x01
 284:	8a 82       	std	Y+2, r8	; 0x02
 286:	8a e0       	ldi	r24, 0x0A	; 10
 288:	fe 01       	movw	r30, r28
 28a:	31 96       	adiw	r30, 0x01	; 1
 28c:	d5 01       	movw	r26, r10
 28e:	01 90       	ld	r0, Z+
 290:	0d 92       	st	X+, r0
 292:	8a 95       	dec	r24
 294:	e1 f7       	brne	.-8      	; 0x28e <CAN_message_recieve+0xa0>
} 
 296:	c5 01       	movw	r24, r10
 298:	2a 96       	adiw	r28, 0x0a	; 10
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	df 90       	pop	r13
 2b2:	cf 90       	pop	r12
 2b4:	bf 90       	pop	r11
 2b6:	af 90       	pop	r10
 2b8:	9f 90       	pop	r9
 2ba:	8f 90       	pop	r8
 2bc:	7f 90       	pop	r7
 2be:	08 95       	ret

000002c0 <INTERRUPT_init>:
volatile int ADC_INTERRUPT_READY = 0;
//volatile int SPI_TRANSMISSION_COMPLETE = 0;

void INTERRUPT_init() {
	// disable global interrupts (set SREG register)
	cli();
 2c0:	f8 94       	cli
	
	// The falling edge of INT2 generates an interrupt request
	EICRA &= ~(1 << ISC20);
 2c2:	e9 e6       	ldi	r30, 0x69	; 105
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	8f 7e       	andi	r24, 0xEF	; 239
 2ca:	80 83       	st	Z, r24
	EICRA |= (1 << ISC21); 
 2cc:	80 81       	ld	r24, Z
 2ce:	80 62       	ori	r24, 0x20	; 32
 2d0:	80 83       	st	Z, r24
	
	// Enable interrupt on INT2
	EIMSK |= (1 << INT2);
 2d2:	ea 9a       	sbi	0x1d, 2	; 29
		
	// Enable global interrupts (set SREG register)
	sei();
 2d4:	78 94       	sei
 2d6:	08 95       	ret

000002d8 <__vector_3>:
}


// CAN interrupts
ISR(INT2_vect) {
 2d8:	1f 92       	push	r1
 2da:	0f 92       	push	r0
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	0f 92       	push	r0
 2e0:	11 24       	eor	r1, r1
 2e2:	0b b6       	in	r0, 0x3b	; 59
 2e4:	0f 92       	push	r0
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	2a 97       	sbiw	r28, 0x0a	; 10
 308:	de bf       	out	0x3e, r29	; 62
 30a:	cd bf       	out	0x3d, r28	; 61
	printf("interrupt\n\r");
 30c:	8e e5       	ldi	r24, 0x5E	; 94
 30e:	92 e0       	ldi	r25, 0x02	; 2
 310:	9f 93       	push	r25
 312:	8f 93       	push	r24
 314:	67 d1       	rcall	.+718    	; 0x5e4 <printf>
	if (MCP_read(MCP_CANINTF) & MCP_TX0IF) {
 316:	8c e2       	ldi	r24, 0x2C	; 44
 318:	6a d0       	rcall	.+212    	; 0x3ee <MCP_read>
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	82 ff       	sbrs	r24, 2
 320:	0b c0       	rjmp	.+22     	; 0x338 <__vector_3+0x60>
		printf("Message sendt succesfully\n\r");
 322:	8a e6       	ldi	r24, 0x6A	; 106
 324:	92 e0       	ldi	r25, 0x02	; 2
 326:	9f 93       	push	r25
 328:	8f 93       	push	r24
 32a:	5c d1       	rcall	.+696    	; 0x5e4 <printf>
		
		// Reset transmit flag
		MCP_bitModify(MCP_CANINTF, MCP_TX0IF, 0);
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	64 e0       	ldi	r22, 0x04	; 4
 330:	8c e2       	ldi	r24, 0x2C	; 44
 332:	8c d0       	rcall	.+280    	; 0x44c <MCP_bitModify>
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
	}
	// Message recieved at recieve buffer 0
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF) {
 338:	8c e2       	ldi	r24, 0x2C	; 44
 33a:	59 d0       	rcall	.+178    	; 0x3ee <MCP_read>
 33c:	80 ff       	sbrs	r24, 0
 33e:	29 c0       	rjmp	.+82     	; 0x392 <__vector_3+0xba>
		struct CAN_message msg = CAN_message_recieve();
 340:	ce 01       	movw	r24, r28
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	54 df       	rcall	.-344    	; 0x1ee <CAN_message_recieve>
		printf("--- Message recieved ---\n\r");
 346:	86 e8       	ldi	r24, 0x86	; 134
 348:	92 e0       	ldi	r25, 0x02	; 2
 34a:	9f 93       	push	r25
 34c:	8f 93       	push	r24
 34e:	4a d1       	rcall	.+660    	; 0x5e4 <printf>
		printf("ID: %#X \n\r", msg.id);
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	1f 92       	push	r1
 354:	8f 93       	push	r24
 356:	81 ea       	ldi	r24, 0xA1	; 161
 358:	92 e0       	ldi	r25, 0x02	; 2
 35a:	9f 93       	push	r25
 35c:	8f 93       	push	r24
 35e:	42 d1       	rcall	.+644    	; 0x5e4 <printf>
		printf("Length: %d \n\r", msg.length);
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	1f 92       	push	r1
 364:	8f 93       	push	r24
 366:	8c ea       	ldi	r24, 0xAC	; 172
 368:	92 e0       	ldi	r25, 0x02	; 2
 36a:	9f 93       	push	r25
 36c:	8f 93       	push	r24
 36e:	3a d1       	rcall	.+628    	; 0x5e4 <printf>
		printf("Data[0] = %#X \n\r", msg.data[0]);
 370:	8b 81       	ldd	r24, Y+3	; 0x03
 372:	1f 92       	push	r1
 374:	8f 93       	push	r24
 376:	8a eb       	ldi	r24, 0xBA	; 186
 378:	92 e0       	ldi	r25, 0x02	; 2
 37a:	9f 93       	push	r25
 37c:	8f 93       	push	r24
 37e:	32 d1       	rcall	.+612    	; 0x5e4 <printf>
	
		// Reset recieve flag
		MCP_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	8c e2       	ldi	r24, 0x2C	; 44
 386:	62 d0       	rcall	.+196    	; 0x44c <MCP_bitModify>
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
	}
	if (MCP_read(MCP_CANINTF) & MCP_MERRF) {
 392:	8c e2       	ldi	r24, 0x2C	; 44
 394:	2c d0       	rcall	.+88     	; 0x3ee <MCP_read>
 396:	88 23       	and	r24, r24
 398:	3c f4       	brge	.+14     	; 0x3a8 <__vector_3+0xd0>
		printf("CAN BUS ERROR!");
 39a:	8b ec       	ldi	r24, 0xCB	; 203
 39c:	92 e0       	ldi	r25, 0x02	; 2
 39e:	9f 93       	push	r25
 3a0:	8f 93       	push	r24
 3a2:	20 d1       	rcall	.+576    	; 0x5e4 <printf>
 3a4:	0f 90       	pop	r0
 3a6:	0f 90       	pop	r0
	}
}
 3a8:	2a 96       	adiw	r28, 0x0a	; 10
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	0b be       	out	0x3b, r0	; 59
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <MCP_reset>:
}


void MCP_reset(void) {
	// Initiate data transmission
	PORTB &= ~(1 << PB0);
 3de:	28 98       	cbi	0x05, 0	; 5
	
	// Send RESET instruction
	SPI_transmit(MCP_RESET);
 3e0:	80 ec       	ldi	r24, 0xC0	; 192
 3e2:	5f d0       	rcall	.+190    	; 0x4a2 <SPI_transmit>
	
	// End data transmission
	PORTB |= (1 << PB0);
 3e4:	28 9a       	sbi	0x05, 0	; 5
 3e6:	08 95       	ret

000003e8 <MCP_init>:
#include <avr/io.h>
#define F_CPU 4915200
#include <avr/delay.h>

void MCP_init(void) {
	SPI_MasterInit();
 3e8:	45 d0       	rcall	.+138    	; 0x474 <SPI_MasterInit>
	MCP_reset();
 3ea:	f9 cf       	rjmp	.-14     	; 0x3de <MCP_reset>
 3ec:	08 95       	ret

000003ee <MCP_read>:
	// End data transmission
	PORTB |= (1 << PB0);
}


uint8_t MCP_read(uint8_t address) {
 3ee:	cf 93       	push	r28
 3f0:	c8 2f       	mov	r28, r24
	uint8_t data;
	
	// Select CAN controller
	PORTB &= ~(1 << PB0);
 3f2:	28 98       	cbi	0x05, 0	; 5
	
	// Send READ instruction
	SPI_transmit(MCP_READ);
 3f4:	83 e0       	ldi	r24, 0x03	; 3
 3f6:	55 d0       	rcall	.+170    	; 0x4a2 <SPI_transmit>
	
	// Send address
	SPI_transmit(address);
 3f8:	8c 2f       	mov	r24, r28
 3fa:	53 d0       	rcall	.+166    	; 0x4a2 <SPI_transmit>
	
	// Read from address specified over
	data = SPI_read();
 3fc:	57 d0       	rcall	.+174    	; 0x4ac <SPI_read>
	
	// Deselect CAN controller
	PORTB |= (1 << PB0);
 3fe:	28 9a       	sbi	0x05, 0	; 5
	
	return data;
	
}
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <MCP_write>:

void MCP_write(uint8_t address, uint8_t data) {
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	d8 2f       	mov	r29, r24
 40a:	c6 2f       	mov	r28, r22
	// Select CAN controller
	PORTB &= ~(1 << PB0);
 40c:	28 98       	cbi	0x05, 0	; 5
	
	// Send WRITE instruction
	SPI_transmit(MCP_WRITE);
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	48 d0       	rcall	.+144    	; 0x4a2 <SPI_transmit>
	
	// Send address
	SPI_transmit(address);
 412:	8d 2f       	mov	r24, r29
 414:	46 d0       	rcall	.+140    	; 0x4a2 <SPI_transmit>
	
	// Send data
	SPI_transmit(data);
 416:	8c 2f       	mov	r24, r28
 418:	44 d0       	rcall	.+136    	; 0x4a2 <SPI_transmit>
	
	// Deselect CAN controller
	PORTB |= (1 << PB0);
 41a:	28 9a       	sbi	0x05, 0	; 5
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <MCP_requestToSend>:

void MCP_requestToSend(int buffer) {
	// Select CAN controller
	PORTB &= ~(1 << PB0);
 422:	28 98       	cbi	0x05, 0	; 5
	
	// RTS from buffer 0, 1, 2, or all
	if (buffer == 0) {
 424:	00 97       	sbiw	r24, 0x00	; 0
 426:	19 f4       	brne	.+6      	; 0x42e <MCP_requestToSend+0xc>
		SPI_transmit(MCP_RTS_TX0);
 428:	81 e8       	ldi	r24, 0x81	; 129
 42a:	3b d0       	rcall	.+118    	; 0x4a2 <SPI_transmit>
 42c:	0d c0       	rjmp	.+26     	; 0x448 <MCP_requestToSend+0x26>
	}
	else if (buffer == 1) {
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	91 05       	cpc	r25, r1
 432:	19 f4       	brne	.+6      	; 0x43a <MCP_requestToSend+0x18>
		SPI_transmit(MCP_RTS_TX1);
 434:	82 e8       	ldi	r24, 0x82	; 130
 436:	35 d0       	rcall	.+106    	; 0x4a2 <SPI_transmit>
 438:	07 c0       	rjmp	.+14     	; 0x448 <MCP_requestToSend+0x26>
	}
	else if (buffer == 2) {
 43a:	02 97       	sbiw	r24, 0x02	; 2
 43c:	19 f4       	brne	.+6      	; 0x444 <MCP_requestToSend+0x22>
		SPI_transmit(MCP_RTS_TX2);
 43e:	84 e8       	ldi	r24, 0x84	; 132
 440:	30 d0       	rcall	.+96     	; 0x4a2 <SPI_transmit>
 442:	02 c0       	rjmp	.+4      	; 0x448 <MCP_requestToSend+0x26>
	}
	else {
		SPI_transmit(MCP_RTS_ALL);
 444:	87 e8       	ldi	r24, 0x87	; 135
 446:	2d d0       	rcall	.+90     	; 0x4a2 <SPI_transmit>
	}
	
	// Deselect CAN controller
	PORTB |= (1 << PB0);
 448:	28 9a       	sbi	0x05, 0	; 5
 44a:	08 95       	ret

0000044c <MCP_bitModify>:
}

void MCP_bitModify(uint8_t address, uint8_t mask, uint8_t data) {
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	18 2f       	mov	r17, r24
 454:	d6 2f       	mov	r29, r22
 456:	c4 2f       	mov	r28, r20
	// Select CAN controller
	PORTB &= ~(1 << PB0);
 458:	28 98       	cbi	0x05, 0	; 5
	
	// Send BIT MODIFY instruction
	SPI_transmit(MCP_BITMOD);
 45a:	85 e0       	ldi	r24, 0x05	; 5
 45c:	22 d0       	rcall	.+68     	; 0x4a2 <SPI_transmit>
	
	// Send address of register
	SPI_transmit(address);
 45e:	81 2f       	mov	r24, r17
 460:	20 d0       	rcall	.+64     	; 0x4a2 <SPI_transmit>
	
	// Send mask byte
	SPI_transmit(mask);
 462:	8d 2f       	mov	r24, r29
 464:	1e d0       	rcall	.+60     	; 0x4a2 <SPI_transmit>
	
	// Send data byte
	SPI_transmit(data);
 466:	8c 2f       	mov	r24, r28
 468:	1c d0       	rcall	.+56     	; 0x4a2 <SPI_transmit>
	
	// Deselect CAN controller
	PORTB |= (1 << PB0);
 46a:	28 9a       	sbi	0x05, 0	; 5
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	08 95       	ret

00000474 <SPI_MasterInit>:
#include "interrupt.h"
#include <avr/io.h>

void SPI_MasterInit(void) {
	// Set PB0 (/SS), PB2 (MOSI) and PB1 (SCK) as output
	DDRB |= (1 << DDB0) | (1 << DDB2) | (1 << DDB1);
 474:	84 b1       	in	r24, 0x04	; 4
 476:	87 60       	ori	r24, 0x07	; 7
 478:	84 b9       	out	0x04, r24	; 4
	
	// Set PB3 (MISO) as input
	DDRB &= ~(1 << DDB3);
 47a:	23 98       	cbi	0x04, 3	; 4
	
	// Select Master SPI mode, SPI enable
	SPCR |= (1 << MSTR) | (1 << SPE);
 47c:	8c b5       	in	r24, 0x2c	; 44
 47e:	80 65       	ori	r24, 0x50	; 80
 480:	8c bd       	out	0x2c, r24	; 44
	
	// Transmit MSB of the data word first
	SPCR &= ~(1 << DORD);
 482:	8c b5       	in	r24, 0x2c	; 44
 484:	8f 7d       	andi	r24, 0xDF	; 223
 486:	8c bd       	out	0x2c, r24	; 44
	
	// Configure clock polarity (SCK is low when idle)
	SPCR &= ~(1 << CPOL);
 488:	8c b5       	in	r24, 0x2c	; 44
 48a:	87 7f       	andi	r24, 0xF7	; 247
 48c:	8c bd       	out	0x2c, r24	; 44
	
	// Configure clock phase (data is sampled on leading edge)
	SPCR &= ~(1 << CPHA);
 48e:	8c b5       	in	r24, 0x2c	; 44
 490:	8b 7f       	andi	r24, 0xFB	; 251
 492:	8c bd       	out	0x2c, r24	; 44
	
	// Configure SCK rate (f_osc/4)
	SPCR &= ~(1 << SPR0);
 494:	8c b5       	in	r24, 0x2c	; 44
 496:	8e 7f       	andi	r24, 0xFE	; 254
 498:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~(1 << SPR1);
 49a:	8c b5       	in	r24, 0x2c	; 44
 49c:	8d 7f       	andi	r24, 0xFD	; 253
 49e:	8c bd       	out	0x2c, r24	; 44
 4a0:	08 95       	ret

000004a2 <SPI_transmit>:
}

void SPI_transmit(uint8_t data) {
	// Initiate data transmission
	SPDR = data;
 4a2:	8e bd       	out	0x2e, r24	; 46
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
 4a4:	0d b4       	in	r0, 0x2d	; 45
 4a6:	07 fe       	sbrs	r0, 7
 4a8:	fd cf       	rjmp	.-6      	; 0x4a4 <SPI_transmit+0x2>
}	
 4aa:	08 95       	ret

000004ac <SPI_read>:

uint8_t SPI_read(void) {
	SPDR = 0xFF; // Send dummy byte
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	8e bd       	out	0x2e, r24	; 46
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
 4b0:	0d b4       	in	r0, 0x2d	; 45
 4b2:	07 fe       	sbrs	r0, 7
 4b4:	fd cf       	rjmp	.-6      	; 0x4b0 <SPI_read+0x4>
	
	return SPDR;
 4b6:	8e b5       	in	r24, 0x2e	; 46
	// SPIF bit in SPSR register is reset when accessing SPDR
}
 4b8:	08 95       	ret

000004ba <UART_transmit>:
#include <util/delay.h>
#include "uart.h"

void UART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while ( ! (UCSR0A & (1<<UDRE0))) {
 4ba:	e0 ec       	ldi	r30, 0xC0	; 192
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	90 81       	ld	r25, Z
 4c0:	95 ff       	sbrs	r25, 5
 4c2:	fd cf       	rjmp	.-6      	; 0x4be <UART_transmit+0x4>
		// waiting...
	}
	// Put data into buffer, sends the data
	UDR0 = data;
 4c4:	80 93 c6 00 	sts	0x00C6, r24
 4c8:	08 95       	ret

000004ca <UART_receive>:
}

unsigned char UART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1 << RXC0))) {
 4ca:	e0 ec       	ldi	r30, 0xC0	; 192
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	88 23       	and	r24, r24
 4d2:	ec f7       	brge	.-6      	; 0x4ce <UART_receive+0x4>
		// wait...
	}
	return UDR0;
 4d4:	80 91 c6 00 	lds	r24, 0x00C6
	
}
 4d8:	08 95       	ret

000004da <UART_init>:

void UART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = ubrr>>8;
 4da:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = ubrr;
 4de:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 4e2:	88 e1       	ldi	r24, 0x18	; 24
 4e4:	80 93 c1 00 	sts	0x00C1, r24
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
 4e8:	8e e0       	ldi	r24, 0x0E	; 14
 4ea:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(UART_transmit, UART_receive);
 4ee:	65 e6       	ldi	r22, 0x65	; 101
 4f0:	72 e0       	ldi	r23, 0x02	; 2
 4f2:	8d e5       	ldi	r24, 0x5D	; 93
 4f4:	92 e0       	ldi	r25, 0x02	; 2
 4f6:	2c c0       	rjmp	.+88     	; 0x550 <fdevopen>
 4f8:	08 95       	ret

000004fa <main>:
#define F_CPU 16000000
#include <util/delay.h>
#define MYUBRR 103

int main(void)
{
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
 502:	2a 97       	sbiw	r28, 0x0a	; 10
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	f8 94       	cli
 508:	de bf       	out	0x3e, r29	; 62
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);
 50e:	87 e6       	ldi	r24, 0x67	; 103
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	e3 df       	rcall	.-58     	; 0x4da <UART_init>
	INTERRUPT_init();
 514:	d5 de       	rcall	.-598    	; 0x2c0 <INTERRUPT_init>
	CAN_init();
 516:	06 de       	rcall	.-1012   	; 0x124 <CAN_init>
	
	msg_t msg;
	msg.id = 0xA5;
 518:	85 ea       	ldi	r24, 0xA5	; 165
 51a:	89 83       	std	Y+1, r24	; 0x01
	msg.length = 3;
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	8a 83       	std	Y+2, r24	; 0x02
	msg.data[0] = 0xC;
 520:	8c e0       	ldi	r24, 0x0C	; 12
 522:	8b 83       	std	Y+3, r24	; 0x03
	msg.data[1] = 0xF;
 524:	8f e0       	ldi	r24, 0x0F	; 15
 526:	8c 83       	std	Y+4, r24	; 0x04
	msg_ptr msgPtr = &msg;
	
    while(1)
    {
		printf("new iteration\n\r");
 528:	0a ed       	ldi	r16, 0xDA	; 218
 52a:	12 e0       	ldi	r17, 0x02	; 2
 52c:	1f 93       	push	r17
 52e:	0f 93       	push	r16
 530:	59 d0       	rcall	.+178    	; 0x5e4 <printf>
        CAN_message_send(msgPtr);
 532:	ce 01       	movw	r24, r28
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	2a de       	rcall	.-940    	; 0x18c <CAN_message_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 538:	2f ef       	ldi	r18, 0xFF	; 255
 53a:	83 ed       	ldi	r24, 0xD3	; 211
 53c:	90 e3       	ldi	r25, 0x30	; 48
 53e:	21 50       	subi	r18, 0x01	; 1
 540:	80 40       	sbci	r24, 0x00	; 0
 542:	90 40       	sbci	r25, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <main+0x44>
 546:	00 c0       	rjmp	.+0      	; 0x548 <main+0x4e>
 548:	00 00       	nop
 54a:	0f 90       	pop	r0
 54c:	0f 90       	pop	r0
 54e:	ee cf       	rjmp	.-36     	; 0x52c <main+0x32>

00000550 <fdevopen>:
 550:	0f 93       	push	r16
 552:	1f 93       	push	r17
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	ec 01       	movw	r28, r24
 55a:	8b 01       	movw	r16, r22
 55c:	00 97       	sbiw	r24, 0x00	; 0
 55e:	31 f4       	brne	.+12     	; 0x56c <fdevopen+0x1c>
 560:	61 15       	cp	r22, r1
 562:	71 05       	cpc	r23, r1
 564:	19 f4       	brne	.+6      	; 0x56c <fdevopen+0x1c>
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	37 c0       	rjmp	.+110    	; 0x5da <fdevopen+0x8a>
 56c:	6e e0       	ldi	r22, 0x0E	; 14
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	36 d2       	rcall	.+1132   	; 0x9e2 <calloc>
 576:	fc 01       	movw	r30, r24
 578:	00 97       	sbiw	r24, 0x00	; 0
 57a:	a9 f3       	breq	.-22     	; 0x566 <fdevopen+0x16>
 57c:	80 e8       	ldi	r24, 0x80	; 128
 57e:	83 83       	std	Z+3, r24	; 0x03
 580:	01 15       	cp	r16, r1
 582:	11 05       	cpc	r17, r1
 584:	71 f0       	breq	.+28     	; 0x5a2 <fdevopen+0x52>
 586:	13 87       	std	Z+11, r17	; 0x0b
 588:	02 87       	std	Z+10, r16	; 0x0a
 58a:	81 e8       	ldi	r24, 0x81	; 129
 58c:	83 83       	std	Z+3, r24	; 0x03
 58e:	80 91 ea 02 	lds	r24, 0x02EA
 592:	90 91 eb 02 	lds	r25, 0x02EB
 596:	89 2b       	or	r24, r25
 598:	21 f4       	brne	.+8      	; 0x5a2 <fdevopen+0x52>
 59a:	f0 93 eb 02 	sts	0x02EB, r31
 59e:	e0 93 ea 02 	sts	0x02EA, r30
 5a2:	20 97       	sbiw	r28, 0x00	; 0
 5a4:	c9 f0       	breq	.+50     	; 0x5d8 <fdevopen+0x88>
 5a6:	d1 87       	std	Z+9, r29	; 0x09
 5a8:	c0 87       	std	Z+8, r28	; 0x08
 5aa:	83 81       	ldd	r24, Z+3	; 0x03
 5ac:	82 60       	ori	r24, 0x02	; 2
 5ae:	83 83       	std	Z+3, r24	; 0x03
 5b0:	80 91 ec 02 	lds	r24, 0x02EC
 5b4:	90 91 ed 02 	lds	r25, 0x02ED
 5b8:	89 2b       	or	r24, r25
 5ba:	71 f4       	brne	.+28     	; 0x5d8 <fdevopen+0x88>
 5bc:	f0 93 ed 02 	sts	0x02ED, r31
 5c0:	e0 93 ec 02 	sts	0x02EC, r30
 5c4:	80 91 ee 02 	lds	r24, 0x02EE
 5c8:	90 91 ef 02 	lds	r25, 0x02EF
 5cc:	89 2b       	or	r24, r25
 5ce:	21 f4       	brne	.+8      	; 0x5d8 <fdevopen+0x88>
 5d0:	f0 93 ef 02 	sts	0x02EF, r31
 5d4:	e0 93 ee 02 	sts	0x02EE, r30
 5d8:	cf 01       	movw	r24, r30
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	0f 91       	pop	r16
 5e2:	08 95       	ret

000005e4 <printf>:
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	cd b7       	in	r28, 0x3d	; 61
 5ea:	de b7       	in	r29, 0x3e	; 62
 5ec:	fe 01       	movw	r30, r28
 5ee:	36 96       	adiw	r30, 0x06	; 6
 5f0:	61 91       	ld	r22, Z+
 5f2:	71 91       	ld	r23, Z+
 5f4:	af 01       	movw	r20, r30
 5f6:	80 91 ec 02 	lds	r24, 0x02EC
 5fa:	90 91 ed 02 	lds	r25, 0x02ED
 5fe:	03 d0       	rcall	.+6      	; 0x606 <vfprintf>
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	08 95       	ret

00000606 <vfprintf>:
 606:	2f 92       	push	r2
 608:	3f 92       	push	r3
 60a:	4f 92       	push	r4
 60c:	5f 92       	push	r5
 60e:	6f 92       	push	r6
 610:	7f 92       	push	r7
 612:	8f 92       	push	r8
 614:	9f 92       	push	r9
 616:	af 92       	push	r10
 618:	bf 92       	push	r11
 61a:	cf 92       	push	r12
 61c:	df 92       	push	r13
 61e:	ef 92       	push	r14
 620:	ff 92       	push	r15
 622:	0f 93       	push	r16
 624:	1f 93       	push	r17
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
 62e:	2c 97       	sbiw	r28, 0x0c	; 12
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	f8 94       	cli
 634:	de bf       	out	0x3e, r29	; 62
 636:	0f be       	out	0x3f, r0	; 63
 638:	cd bf       	out	0x3d, r28	; 61
 63a:	7c 01       	movw	r14, r24
 63c:	6b 01       	movw	r12, r22
 63e:	8a 01       	movw	r16, r20
 640:	fc 01       	movw	r30, r24
 642:	17 82       	std	Z+7, r1	; 0x07
 644:	16 82       	std	Z+6, r1	; 0x06
 646:	83 81       	ldd	r24, Z+3	; 0x03
 648:	81 ff       	sbrs	r24, 1
 64a:	b0 c1       	rjmp	.+864    	; 0x9ac <vfprintf+0x3a6>
 64c:	ce 01       	movw	r24, r28
 64e:	01 96       	adiw	r24, 0x01	; 1
 650:	4c 01       	movw	r8, r24
 652:	f7 01       	movw	r30, r14
 654:	93 81       	ldd	r25, Z+3	; 0x03
 656:	f6 01       	movw	r30, r12
 658:	93 fd       	sbrc	r25, 3
 65a:	85 91       	lpm	r24, Z+
 65c:	93 ff       	sbrs	r25, 3
 65e:	81 91       	ld	r24, Z+
 660:	6f 01       	movw	r12, r30
 662:	88 23       	and	r24, r24
 664:	09 f4       	brne	.+2      	; 0x668 <vfprintf+0x62>
 666:	9e c1       	rjmp	.+828    	; 0x9a4 <vfprintf+0x39e>
 668:	85 32       	cpi	r24, 0x25	; 37
 66a:	39 f4       	brne	.+14     	; 0x67a <vfprintf+0x74>
 66c:	93 fd       	sbrc	r25, 3
 66e:	85 91       	lpm	r24, Z+
 670:	93 ff       	sbrs	r25, 3
 672:	81 91       	ld	r24, Z+
 674:	6f 01       	movw	r12, r30
 676:	85 32       	cpi	r24, 0x25	; 37
 678:	21 f4       	brne	.+8      	; 0x682 <vfprintf+0x7c>
 67a:	b7 01       	movw	r22, r14
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0f d3       	rcall	.+1566   	; 0xc9e <fputc>
 680:	e8 cf       	rjmp	.-48     	; 0x652 <vfprintf+0x4c>
 682:	51 2c       	mov	r5, r1
 684:	31 2c       	mov	r3, r1
 686:	20 e0       	ldi	r18, 0x00	; 0
 688:	20 32       	cpi	r18, 0x20	; 32
 68a:	a0 f4       	brcc	.+40     	; 0x6b4 <vfprintf+0xae>
 68c:	8b 32       	cpi	r24, 0x2B	; 43
 68e:	69 f0       	breq	.+26     	; 0x6aa <vfprintf+0xa4>
 690:	30 f4       	brcc	.+12     	; 0x69e <vfprintf+0x98>
 692:	80 32       	cpi	r24, 0x20	; 32
 694:	59 f0       	breq	.+22     	; 0x6ac <vfprintf+0xa6>
 696:	83 32       	cpi	r24, 0x23	; 35
 698:	69 f4       	brne	.+26     	; 0x6b4 <vfprintf+0xae>
 69a:	20 61       	ori	r18, 0x10	; 16
 69c:	2c c0       	rjmp	.+88     	; 0x6f6 <vfprintf+0xf0>
 69e:	8d 32       	cpi	r24, 0x2D	; 45
 6a0:	39 f0       	breq	.+14     	; 0x6b0 <vfprintf+0xaa>
 6a2:	80 33       	cpi	r24, 0x30	; 48
 6a4:	39 f4       	brne	.+14     	; 0x6b4 <vfprintf+0xae>
 6a6:	21 60       	ori	r18, 0x01	; 1
 6a8:	26 c0       	rjmp	.+76     	; 0x6f6 <vfprintf+0xf0>
 6aa:	22 60       	ori	r18, 0x02	; 2
 6ac:	24 60       	ori	r18, 0x04	; 4
 6ae:	23 c0       	rjmp	.+70     	; 0x6f6 <vfprintf+0xf0>
 6b0:	28 60       	ori	r18, 0x08	; 8
 6b2:	21 c0       	rjmp	.+66     	; 0x6f6 <vfprintf+0xf0>
 6b4:	27 fd       	sbrc	r18, 7
 6b6:	27 c0       	rjmp	.+78     	; 0x706 <vfprintf+0x100>
 6b8:	30 ed       	ldi	r19, 0xD0	; 208
 6ba:	38 0f       	add	r19, r24
 6bc:	3a 30       	cpi	r19, 0x0A	; 10
 6be:	78 f4       	brcc	.+30     	; 0x6de <vfprintf+0xd8>
 6c0:	26 ff       	sbrs	r18, 6
 6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <vfprintf+0xca>
 6c4:	fa e0       	ldi	r31, 0x0A	; 10
 6c6:	5f 9e       	mul	r5, r31
 6c8:	30 0d       	add	r19, r0
 6ca:	11 24       	eor	r1, r1
 6cc:	53 2e       	mov	r5, r19
 6ce:	13 c0       	rjmp	.+38     	; 0x6f6 <vfprintf+0xf0>
 6d0:	8a e0       	ldi	r24, 0x0A	; 10
 6d2:	38 9e       	mul	r3, r24
 6d4:	30 0d       	add	r19, r0
 6d6:	11 24       	eor	r1, r1
 6d8:	33 2e       	mov	r3, r19
 6da:	20 62       	ori	r18, 0x20	; 32
 6dc:	0c c0       	rjmp	.+24     	; 0x6f6 <vfprintf+0xf0>
 6de:	8e 32       	cpi	r24, 0x2E	; 46
 6e0:	21 f4       	brne	.+8      	; 0x6ea <vfprintf+0xe4>
 6e2:	26 fd       	sbrc	r18, 6
 6e4:	5f c1       	rjmp	.+702    	; 0x9a4 <vfprintf+0x39e>
 6e6:	20 64       	ori	r18, 0x40	; 64
 6e8:	06 c0       	rjmp	.+12     	; 0x6f6 <vfprintf+0xf0>
 6ea:	8c 36       	cpi	r24, 0x6C	; 108
 6ec:	11 f4       	brne	.+4      	; 0x6f2 <vfprintf+0xec>
 6ee:	20 68       	ori	r18, 0x80	; 128
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <vfprintf+0xf0>
 6f2:	88 36       	cpi	r24, 0x68	; 104
 6f4:	41 f4       	brne	.+16     	; 0x706 <vfprintf+0x100>
 6f6:	f6 01       	movw	r30, r12
 6f8:	93 fd       	sbrc	r25, 3
 6fa:	85 91       	lpm	r24, Z+
 6fc:	93 ff       	sbrs	r25, 3
 6fe:	81 91       	ld	r24, Z+
 700:	6f 01       	movw	r12, r30
 702:	81 11       	cpse	r24, r1
 704:	c1 cf       	rjmp	.-126    	; 0x688 <vfprintf+0x82>
 706:	98 2f       	mov	r25, r24
 708:	9f 7d       	andi	r25, 0xDF	; 223
 70a:	95 54       	subi	r25, 0x45	; 69
 70c:	93 30       	cpi	r25, 0x03	; 3
 70e:	28 f4       	brcc	.+10     	; 0x71a <vfprintf+0x114>
 710:	0c 5f       	subi	r16, 0xFC	; 252
 712:	1f 4f       	sbci	r17, 0xFF	; 255
 714:	ff e3       	ldi	r31, 0x3F	; 63
 716:	f9 83       	std	Y+1, r31	; 0x01
 718:	0d c0       	rjmp	.+26     	; 0x734 <vfprintf+0x12e>
 71a:	83 36       	cpi	r24, 0x63	; 99
 71c:	31 f0       	breq	.+12     	; 0x72a <vfprintf+0x124>
 71e:	83 37       	cpi	r24, 0x73	; 115
 720:	71 f0       	breq	.+28     	; 0x73e <vfprintf+0x138>
 722:	83 35       	cpi	r24, 0x53	; 83
 724:	09 f0       	breq	.+2      	; 0x728 <vfprintf+0x122>
 726:	57 c0       	rjmp	.+174    	; 0x7d6 <vfprintf+0x1d0>
 728:	21 c0       	rjmp	.+66     	; 0x76c <vfprintf+0x166>
 72a:	f8 01       	movw	r30, r16
 72c:	80 81       	ld	r24, Z
 72e:	89 83       	std	Y+1, r24	; 0x01
 730:	0e 5f       	subi	r16, 0xFE	; 254
 732:	1f 4f       	sbci	r17, 0xFF	; 255
 734:	44 24       	eor	r4, r4
 736:	43 94       	inc	r4
 738:	51 2c       	mov	r5, r1
 73a:	54 01       	movw	r10, r8
 73c:	14 c0       	rjmp	.+40     	; 0x766 <vfprintf+0x160>
 73e:	38 01       	movw	r6, r16
 740:	f2 e0       	ldi	r31, 0x02	; 2
 742:	6f 0e       	add	r6, r31
 744:	71 1c       	adc	r7, r1
 746:	f8 01       	movw	r30, r16
 748:	a0 80       	ld	r10, Z
 74a:	b1 80       	ldd	r11, Z+1	; 0x01
 74c:	26 ff       	sbrs	r18, 6
 74e:	03 c0       	rjmp	.+6      	; 0x756 <vfprintf+0x150>
 750:	65 2d       	mov	r22, r5
 752:	70 e0       	ldi	r23, 0x00	; 0
 754:	02 c0       	rjmp	.+4      	; 0x75a <vfprintf+0x154>
 756:	6f ef       	ldi	r22, 0xFF	; 255
 758:	7f ef       	ldi	r23, 0xFF	; 255
 75a:	c5 01       	movw	r24, r10
 75c:	2c 87       	std	Y+12, r18	; 0x0c
 75e:	94 d2       	rcall	.+1320   	; 0xc88 <strnlen>
 760:	2c 01       	movw	r4, r24
 762:	83 01       	movw	r16, r6
 764:	2c 85       	ldd	r18, Y+12	; 0x0c
 766:	2f 77       	andi	r18, 0x7F	; 127
 768:	22 2e       	mov	r2, r18
 76a:	16 c0       	rjmp	.+44     	; 0x798 <vfprintf+0x192>
 76c:	38 01       	movw	r6, r16
 76e:	f2 e0       	ldi	r31, 0x02	; 2
 770:	6f 0e       	add	r6, r31
 772:	71 1c       	adc	r7, r1
 774:	f8 01       	movw	r30, r16
 776:	a0 80       	ld	r10, Z
 778:	b1 80       	ldd	r11, Z+1	; 0x01
 77a:	26 ff       	sbrs	r18, 6
 77c:	03 c0       	rjmp	.+6      	; 0x784 <vfprintf+0x17e>
 77e:	65 2d       	mov	r22, r5
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	02 c0       	rjmp	.+4      	; 0x788 <vfprintf+0x182>
 784:	6f ef       	ldi	r22, 0xFF	; 255
 786:	7f ef       	ldi	r23, 0xFF	; 255
 788:	c5 01       	movw	r24, r10
 78a:	2c 87       	std	Y+12, r18	; 0x0c
 78c:	6b d2       	rcall	.+1238   	; 0xc64 <strnlen_P>
 78e:	2c 01       	movw	r4, r24
 790:	2c 85       	ldd	r18, Y+12	; 0x0c
 792:	20 68       	ori	r18, 0x80	; 128
 794:	22 2e       	mov	r2, r18
 796:	83 01       	movw	r16, r6
 798:	23 fc       	sbrc	r2, 3
 79a:	19 c0       	rjmp	.+50     	; 0x7ce <vfprintf+0x1c8>
 79c:	83 2d       	mov	r24, r3
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	48 16       	cp	r4, r24
 7a2:	59 06       	cpc	r5, r25
 7a4:	a0 f4       	brcc	.+40     	; 0x7ce <vfprintf+0x1c8>
 7a6:	b7 01       	movw	r22, r14
 7a8:	80 e2       	ldi	r24, 0x20	; 32
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	78 d2       	rcall	.+1264   	; 0xc9e <fputc>
 7ae:	3a 94       	dec	r3
 7b0:	f5 cf       	rjmp	.-22     	; 0x79c <vfprintf+0x196>
 7b2:	f5 01       	movw	r30, r10
 7b4:	27 fc       	sbrc	r2, 7
 7b6:	85 91       	lpm	r24, Z+
 7b8:	27 fe       	sbrs	r2, 7
 7ba:	81 91       	ld	r24, Z+
 7bc:	5f 01       	movw	r10, r30
 7be:	b7 01       	movw	r22, r14
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	6d d2       	rcall	.+1242   	; 0xc9e <fputc>
 7c4:	31 10       	cpse	r3, r1
 7c6:	3a 94       	dec	r3
 7c8:	f1 e0       	ldi	r31, 0x01	; 1
 7ca:	4f 1a       	sub	r4, r31
 7cc:	51 08       	sbc	r5, r1
 7ce:	41 14       	cp	r4, r1
 7d0:	51 04       	cpc	r5, r1
 7d2:	79 f7       	brne	.-34     	; 0x7b2 <vfprintf+0x1ac>
 7d4:	de c0       	rjmp	.+444    	; 0x992 <vfprintf+0x38c>
 7d6:	84 36       	cpi	r24, 0x64	; 100
 7d8:	11 f0       	breq	.+4      	; 0x7de <vfprintf+0x1d8>
 7da:	89 36       	cpi	r24, 0x69	; 105
 7dc:	31 f5       	brne	.+76     	; 0x82a <vfprintf+0x224>
 7de:	f8 01       	movw	r30, r16
 7e0:	27 ff       	sbrs	r18, 7
 7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <vfprintf+0x1ec>
 7e4:	60 81       	ld	r22, Z
 7e6:	71 81       	ldd	r23, Z+1	; 0x01
 7e8:	82 81       	ldd	r24, Z+2	; 0x02
 7ea:	93 81       	ldd	r25, Z+3	; 0x03
 7ec:	0c 5f       	subi	r16, 0xFC	; 252
 7ee:	1f 4f       	sbci	r17, 0xFF	; 255
 7f0:	08 c0       	rjmp	.+16     	; 0x802 <vfprintf+0x1fc>
 7f2:	60 81       	ld	r22, Z
 7f4:	71 81       	ldd	r23, Z+1	; 0x01
 7f6:	88 27       	eor	r24, r24
 7f8:	77 fd       	sbrc	r23, 7
 7fa:	80 95       	com	r24
 7fc:	98 2f       	mov	r25, r24
 7fe:	0e 5f       	subi	r16, 0xFE	; 254
 800:	1f 4f       	sbci	r17, 0xFF	; 255
 802:	2f 76       	andi	r18, 0x6F	; 111
 804:	b2 2e       	mov	r11, r18
 806:	97 ff       	sbrs	r25, 7
 808:	09 c0       	rjmp	.+18     	; 0x81c <vfprintf+0x216>
 80a:	90 95       	com	r25
 80c:	80 95       	com	r24
 80e:	70 95       	com	r23
 810:	61 95       	neg	r22
 812:	7f 4f       	sbci	r23, 0xFF	; 255
 814:	8f 4f       	sbci	r24, 0xFF	; 255
 816:	9f 4f       	sbci	r25, 0xFF	; 255
 818:	20 68       	ori	r18, 0x80	; 128
 81a:	b2 2e       	mov	r11, r18
 81c:	2a e0       	ldi	r18, 0x0A	; 10
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	a4 01       	movw	r20, r8
 822:	6f d2       	rcall	.+1246   	; 0xd02 <__ultoa_invert>
 824:	a8 2e       	mov	r10, r24
 826:	a8 18       	sub	r10, r8
 828:	43 c0       	rjmp	.+134    	; 0x8b0 <vfprintf+0x2aa>
 82a:	85 37       	cpi	r24, 0x75	; 117
 82c:	29 f4       	brne	.+10     	; 0x838 <vfprintf+0x232>
 82e:	2f 7e       	andi	r18, 0xEF	; 239
 830:	b2 2e       	mov	r11, r18
 832:	2a e0       	ldi	r18, 0x0A	; 10
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	25 c0       	rjmp	.+74     	; 0x882 <vfprintf+0x27c>
 838:	f2 2f       	mov	r31, r18
 83a:	f9 7f       	andi	r31, 0xF9	; 249
 83c:	bf 2e       	mov	r11, r31
 83e:	8f 36       	cpi	r24, 0x6F	; 111
 840:	c1 f0       	breq	.+48     	; 0x872 <vfprintf+0x26c>
 842:	18 f4       	brcc	.+6      	; 0x84a <vfprintf+0x244>
 844:	88 35       	cpi	r24, 0x58	; 88
 846:	79 f0       	breq	.+30     	; 0x866 <vfprintf+0x260>
 848:	ad c0       	rjmp	.+346    	; 0x9a4 <vfprintf+0x39e>
 84a:	80 37       	cpi	r24, 0x70	; 112
 84c:	19 f0       	breq	.+6      	; 0x854 <vfprintf+0x24e>
 84e:	88 37       	cpi	r24, 0x78	; 120
 850:	21 f0       	breq	.+8      	; 0x85a <vfprintf+0x254>
 852:	a8 c0       	rjmp	.+336    	; 0x9a4 <vfprintf+0x39e>
 854:	2f 2f       	mov	r18, r31
 856:	20 61       	ori	r18, 0x10	; 16
 858:	b2 2e       	mov	r11, r18
 85a:	b4 fe       	sbrs	r11, 4
 85c:	0d c0       	rjmp	.+26     	; 0x878 <vfprintf+0x272>
 85e:	8b 2d       	mov	r24, r11
 860:	84 60       	ori	r24, 0x04	; 4
 862:	b8 2e       	mov	r11, r24
 864:	09 c0       	rjmp	.+18     	; 0x878 <vfprintf+0x272>
 866:	24 ff       	sbrs	r18, 4
 868:	0a c0       	rjmp	.+20     	; 0x87e <vfprintf+0x278>
 86a:	9f 2f       	mov	r25, r31
 86c:	96 60       	ori	r25, 0x06	; 6
 86e:	b9 2e       	mov	r11, r25
 870:	06 c0       	rjmp	.+12     	; 0x87e <vfprintf+0x278>
 872:	28 e0       	ldi	r18, 0x08	; 8
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	05 c0       	rjmp	.+10     	; 0x882 <vfprintf+0x27c>
 878:	20 e1       	ldi	r18, 0x10	; 16
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	02 c0       	rjmp	.+4      	; 0x882 <vfprintf+0x27c>
 87e:	20 e1       	ldi	r18, 0x10	; 16
 880:	32 e0       	ldi	r19, 0x02	; 2
 882:	f8 01       	movw	r30, r16
 884:	b7 fe       	sbrs	r11, 7
 886:	07 c0       	rjmp	.+14     	; 0x896 <vfprintf+0x290>
 888:	60 81       	ld	r22, Z
 88a:	71 81       	ldd	r23, Z+1	; 0x01
 88c:	82 81       	ldd	r24, Z+2	; 0x02
 88e:	93 81       	ldd	r25, Z+3	; 0x03
 890:	0c 5f       	subi	r16, 0xFC	; 252
 892:	1f 4f       	sbci	r17, 0xFF	; 255
 894:	06 c0       	rjmp	.+12     	; 0x8a2 <vfprintf+0x29c>
 896:	60 81       	ld	r22, Z
 898:	71 81       	ldd	r23, Z+1	; 0x01
 89a:	80 e0       	ldi	r24, 0x00	; 0
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 5f       	subi	r16, 0xFE	; 254
 8a0:	1f 4f       	sbci	r17, 0xFF	; 255
 8a2:	a4 01       	movw	r20, r8
 8a4:	2e d2       	rcall	.+1116   	; 0xd02 <__ultoa_invert>
 8a6:	a8 2e       	mov	r10, r24
 8a8:	a8 18       	sub	r10, r8
 8aa:	fb 2d       	mov	r31, r11
 8ac:	ff 77       	andi	r31, 0x7F	; 127
 8ae:	bf 2e       	mov	r11, r31
 8b0:	b6 fe       	sbrs	r11, 6
 8b2:	0b c0       	rjmp	.+22     	; 0x8ca <vfprintf+0x2c4>
 8b4:	2b 2d       	mov	r18, r11
 8b6:	2e 7f       	andi	r18, 0xFE	; 254
 8b8:	a5 14       	cp	r10, r5
 8ba:	50 f4       	brcc	.+20     	; 0x8d0 <vfprintf+0x2ca>
 8bc:	b4 fe       	sbrs	r11, 4
 8be:	0a c0       	rjmp	.+20     	; 0x8d4 <vfprintf+0x2ce>
 8c0:	b2 fc       	sbrc	r11, 2
 8c2:	08 c0       	rjmp	.+16     	; 0x8d4 <vfprintf+0x2ce>
 8c4:	2b 2d       	mov	r18, r11
 8c6:	2e 7e       	andi	r18, 0xEE	; 238
 8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <vfprintf+0x2ce>
 8ca:	7a 2c       	mov	r7, r10
 8cc:	2b 2d       	mov	r18, r11
 8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <vfprintf+0x2d0>
 8d0:	7a 2c       	mov	r7, r10
 8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <vfprintf+0x2d0>
 8d4:	75 2c       	mov	r7, r5
 8d6:	24 ff       	sbrs	r18, 4
 8d8:	0d c0       	rjmp	.+26     	; 0x8f4 <vfprintf+0x2ee>
 8da:	fe 01       	movw	r30, r28
 8dc:	ea 0d       	add	r30, r10
 8de:	f1 1d       	adc	r31, r1
 8e0:	80 81       	ld	r24, Z
 8e2:	80 33       	cpi	r24, 0x30	; 48
 8e4:	11 f4       	brne	.+4      	; 0x8ea <vfprintf+0x2e4>
 8e6:	29 7e       	andi	r18, 0xE9	; 233
 8e8:	09 c0       	rjmp	.+18     	; 0x8fc <vfprintf+0x2f6>
 8ea:	22 ff       	sbrs	r18, 2
 8ec:	06 c0       	rjmp	.+12     	; 0x8fa <vfprintf+0x2f4>
 8ee:	73 94       	inc	r7
 8f0:	73 94       	inc	r7
 8f2:	04 c0       	rjmp	.+8      	; 0x8fc <vfprintf+0x2f6>
 8f4:	82 2f       	mov	r24, r18
 8f6:	86 78       	andi	r24, 0x86	; 134
 8f8:	09 f0       	breq	.+2      	; 0x8fc <vfprintf+0x2f6>
 8fa:	73 94       	inc	r7
 8fc:	23 fd       	sbrc	r18, 3
 8fe:	12 c0       	rjmp	.+36     	; 0x924 <vfprintf+0x31e>
 900:	20 ff       	sbrs	r18, 0
 902:	06 c0       	rjmp	.+12     	; 0x910 <vfprintf+0x30a>
 904:	5a 2c       	mov	r5, r10
 906:	73 14       	cp	r7, r3
 908:	18 f4       	brcc	.+6      	; 0x910 <vfprintf+0x30a>
 90a:	53 0c       	add	r5, r3
 90c:	57 18       	sub	r5, r7
 90e:	73 2c       	mov	r7, r3
 910:	73 14       	cp	r7, r3
 912:	60 f4       	brcc	.+24     	; 0x92c <vfprintf+0x326>
 914:	b7 01       	movw	r22, r14
 916:	80 e2       	ldi	r24, 0x20	; 32
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	2c 87       	std	Y+12, r18	; 0x0c
 91c:	c0 d1       	rcall	.+896    	; 0xc9e <fputc>
 91e:	73 94       	inc	r7
 920:	2c 85       	ldd	r18, Y+12	; 0x0c
 922:	f6 cf       	rjmp	.-20     	; 0x910 <vfprintf+0x30a>
 924:	73 14       	cp	r7, r3
 926:	10 f4       	brcc	.+4      	; 0x92c <vfprintf+0x326>
 928:	37 18       	sub	r3, r7
 92a:	01 c0       	rjmp	.+2      	; 0x92e <vfprintf+0x328>
 92c:	31 2c       	mov	r3, r1
 92e:	24 ff       	sbrs	r18, 4
 930:	11 c0       	rjmp	.+34     	; 0x954 <vfprintf+0x34e>
 932:	b7 01       	movw	r22, r14
 934:	80 e3       	ldi	r24, 0x30	; 48
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	2c 87       	std	Y+12, r18	; 0x0c
 93a:	b1 d1       	rcall	.+866    	; 0xc9e <fputc>
 93c:	2c 85       	ldd	r18, Y+12	; 0x0c
 93e:	22 ff       	sbrs	r18, 2
 940:	16 c0       	rjmp	.+44     	; 0x96e <vfprintf+0x368>
 942:	21 ff       	sbrs	r18, 1
 944:	03 c0       	rjmp	.+6      	; 0x94c <vfprintf+0x346>
 946:	88 e5       	ldi	r24, 0x58	; 88
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	02 c0       	rjmp	.+4      	; 0x950 <vfprintf+0x34a>
 94c:	88 e7       	ldi	r24, 0x78	; 120
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	b7 01       	movw	r22, r14
 952:	0c c0       	rjmp	.+24     	; 0x96c <vfprintf+0x366>
 954:	82 2f       	mov	r24, r18
 956:	86 78       	andi	r24, 0x86	; 134
 958:	51 f0       	breq	.+20     	; 0x96e <vfprintf+0x368>
 95a:	21 fd       	sbrc	r18, 1
 95c:	02 c0       	rjmp	.+4      	; 0x962 <vfprintf+0x35c>
 95e:	80 e2       	ldi	r24, 0x20	; 32
 960:	01 c0       	rjmp	.+2      	; 0x964 <vfprintf+0x35e>
 962:	8b e2       	ldi	r24, 0x2B	; 43
 964:	27 fd       	sbrc	r18, 7
 966:	8d e2       	ldi	r24, 0x2D	; 45
 968:	b7 01       	movw	r22, r14
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	98 d1       	rcall	.+816    	; 0xc9e <fputc>
 96e:	a5 14       	cp	r10, r5
 970:	30 f4       	brcc	.+12     	; 0x97e <vfprintf+0x378>
 972:	b7 01       	movw	r22, r14
 974:	80 e3       	ldi	r24, 0x30	; 48
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	92 d1       	rcall	.+804    	; 0xc9e <fputc>
 97a:	5a 94       	dec	r5
 97c:	f8 cf       	rjmp	.-16     	; 0x96e <vfprintf+0x368>
 97e:	aa 94       	dec	r10
 980:	f4 01       	movw	r30, r8
 982:	ea 0d       	add	r30, r10
 984:	f1 1d       	adc	r31, r1
 986:	80 81       	ld	r24, Z
 988:	b7 01       	movw	r22, r14
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	88 d1       	rcall	.+784    	; 0xc9e <fputc>
 98e:	a1 10       	cpse	r10, r1
 990:	f6 cf       	rjmp	.-20     	; 0x97e <vfprintf+0x378>
 992:	33 20       	and	r3, r3
 994:	09 f4       	brne	.+2      	; 0x998 <vfprintf+0x392>
 996:	5d ce       	rjmp	.-838    	; 0x652 <vfprintf+0x4c>
 998:	b7 01       	movw	r22, r14
 99a:	80 e2       	ldi	r24, 0x20	; 32
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	7f d1       	rcall	.+766    	; 0xc9e <fputc>
 9a0:	3a 94       	dec	r3
 9a2:	f7 cf       	rjmp	.-18     	; 0x992 <vfprintf+0x38c>
 9a4:	f7 01       	movw	r30, r14
 9a6:	86 81       	ldd	r24, Z+6	; 0x06
 9a8:	97 81       	ldd	r25, Z+7	; 0x07
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <vfprintf+0x3aa>
 9ac:	8f ef       	ldi	r24, 0xFF	; 255
 9ae:	9f ef       	ldi	r25, 0xFF	; 255
 9b0:	2c 96       	adiw	r28, 0x0c	; 12
 9b2:	0f b6       	in	r0, 0x3f	; 63
 9b4:	f8 94       	cli
 9b6:	de bf       	out	0x3e, r29	; 62
 9b8:	0f be       	out	0x3f, r0	; 63
 9ba:	cd bf       	out	0x3d, r28	; 61
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	df 90       	pop	r13
 9ca:	cf 90       	pop	r12
 9cc:	bf 90       	pop	r11
 9ce:	af 90       	pop	r10
 9d0:	9f 90       	pop	r9
 9d2:	8f 90       	pop	r8
 9d4:	7f 90       	pop	r7
 9d6:	6f 90       	pop	r6
 9d8:	5f 90       	pop	r5
 9da:	4f 90       	pop	r4
 9dc:	3f 90       	pop	r3
 9de:	2f 90       	pop	r2
 9e0:	08 95       	ret

000009e2 <calloc>:
 9e2:	0f 93       	push	r16
 9e4:	1f 93       	push	r17
 9e6:	cf 93       	push	r28
 9e8:	df 93       	push	r29
 9ea:	86 9f       	mul	r24, r22
 9ec:	80 01       	movw	r16, r0
 9ee:	87 9f       	mul	r24, r23
 9f0:	10 0d       	add	r17, r0
 9f2:	96 9f       	mul	r25, r22
 9f4:	10 0d       	add	r17, r0
 9f6:	11 24       	eor	r1, r1
 9f8:	c8 01       	movw	r24, r16
 9fa:	0d d0       	rcall	.+26     	; 0xa16 <malloc>
 9fc:	ec 01       	movw	r28, r24
 9fe:	00 97       	sbiw	r24, 0x00	; 0
 a00:	21 f0       	breq	.+8      	; 0xa0a <calloc+0x28>
 a02:	a8 01       	movw	r20, r16
 a04:	60 e0       	ldi	r22, 0x00	; 0
 a06:	70 e0       	ldi	r23, 0x00	; 0
 a08:	38 d1       	rcall	.+624    	; 0xc7a <memset>
 a0a:	ce 01       	movw	r24, r28
 a0c:	df 91       	pop	r29
 a0e:	cf 91       	pop	r28
 a10:	1f 91       	pop	r17
 a12:	0f 91       	pop	r16
 a14:	08 95       	ret

00000a16 <malloc>:
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
 a1a:	82 30       	cpi	r24, 0x02	; 2
 a1c:	91 05       	cpc	r25, r1
 a1e:	10 f4       	brcc	.+4      	; 0xa24 <malloc+0xe>
 a20:	82 e0       	ldi	r24, 0x02	; 2
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	e0 91 f2 02 	lds	r30, 0x02F2
 a28:	f0 91 f3 02 	lds	r31, 0x02F3
 a2c:	20 e0       	ldi	r18, 0x00	; 0
 a2e:	30 e0       	ldi	r19, 0x00	; 0
 a30:	a0 e0       	ldi	r26, 0x00	; 0
 a32:	b0 e0       	ldi	r27, 0x00	; 0
 a34:	30 97       	sbiw	r30, 0x00	; 0
 a36:	39 f1       	breq	.+78     	; 0xa86 <malloc+0x70>
 a38:	40 81       	ld	r20, Z
 a3a:	51 81       	ldd	r21, Z+1	; 0x01
 a3c:	48 17       	cp	r20, r24
 a3e:	59 07       	cpc	r21, r25
 a40:	b8 f0       	brcs	.+46     	; 0xa70 <malloc+0x5a>
 a42:	48 17       	cp	r20, r24
 a44:	59 07       	cpc	r21, r25
 a46:	71 f4       	brne	.+28     	; 0xa64 <malloc+0x4e>
 a48:	82 81       	ldd	r24, Z+2	; 0x02
 a4a:	93 81       	ldd	r25, Z+3	; 0x03
 a4c:	10 97       	sbiw	r26, 0x00	; 0
 a4e:	29 f0       	breq	.+10     	; 0xa5a <malloc+0x44>
 a50:	13 96       	adiw	r26, 0x03	; 3
 a52:	9c 93       	st	X, r25
 a54:	8e 93       	st	-X, r24
 a56:	12 97       	sbiw	r26, 0x02	; 2
 a58:	2c c0       	rjmp	.+88     	; 0xab2 <malloc+0x9c>
 a5a:	90 93 f3 02 	sts	0x02F3, r25
 a5e:	80 93 f2 02 	sts	0x02F2, r24
 a62:	27 c0       	rjmp	.+78     	; 0xab2 <malloc+0x9c>
 a64:	21 15       	cp	r18, r1
 a66:	31 05       	cpc	r19, r1
 a68:	31 f0       	breq	.+12     	; 0xa76 <malloc+0x60>
 a6a:	42 17       	cp	r20, r18
 a6c:	53 07       	cpc	r21, r19
 a6e:	18 f0       	brcs	.+6      	; 0xa76 <malloc+0x60>
 a70:	a9 01       	movw	r20, r18
 a72:	db 01       	movw	r26, r22
 a74:	01 c0       	rjmp	.+2      	; 0xa78 <malloc+0x62>
 a76:	ef 01       	movw	r28, r30
 a78:	9a 01       	movw	r18, r20
 a7a:	bd 01       	movw	r22, r26
 a7c:	df 01       	movw	r26, r30
 a7e:	02 80       	ldd	r0, Z+2	; 0x02
 a80:	f3 81       	ldd	r31, Z+3	; 0x03
 a82:	e0 2d       	mov	r30, r0
 a84:	d7 cf       	rjmp	.-82     	; 0xa34 <malloc+0x1e>
 a86:	21 15       	cp	r18, r1
 a88:	31 05       	cpc	r19, r1
 a8a:	f9 f0       	breq	.+62     	; 0xaca <malloc+0xb4>
 a8c:	28 1b       	sub	r18, r24
 a8e:	39 0b       	sbc	r19, r25
 a90:	24 30       	cpi	r18, 0x04	; 4
 a92:	31 05       	cpc	r19, r1
 a94:	80 f4       	brcc	.+32     	; 0xab6 <malloc+0xa0>
 a96:	8a 81       	ldd	r24, Y+2	; 0x02
 a98:	9b 81       	ldd	r25, Y+3	; 0x03
 a9a:	61 15       	cp	r22, r1
 a9c:	71 05       	cpc	r23, r1
 a9e:	21 f0       	breq	.+8      	; 0xaa8 <malloc+0x92>
 aa0:	fb 01       	movw	r30, r22
 aa2:	93 83       	std	Z+3, r25	; 0x03
 aa4:	82 83       	std	Z+2, r24	; 0x02
 aa6:	04 c0       	rjmp	.+8      	; 0xab0 <malloc+0x9a>
 aa8:	90 93 f3 02 	sts	0x02F3, r25
 aac:	80 93 f2 02 	sts	0x02F2, r24
 ab0:	fe 01       	movw	r30, r28
 ab2:	32 96       	adiw	r30, 0x02	; 2
 ab4:	44 c0       	rjmp	.+136    	; 0xb3e <malloc+0x128>
 ab6:	fe 01       	movw	r30, r28
 ab8:	e2 0f       	add	r30, r18
 aba:	f3 1f       	adc	r31, r19
 abc:	81 93       	st	Z+, r24
 abe:	91 93       	st	Z+, r25
 ac0:	22 50       	subi	r18, 0x02	; 2
 ac2:	31 09       	sbc	r19, r1
 ac4:	39 83       	std	Y+1, r19	; 0x01
 ac6:	28 83       	st	Y, r18
 ac8:	3a c0       	rjmp	.+116    	; 0xb3e <malloc+0x128>
 aca:	20 91 f0 02 	lds	r18, 0x02F0
 ace:	30 91 f1 02 	lds	r19, 0x02F1
 ad2:	23 2b       	or	r18, r19
 ad4:	41 f4       	brne	.+16     	; 0xae6 <malloc+0xd0>
 ad6:	20 91 02 02 	lds	r18, 0x0202
 ada:	30 91 03 02 	lds	r19, 0x0203
 ade:	30 93 f1 02 	sts	0x02F1, r19
 ae2:	20 93 f0 02 	sts	0x02F0, r18
 ae6:	20 91 00 02 	lds	r18, 0x0200
 aea:	30 91 01 02 	lds	r19, 0x0201
 aee:	21 15       	cp	r18, r1
 af0:	31 05       	cpc	r19, r1
 af2:	41 f4       	brne	.+16     	; 0xb04 <malloc+0xee>
 af4:	2d b7       	in	r18, 0x3d	; 61
 af6:	3e b7       	in	r19, 0x3e	; 62
 af8:	40 91 04 02 	lds	r20, 0x0204
 afc:	50 91 05 02 	lds	r21, 0x0205
 b00:	24 1b       	sub	r18, r20
 b02:	35 0b       	sbc	r19, r21
 b04:	e0 91 f0 02 	lds	r30, 0x02F0
 b08:	f0 91 f1 02 	lds	r31, 0x02F1
 b0c:	e2 17       	cp	r30, r18
 b0e:	f3 07       	cpc	r31, r19
 b10:	a0 f4       	brcc	.+40     	; 0xb3a <malloc+0x124>
 b12:	2e 1b       	sub	r18, r30
 b14:	3f 0b       	sbc	r19, r31
 b16:	28 17       	cp	r18, r24
 b18:	39 07       	cpc	r19, r25
 b1a:	78 f0       	brcs	.+30     	; 0xb3a <malloc+0x124>
 b1c:	ac 01       	movw	r20, r24
 b1e:	4e 5f       	subi	r20, 0xFE	; 254
 b20:	5f 4f       	sbci	r21, 0xFF	; 255
 b22:	24 17       	cp	r18, r20
 b24:	35 07       	cpc	r19, r21
 b26:	48 f0       	brcs	.+18     	; 0xb3a <malloc+0x124>
 b28:	4e 0f       	add	r20, r30
 b2a:	5f 1f       	adc	r21, r31
 b2c:	50 93 f1 02 	sts	0x02F1, r21
 b30:	40 93 f0 02 	sts	0x02F0, r20
 b34:	81 93       	st	Z+, r24
 b36:	91 93       	st	Z+, r25
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <malloc+0x128>
 b3a:	e0 e0       	ldi	r30, 0x00	; 0
 b3c:	f0 e0       	ldi	r31, 0x00	; 0
 b3e:	cf 01       	movw	r24, r30
 b40:	df 91       	pop	r29
 b42:	cf 91       	pop	r28
 b44:	08 95       	ret

00000b46 <free>:
 b46:	cf 93       	push	r28
 b48:	df 93       	push	r29
 b4a:	00 97       	sbiw	r24, 0x00	; 0
 b4c:	09 f4       	brne	.+2      	; 0xb50 <free+0xa>
 b4e:	87 c0       	rjmp	.+270    	; 0xc5e <free+0x118>
 b50:	fc 01       	movw	r30, r24
 b52:	32 97       	sbiw	r30, 0x02	; 2
 b54:	13 82       	std	Z+3, r1	; 0x03
 b56:	12 82       	std	Z+2, r1	; 0x02
 b58:	c0 91 f2 02 	lds	r28, 0x02F2
 b5c:	d0 91 f3 02 	lds	r29, 0x02F3
 b60:	20 97       	sbiw	r28, 0x00	; 0
 b62:	81 f4       	brne	.+32     	; 0xb84 <free+0x3e>
 b64:	20 81       	ld	r18, Z
 b66:	31 81       	ldd	r19, Z+1	; 0x01
 b68:	28 0f       	add	r18, r24
 b6a:	39 1f       	adc	r19, r25
 b6c:	80 91 f0 02 	lds	r24, 0x02F0
 b70:	90 91 f1 02 	lds	r25, 0x02F1
 b74:	82 17       	cp	r24, r18
 b76:	93 07       	cpc	r25, r19
 b78:	79 f5       	brne	.+94     	; 0xbd8 <free+0x92>
 b7a:	f0 93 f1 02 	sts	0x02F1, r31
 b7e:	e0 93 f0 02 	sts	0x02F0, r30
 b82:	6d c0       	rjmp	.+218    	; 0xc5e <free+0x118>
 b84:	de 01       	movw	r26, r28
 b86:	20 e0       	ldi	r18, 0x00	; 0
 b88:	30 e0       	ldi	r19, 0x00	; 0
 b8a:	ae 17       	cp	r26, r30
 b8c:	bf 07       	cpc	r27, r31
 b8e:	50 f4       	brcc	.+20     	; 0xba4 <free+0x5e>
 b90:	12 96       	adiw	r26, 0x02	; 2
 b92:	4d 91       	ld	r20, X+
 b94:	5c 91       	ld	r21, X
 b96:	13 97       	sbiw	r26, 0x03	; 3
 b98:	9d 01       	movw	r18, r26
 b9a:	41 15       	cp	r20, r1
 b9c:	51 05       	cpc	r21, r1
 b9e:	09 f1       	breq	.+66     	; 0xbe2 <free+0x9c>
 ba0:	da 01       	movw	r26, r20
 ba2:	f3 cf       	rjmp	.-26     	; 0xb8a <free+0x44>
 ba4:	b3 83       	std	Z+3, r27	; 0x03
 ba6:	a2 83       	std	Z+2, r26	; 0x02
 ba8:	40 81       	ld	r20, Z
 baa:	51 81       	ldd	r21, Z+1	; 0x01
 bac:	84 0f       	add	r24, r20
 bae:	95 1f       	adc	r25, r21
 bb0:	8a 17       	cp	r24, r26
 bb2:	9b 07       	cpc	r25, r27
 bb4:	71 f4       	brne	.+28     	; 0xbd2 <free+0x8c>
 bb6:	8d 91       	ld	r24, X+
 bb8:	9c 91       	ld	r25, X
 bba:	11 97       	sbiw	r26, 0x01	; 1
 bbc:	84 0f       	add	r24, r20
 bbe:	95 1f       	adc	r25, r21
 bc0:	02 96       	adiw	r24, 0x02	; 2
 bc2:	91 83       	std	Z+1, r25	; 0x01
 bc4:	80 83       	st	Z, r24
 bc6:	12 96       	adiw	r26, 0x02	; 2
 bc8:	8d 91       	ld	r24, X+
 bca:	9c 91       	ld	r25, X
 bcc:	13 97       	sbiw	r26, 0x03	; 3
 bce:	93 83       	std	Z+3, r25	; 0x03
 bd0:	82 83       	std	Z+2, r24	; 0x02
 bd2:	21 15       	cp	r18, r1
 bd4:	31 05       	cpc	r19, r1
 bd6:	29 f4       	brne	.+10     	; 0xbe2 <free+0x9c>
 bd8:	f0 93 f3 02 	sts	0x02F3, r31
 bdc:	e0 93 f2 02 	sts	0x02F2, r30
 be0:	3e c0       	rjmp	.+124    	; 0xc5e <free+0x118>
 be2:	d9 01       	movw	r26, r18
 be4:	13 96       	adiw	r26, 0x03	; 3
 be6:	fc 93       	st	X, r31
 be8:	ee 93       	st	-X, r30
 bea:	12 97       	sbiw	r26, 0x02	; 2
 bec:	4d 91       	ld	r20, X+
 bee:	5d 91       	ld	r21, X+
 bf0:	a4 0f       	add	r26, r20
 bf2:	b5 1f       	adc	r27, r21
 bf4:	ea 17       	cp	r30, r26
 bf6:	fb 07       	cpc	r31, r27
 bf8:	79 f4       	brne	.+30     	; 0xc18 <free+0xd2>
 bfa:	80 81       	ld	r24, Z
 bfc:	91 81       	ldd	r25, Z+1	; 0x01
 bfe:	84 0f       	add	r24, r20
 c00:	95 1f       	adc	r25, r21
 c02:	02 96       	adiw	r24, 0x02	; 2
 c04:	d9 01       	movw	r26, r18
 c06:	11 96       	adiw	r26, 0x01	; 1
 c08:	9c 93       	st	X, r25
 c0a:	8e 93       	st	-X, r24
 c0c:	82 81       	ldd	r24, Z+2	; 0x02
 c0e:	93 81       	ldd	r25, Z+3	; 0x03
 c10:	13 96       	adiw	r26, 0x03	; 3
 c12:	9c 93       	st	X, r25
 c14:	8e 93       	st	-X, r24
 c16:	12 97       	sbiw	r26, 0x02	; 2
 c18:	e0 e0       	ldi	r30, 0x00	; 0
 c1a:	f0 e0       	ldi	r31, 0x00	; 0
 c1c:	8a 81       	ldd	r24, Y+2	; 0x02
 c1e:	9b 81       	ldd	r25, Y+3	; 0x03
 c20:	00 97       	sbiw	r24, 0x00	; 0
 c22:	19 f0       	breq	.+6      	; 0xc2a <free+0xe4>
 c24:	fe 01       	movw	r30, r28
 c26:	ec 01       	movw	r28, r24
 c28:	f9 cf       	rjmp	.-14     	; 0xc1c <free+0xd6>
 c2a:	ce 01       	movw	r24, r28
 c2c:	02 96       	adiw	r24, 0x02	; 2
 c2e:	28 81       	ld	r18, Y
 c30:	39 81       	ldd	r19, Y+1	; 0x01
 c32:	82 0f       	add	r24, r18
 c34:	93 1f       	adc	r25, r19
 c36:	20 91 f0 02 	lds	r18, 0x02F0
 c3a:	30 91 f1 02 	lds	r19, 0x02F1
 c3e:	28 17       	cp	r18, r24
 c40:	39 07       	cpc	r19, r25
 c42:	69 f4       	brne	.+26     	; 0xc5e <free+0x118>
 c44:	30 97       	sbiw	r30, 0x00	; 0
 c46:	29 f4       	brne	.+10     	; 0xc52 <free+0x10c>
 c48:	10 92 f3 02 	sts	0x02F3, r1
 c4c:	10 92 f2 02 	sts	0x02F2, r1
 c50:	02 c0       	rjmp	.+4      	; 0xc56 <free+0x110>
 c52:	13 82       	std	Z+3, r1	; 0x03
 c54:	12 82       	std	Z+2, r1	; 0x02
 c56:	d0 93 f1 02 	sts	0x02F1, r29
 c5a:	c0 93 f0 02 	sts	0x02F0, r28
 c5e:	df 91       	pop	r29
 c60:	cf 91       	pop	r28
 c62:	08 95       	ret

00000c64 <strnlen_P>:
 c64:	fc 01       	movw	r30, r24
 c66:	05 90       	lpm	r0, Z+
 c68:	61 50       	subi	r22, 0x01	; 1
 c6a:	70 40       	sbci	r23, 0x00	; 0
 c6c:	01 10       	cpse	r0, r1
 c6e:	d8 f7       	brcc	.-10     	; 0xc66 <strnlen_P+0x2>
 c70:	80 95       	com	r24
 c72:	90 95       	com	r25
 c74:	8e 0f       	add	r24, r30
 c76:	9f 1f       	adc	r25, r31
 c78:	08 95       	ret

00000c7a <memset>:
 c7a:	dc 01       	movw	r26, r24
 c7c:	01 c0       	rjmp	.+2      	; 0xc80 <memset+0x6>
 c7e:	6d 93       	st	X+, r22
 c80:	41 50       	subi	r20, 0x01	; 1
 c82:	50 40       	sbci	r21, 0x00	; 0
 c84:	e0 f7       	brcc	.-8      	; 0xc7e <memset+0x4>
 c86:	08 95       	ret

00000c88 <strnlen>:
 c88:	fc 01       	movw	r30, r24
 c8a:	61 50       	subi	r22, 0x01	; 1
 c8c:	70 40       	sbci	r23, 0x00	; 0
 c8e:	01 90       	ld	r0, Z+
 c90:	01 10       	cpse	r0, r1
 c92:	d8 f7       	brcc	.-10     	; 0xc8a <strnlen+0x2>
 c94:	80 95       	com	r24
 c96:	90 95       	com	r25
 c98:	8e 0f       	add	r24, r30
 c9a:	9f 1f       	adc	r25, r31
 c9c:	08 95       	ret

00000c9e <fputc>:
 c9e:	0f 93       	push	r16
 ca0:	1f 93       	push	r17
 ca2:	cf 93       	push	r28
 ca4:	df 93       	push	r29
 ca6:	18 2f       	mov	r17, r24
 ca8:	09 2f       	mov	r16, r25
 caa:	eb 01       	movw	r28, r22
 cac:	8b 81       	ldd	r24, Y+3	; 0x03
 cae:	81 fd       	sbrc	r24, 1
 cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <fputc+0x1a>
 cb2:	8f ef       	ldi	r24, 0xFF	; 255
 cb4:	9f ef       	ldi	r25, 0xFF	; 255
 cb6:	20 c0       	rjmp	.+64     	; 0xcf8 <fputc+0x5a>
 cb8:	82 ff       	sbrs	r24, 2
 cba:	10 c0       	rjmp	.+32     	; 0xcdc <fputc+0x3e>
 cbc:	4e 81       	ldd	r20, Y+6	; 0x06
 cbe:	5f 81       	ldd	r21, Y+7	; 0x07
 cc0:	2c 81       	ldd	r18, Y+4	; 0x04
 cc2:	3d 81       	ldd	r19, Y+5	; 0x05
 cc4:	42 17       	cp	r20, r18
 cc6:	53 07       	cpc	r21, r19
 cc8:	7c f4       	brge	.+30     	; 0xce8 <fputc+0x4a>
 cca:	e8 81       	ld	r30, Y
 ccc:	f9 81       	ldd	r31, Y+1	; 0x01
 cce:	9f 01       	movw	r18, r30
 cd0:	2f 5f       	subi	r18, 0xFF	; 255
 cd2:	3f 4f       	sbci	r19, 0xFF	; 255
 cd4:	39 83       	std	Y+1, r19	; 0x01
 cd6:	28 83       	st	Y, r18
 cd8:	10 83       	st	Z, r17
 cda:	06 c0       	rjmp	.+12     	; 0xce8 <fputc+0x4a>
 cdc:	e8 85       	ldd	r30, Y+8	; 0x08
 cde:	f9 85       	ldd	r31, Y+9	; 0x09
 ce0:	81 2f       	mov	r24, r17
 ce2:	19 95       	eicall
 ce4:	89 2b       	or	r24, r25
 ce6:	29 f7       	brne	.-54     	; 0xcb2 <fputc+0x14>
 ce8:	2e 81       	ldd	r18, Y+6	; 0x06
 cea:	3f 81       	ldd	r19, Y+7	; 0x07
 cec:	2f 5f       	subi	r18, 0xFF	; 255
 cee:	3f 4f       	sbci	r19, 0xFF	; 255
 cf0:	3f 83       	std	Y+7, r19	; 0x07
 cf2:	2e 83       	std	Y+6, r18	; 0x06
 cf4:	81 2f       	mov	r24, r17
 cf6:	90 2f       	mov	r25, r16
 cf8:	df 91       	pop	r29
 cfa:	cf 91       	pop	r28
 cfc:	1f 91       	pop	r17
 cfe:	0f 91       	pop	r16
 d00:	08 95       	ret

00000d02 <__ultoa_invert>:
 d02:	fa 01       	movw	r30, r20
 d04:	aa 27       	eor	r26, r26
 d06:	28 30       	cpi	r18, 0x08	; 8
 d08:	51 f1       	breq	.+84     	; 0xd5e <__ultoa_invert+0x5c>
 d0a:	20 31       	cpi	r18, 0x10	; 16
 d0c:	81 f1       	breq	.+96     	; 0xd6e <__ultoa_invert+0x6c>
 d0e:	e8 94       	clt
 d10:	6f 93       	push	r22
 d12:	6e 7f       	andi	r22, 0xFE	; 254
 d14:	6e 5f       	subi	r22, 0xFE	; 254
 d16:	7f 4f       	sbci	r23, 0xFF	; 255
 d18:	8f 4f       	sbci	r24, 0xFF	; 255
 d1a:	9f 4f       	sbci	r25, 0xFF	; 255
 d1c:	af 4f       	sbci	r26, 0xFF	; 255
 d1e:	b1 e0       	ldi	r27, 0x01	; 1
 d20:	3e d0       	rcall	.+124    	; 0xd9e <__ultoa_invert+0x9c>
 d22:	b4 e0       	ldi	r27, 0x04	; 4
 d24:	3c d0       	rcall	.+120    	; 0xd9e <__ultoa_invert+0x9c>
 d26:	67 0f       	add	r22, r23
 d28:	78 1f       	adc	r23, r24
 d2a:	89 1f       	adc	r24, r25
 d2c:	9a 1f       	adc	r25, r26
 d2e:	a1 1d       	adc	r26, r1
 d30:	68 0f       	add	r22, r24
 d32:	79 1f       	adc	r23, r25
 d34:	8a 1f       	adc	r24, r26
 d36:	91 1d       	adc	r25, r1
 d38:	a1 1d       	adc	r26, r1
 d3a:	6a 0f       	add	r22, r26
 d3c:	71 1d       	adc	r23, r1
 d3e:	81 1d       	adc	r24, r1
 d40:	91 1d       	adc	r25, r1
 d42:	a1 1d       	adc	r26, r1
 d44:	20 d0       	rcall	.+64     	; 0xd86 <__ultoa_invert+0x84>
 d46:	09 f4       	brne	.+2      	; 0xd4a <__ultoa_invert+0x48>
 d48:	68 94       	set
 d4a:	3f 91       	pop	r19
 d4c:	2a e0       	ldi	r18, 0x0A	; 10
 d4e:	26 9f       	mul	r18, r22
 d50:	11 24       	eor	r1, r1
 d52:	30 19       	sub	r19, r0
 d54:	30 5d       	subi	r19, 0xD0	; 208
 d56:	31 93       	st	Z+, r19
 d58:	de f6       	brtc	.-74     	; 0xd10 <__ultoa_invert+0xe>
 d5a:	cf 01       	movw	r24, r30
 d5c:	08 95       	ret
 d5e:	46 2f       	mov	r20, r22
 d60:	47 70       	andi	r20, 0x07	; 7
 d62:	40 5d       	subi	r20, 0xD0	; 208
 d64:	41 93       	st	Z+, r20
 d66:	b3 e0       	ldi	r27, 0x03	; 3
 d68:	0f d0       	rcall	.+30     	; 0xd88 <__ultoa_invert+0x86>
 d6a:	c9 f7       	brne	.-14     	; 0xd5e <__ultoa_invert+0x5c>
 d6c:	f6 cf       	rjmp	.-20     	; 0xd5a <__ultoa_invert+0x58>
 d6e:	46 2f       	mov	r20, r22
 d70:	4f 70       	andi	r20, 0x0F	; 15
 d72:	40 5d       	subi	r20, 0xD0	; 208
 d74:	4a 33       	cpi	r20, 0x3A	; 58
 d76:	18 f0       	brcs	.+6      	; 0xd7e <__ultoa_invert+0x7c>
 d78:	49 5d       	subi	r20, 0xD9	; 217
 d7a:	31 fd       	sbrc	r19, 1
 d7c:	40 52       	subi	r20, 0x20	; 32
 d7e:	41 93       	st	Z+, r20
 d80:	02 d0       	rcall	.+4      	; 0xd86 <__ultoa_invert+0x84>
 d82:	a9 f7       	brne	.-22     	; 0xd6e <__ultoa_invert+0x6c>
 d84:	ea cf       	rjmp	.-44     	; 0xd5a <__ultoa_invert+0x58>
 d86:	b4 e0       	ldi	r27, 0x04	; 4
 d88:	a6 95       	lsr	r26
 d8a:	97 95       	ror	r25
 d8c:	87 95       	ror	r24
 d8e:	77 95       	ror	r23
 d90:	67 95       	ror	r22
 d92:	ba 95       	dec	r27
 d94:	c9 f7       	brne	.-14     	; 0xd88 <__ultoa_invert+0x86>
 d96:	00 97       	sbiw	r24, 0x00	; 0
 d98:	61 05       	cpc	r22, r1
 d9a:	71 05       	cpc	r23, r1
 d9c:	08 95       	ret
 d9e:	9b 01       	movw	r18, r22
 da0:	ac 01       	movw	r20, r24
 da2:	0a 2e       	mov	r0, r26
 da4:	06 94       	lsr	r0
 da6:	57 95       	ror	r21
 da8:	47 95       	ror	r20
 daa:	37 95       	ror	r19
 dac:	27 95       	ror	r18
 dae:	ba 95       	dec	r27
 db0:	c9 f7       	brne	.-14     	; 0xda4 <__ultoa_invert+0xa2>
 db2:	62 0f       	add	r22, r18
 db4:	73 1f       	adc	r23, r19
 db6:	84 1f       	adc	r24, r20
 db8:	95 1f       	adc	r25, r21
 dba:	a0 1d       	adc	r26, r0
 dbc:	08 95       	ret

00000dbe <_exit>:
 dbe:	f8 94       	cli

00000dc0 <__stop_program>:
 dc0:	ff cf       	rjmp	.-2      	; 0xdc0 <__stop_program>
