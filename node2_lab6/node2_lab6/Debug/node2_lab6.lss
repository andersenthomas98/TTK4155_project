
node2_lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800200  00000d08  00000d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002b6  008002b6  00000e52  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000189c  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000117a  00000000  00000000  000028b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a40  00000000  00000000  00003a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00004470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073e  00000000  00000000  00004728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a0  00000000  00000000  00004e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00005506  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	29 c1       	rjmp	.+594    	; 0x260 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e0       	ldi	r30, 0x08	; 8
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 3b       	cpi	r26, 0xB6	; 182
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 eb       	ldi	r26, 0xB6	; 182
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 3c       	cpi	r26, 0xC0	; 192
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	94 d1       	rcall	.+808    	; 0x448 <main>
 120:	f1 c5       	rjmp	.+3042   	; 0xd04 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:
		MCP_write(i, msgPtr->data[dataIterator]);
		dataIterator++;
	}
	MCP_requestToSend(0);
	// Transmission of CAN msg will start when the device detects that the bus is available...
}
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
 128:	1e d1       	rcall	.+572    	; 0x366 <MCP_init>
 12a:	8b e2       	ldi	r24, 0x2B	; 43
 12c:	1f d1       	rcall	.+574    	; 0x36c <MCP_read>
 12e:	1f 92       	push	r1
 130:	8f 93       	push	r24
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	92 e0       	ldi	r25, 0x02	; 2
 136:	9f 93       	push	r25
 138:	8f 93       	push	r24
 13a:	e2 d1       	rcall	.+964    	; 0x500 <printf>
 13c:	65 e8       	ldi	r22, 0x85	; 133
 13e:	8b e2       	ldi	r24, 0x2B	; 43
 140:	20 d1       	rcall	.+576    	; 0x382 <MCP_write>
 142:	8b e2       	ldi	r24, 0x2B	; 43
 144:	13 d1       	rcall	.+550    	; 0x36c <MCP_read>
 146:	1f 92       	push	r1
 148:	8f 93       	push	r24
 14a:	84 e1       	ldi	r24, 0x14	; 20
 14c:	92 e0       	ldi	r25, 0x02	; 2
 14e:	9f 93       	push	r25
 150:	8f 93       	push	r24
 152:	d6 d1       	rcall	.+940    	; 0x500 <printf>
 154:	4c 2f       	mov	r20, r28
 156:	60 ee       	ldi	r22, 0xE0	; 224
 158:	8f e0       	ldi	r24, 0x0F	; 15
 15a:	22 d1       	rcall	.+580    	; 0x3a0 <MCP_bitModify>
 15c:	40 e6       	ldi	r20, 0x60	; 96
 15e:	60 e6       	ldi	r22, 0x60	; 96
 160:	80 e6       	ldi	r24, 0x60	; 96
 162:	1e d1       	rcall	.+572    	; 0x3a0 <MCP_bitModify>
 164:	8f e0       	ldi	r24, 0x0F	; 15
 166:	02 d1       	rcall	.+516    	; 0x36c <MCP_read>
 168:	2d b7       	in	r18, 0x3d	; 61
 16a:	3e b7       	in	r19, 0x3e	; 62
 16c:	28 5f       	subi	r18, 0xF8	; 248
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	3e bf       	out	0x3e, r19	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	2d bf       	out	0x3d, r18	; 61
 17a:	86 ff       	sbrs	r24, 6
 17c:	07 c0       	rjmp	.+14     	; 0x18c <CAN_init+0x68>
 17e:	81 e2       	ldi	r24, 0x21	; 33
 180:	92 e0       	ldi	r25, 0x02	; 2
 182:	9f 93       	push	r25
 184:	8f 93       	push	r24
 186:	bc d1       	rcall	.+888    	; 0x500 <printf>
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <CAN_message_recieve>:

msg_t CAN_message_recieve(void) {
 190:	7f 92       	push	r7
 192:	8f 92       	push	r8
 194:	9f 92       	push	r9
 196:	af 92       	push	r10
 198:	bf 92       	push	r11
 19a:	cf 92       	push	r12
 19c:	df 92       	push	r13
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	2a 97       	sbiw	r28, 0x0a	; 10
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
 1ba:	5c 01       	movw	r10, r24
	msg_t msg;
	
	// Read ID from RXB0SIDH and RXB0SIDL
	uint8_t upperId = MCP_read(MCP_RXB0CTRL + 1);
 1bc:	81 e6       	ldi	r24, 0x61	; 97
 1be:	d6 d0       	rcall	.+428    	; 0x36c <MCP_read>
 1c0:	78 2e       	mov	r7, r24
	
	msg.id = upperId ;
	
	// Read length from RXB0DLC
	msg.length = MCP_read(MCP_RXB0CTRL + 5);
 1c2:	85 e6       	ldi	r24, 0x65	; 101
 1c4:	d3 d0       	rcall	.+422    	; 0x36c <MCP_read>
 1c6:	08 2f       	mov	r16, r24
	
	// Read data
	int dataIterator = 0;
	for (uint8_t i = MCP_RXB0CTRL + 6; i <= MCP_RXB0CTRL + 6 + msg.length; i++) {
 1c8:	c8 2e       	mov	r12, r24
 1ca:	d1 2c       	mov	r13, r1
 1cc:	26 e6       	ldi	r18, 0x66	; 102
 1ce:	c2 0e       	add	r12, r18
 1d0:	d1 1c       	adc	r13, r1
 1d2:	36 e6       	ldi	r19, 0x66	; 102
 1d4:	c3 16       	cp	r12, r19
 1d6:	d1 04       	cpc	r13, r1
 1d8:	c4 f0       	brlt	.+48     	; 0x20a <CAN_message_recieve+0x7a>
 1da:	7e 01       	movw	r14, r28
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	e8 0e       	add	r14, r24
 1e0:	f1 1c       	adc	r15, r1
 1e2:	16 e6       	ldi	r17, 0x66	; 102
 1e4:	ce 01       	movw	r24, r28
 1e6:	80 95       	com	r24
 1e8:	90 95       	com	r25
 1ea:	fc 01       	movw	r30, r24
 1ec:	ec 59       	subi	r30, 0x9C	; 156
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
		msg.data[dataIterator] = MCP_read(i);
 1f0:	4f 01       	movw	r8, r30
 1f2:	81 2f       	mov	r24, r17
 1f4:	bb d0       	rcall	.+374    	; 0x36c <MCP_read>
 1f6:	f7 01       	movw	r30, r14
 1f8:	81 93       	st	Z+, r24
 1fa:	7f 01       	movw	r14, r30
	// Read length from RXB0DLC
	msg.length = MCP_read(MCP_RXB0CTRL + 5);
	
	// Read data
	int dataIterator = 0;
	for (uint8_t i = MCP_RXB0CTRL + 6; i <= MCP_RXB0CTRL + 6 + msg.length; i++) {
 1fc:	1f 5f       	subi	r17, 0xFF	; 255
 1fe:	c4 01       	movw	r24, r8
 200:	8e 0f       	add	r24, r30
 202:	9f 1f       	adc	r25, r31
 204:	c8 16       	cp	r12, r24
 206:	d9 06       	cpc	r13, r25
 208:	a4 f7       	brge	.-24     	; 0x1f2 <CAN_message_recieve+0x62>
		msg.data[dataIterator] = MCP_read(i);
		dataIterator++;
	}
	return msg;
 20a:	79 82       	std	Y+1, r7	; 0x01
 20c:	0a 83       	std	Y+2, r16	; 0x02
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	fe 01       	movw	r30, r28
 212:	31 96       	adiw	r30, 0x01	; 1
 214:	d5 01       	movw	r26, r10
 216:	01 90       	ld	r0, Z+
 218:	0d 92       	st	X+, r0
 21a:	8a 95       	dec	r24
 21c:	e1 f7       	brne	.-8      	; 0x216 <CAN_message_recieve+0x86>
} 
 21e:	c5 01       	movw	r24, r10
 220:	2a 96       	adiw	r28, 0x0a	; 10
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	cf 90       	pop	r12
 23c:	bf 90       	pop	r11
 23e:	af 90       	pop	r10
 240:	9f 90       	pop	r9
 242:	8f 90       	pop	r8
 244:	7f 90       	pop	r7
 246:	08 95       	ret

00000248 <INTERRUPT_init>:
volatile int ADC_INTERRUPT_READY = 0;
//volatile int SPI_TRANSMISSION_COMPLETE = 0;

void INTERRUPT_init() {
	// disable global interrupts (set SREG register)
	cli();
 248:	f8 94       	cli
	
	// The falling edge of INT2 generates an interrupt request
	EICRA &= ~(1 << ISC20);
 24a:	e9 e6       	ldi	r30, 0x69	; 105
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	8f 7e       	andi	r24, 0xEF	; 239
 252:	80 83       	st	Z, r24
	EICRA |= (1 << ISC21); 
 254:	80 81       	ld	r24, Z
 256:	80 62       	ori	r24, 0x20	; 32
 258:	80 83       	st	Z, r24
	
	// Enable interrupt on INT2
	EIMSK |= (1 << INT2);
 25a:	ea 9a       	sbi	0x1d, 2	; 29
		
	// Enable global interrupts (set SREG register)
	sei();
 25c:	78 94       	sei
 25e:	08 95       	ret

00000260 <__vector_3>:
}


// CAN interrupts
ISR(INT2_vect) {
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	0b b6       	in	r0, 0x3b	; 59
 26c:	0f 92       	push	r0
 26e:	1f 93       	push	r17
 270:	2f 93       	push	r18
 272:	3f 93       	push	r19
 274:	4f 93       	push	r20
 276:	5f 93       	push	r21
 278:	6f 93       	push	r22
 27a:	7f 93       	push	r23
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	af 93       	push	r26
 282:	bf 93       	push	r27
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	2a 97       	sbiw	r28, 0x0a	; 10
 292:	de bf       	out	0x3e, r29	; 62
 294:	cd bf       	out	0x3d, r28	; 61
	if (MCP_read(MCP_CANINTF) & MCP_TX0IF) {
 296:	8c e2       	ldi	r24, 0x2C	; 44
 298:	69 d0       	rcall	.+210    	; 0x36c <MCP_read>
 29a:	82 ff       	sbrs	r24, 2
 29c:	0b c0       	rjmp	.+22     	; 0x2b4 <__vector_3+0x54>
		printf("Message sendt succesfully\n\r");
 29e:	83 e4       	ldi	r24, 0x43	; 67
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	9f 93       	push	r25
 2a4:	8f 93       	push	r24
 2a6:	2c d1       	rcall	.+600    	; 0x500 <printf>
		
		// Reset transmit flag
		MCP_bitModify(MCP_CANINTF, MCP_TX0IF, 0);
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	64 e0       	ldi	r22, 0x04	; 4
 2ac:	8c e2       	ldi	r24, 0x2C	; 44
 2ae:	78 d0       	rcall	.+240    	; 0x3a0 <MCP_bitModify>
 2b0:	0f 90       	pop	r0
	}
	// Message recieved at recieve buffer 0
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF) {
 2b2:	0f 90       	pop	r0
 2b4:	8c e2       	ldi	r24, 0x2C	; 44
 2b6:	5a d0       	rcall	.+180    	; 0x36c <MCP_read>
 2b8:	80 ff       	sbrs	r24, 0
		struct CAN_message msg = CAN_message_recieve();
 2ba:	29 c0       	rjmp	.+82     	; 0x30e <__vector_3+0xae>
 2bc:	ce 01       	movw	r24, r28
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	67 df       	rcall	.-306    	; 0x190 <CAN_message_recieve>
 2c2:	19 81       	ldd	r17, Y+1	; 0x01
		printf("Message recieved with ID: %#X\n\r", msg.id);
 2c4:	1f 92       	push	r1
 2c6:	1f 93       	push	r17
 2c8:	8f e5       	ldi	r24, 0x5F	; 95
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	9f 93       	push	r25
 2ce:	8f 93       	push	r24
 2d0:	17 d1       	rcall	.+558    	; 0x500 <printf>
		if (msg.id == JOYSTICK_ID) {
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	11 30       	cpi	r17, 0x01	; 1
 2dc:	69 f4       	brne	.+26     	; 0x2f8 <__vector_3+0x98>
			printf("JOYSTICK: %d\n\r", msg.data[0]);
 2de:	8b 81       	ldd	r24, Y+3	; 0x03
 2e0:	1f 92       	push	r1
 2e2:	8f 93       	push	r24
 2e4:	8f e7       	ldi	r24, 0x7F	; 127
 2e6:	92 e0       	ldi	r25, 0x02	; 2
 2e8:	9f 93       	push	r25
 2ea:	8f 93       	push	r24
 2ec:	09 d1       	rcall	.+530    	; 0x500 <printf>
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
		}
		else {
			printf("CANNOT IDENTIFY MESSAGE");
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <__vector_3+0xa6>
 2f8:	8e e8       	ldi	r24, 0x8E	; 142
 2fa:	92 e0       	ldi	r25, 0x02	; 2
 2fc:	9f 93       	push	r25
 2fe:	8f 93       	push	r24
 300:	ff d0       	rcall	.+510    	; 0x500 <printf>
		}
	
		// Reset recieve flag
		MCP_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	61 e0       	ldi	r22, 0x01	; 1
	}
	if (MCP_read(MCP_CANINTF) & MCP_MERRF) {
 30a:	8c e2       	ldi	r24, 0x2C	; 44
 30c:	49 d0       	rcall	.+146    	; 0x3a0 <MCP_bitModify>
 30e:	8c e2       	ldi	r24, 0x2C	; 44
 310:	2d d0       	rcall	.+90     	; 0x36c <MCP_read>
 312:	88 23       	and	r24, r24
		printf("CAN BUS ERROR!");
 314:	3c f4       	brge	.+14     	; 0x324 <__vector_3+0xc4>
 316:	86 ea       	ldi	r24, 0xA6	; 166
 318:	92 e0       	ldi	r25, 0x02	; 2
 31a:	9f 93       	push	r25
 31c:	8f 93       	push	r24
 31e:	f0 d0       	rcall	.+480    	; 0x500 <printf>
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
	}
}
 324:	2a 96       	adiw	r28, 0x0a	; 10
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	1f 91       	pop	r17
 34e:	0f 90       	pop	r0
 350:	0b be       	out	0x3b, r0	; 59
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <MCP_reset>:
	else {
		SPI_transmit(MCP_RTS_ALL);
	}
	
	// Deselect CAN controller
	PORTB |= (1 << PB7);
 35c:	2f 98       	cbi	0x05, 7	; 5
 35e:	80 ec       	ldi	r24, 0xC0	; 192
 360:	47 d0       	rcall	.+142    	; 0x3f0 <SPI_transmit>
 362:	2f 9a       	sbi	0x05, 7	; 5
 364:	08 95       	ret

00000366 <MCP_init>:
 366:	30 d0       	rcall	.+96     	; 0x3c8 <SPI_MasterInit>
 368:	f9 cf       	rjmp	.-14     	; 0x35c <MCP_reset>
 36a:	08 95       	ret

0000036c <MCP_read>:
 36c:	cf 93       	push	r28
 36e:	c8 2f       	mov	r28, r24
 370:	2f 98       	cbi	0x05, 7	; 5
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	3d d0       	rcall	.+122    	; 0x3f0 <SPI_transmit>
 376:	8c 2f       	mov	r24, r28
 378:	3b d0       	rcall	.+118    	; 0x3f0 <SPI_transmit>
 37a:	3f d0       	rcall	.+126    	; 0x3fa <SPI_read>
 37c:	2f 9a       	sbi	0x05, 7	; 5
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <MCP_write>:
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	d8 2f       	mov	r29, r24
 388:	c6 2f       	mov	r28, r22
 38a:	2f 98       	cbi	0x05, 7	; 5
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	30 d0       	rcall	.+96     	; 0x3f0 <SPI_transmit>
 390:	8d 2f       	mov	r24, r29
 392:	2e d0       	rcall	.+92     	; 0x3f0 <SPI_transmit>
 394:	8c 2f       	mov	r24, r28
 396:	2c d0       	rcall	.+88     	; 0x3f0 <SPI_transmit>
 398:	2f 9a       	sbi	0x05, 7	; 5
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <MCP_bitModify>:
}

void MCP_bitModify(uint8_t address, uint8_t mask, uint8_t data) {
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	18 2f       	mov	r17, r24
 3a8:	d6 2f       	mov	r29, r22
 3aa:	c4 2f       	mov	r28, r20
	// Select CAN controller
	PORTB &= ~(1 << PB7);
 3ac:	2f 98       	cbi	0x05, 7	; 5
	
	// Send BIT MODIFY instruction
	SPI_transmit(MCP_BITMOD);
 3ae:	85 e0       	ldi	r24, 0x05	; 5
 3b0:	1f d0       	rcall	.+62     	; 0x3f0 <SPI_transmit>
	
	// Send address of register
	SPI_transmit(address);
 3b2:	81 2f       	mov	r24, r17
 3b4:	1d d0       	rcall	.+58     	; 0x3f0 <SPI_transmit>
	
	// Send mask byte
	SPI_transmit(mask);
 3b6:	8d 2f       	mov	r24, r29
 3b8:	1b d0       	rcall	.+54     	; 0x3f0 <SPI_transmit>
	
	// Send data byte
	SPI_transmit(data);
 3ba:	8c 2f       	mov	r24, r28
 3bc:	19 d0       	rcall	.+50     	; 0x3f0 <SPI_transmit>
 3be:	2f 9a       	sbi	0x05, 7	; 5
	
	// Deselect CAN controller
	PORTB |= (1 << PB7);
 3c0:	df 91       	pop	r29
}
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	08 95       	ret

000003c8 <SPI_MasterInit>:
#include "interrupt.h"
#include <avr/io.h>

void SPI_MasterInit(void) {
	// Set PB7 (/SS), PB2 (MOSI) and PB1 (SCK) as output
	DDRB |= (1 << DDB7) | (1 << DDB2) | (1 << DDB1) | (1 << DDB0);
 3c8:	84 b1       	in	r24, 0x04	; 4
 3ca:	87 68       	ori	r24, 0x87	; 135
 3cc:	84 b9       	out	0x04, r24	; 4
	
	// Set PB3 (MISO) as input
	DDRB &= ~(1 << DDB3);
 3ce:	23 98       	cbi	0x04, 3	; 4
	
	// Select Master SPI mode, SPI enable
	SPCR |= (1 << MSTR) | (1 << SPE);
 3d0:	8c b5       	in	r24, 0x2c	; 44
 3d2:	80 65       	ori	r24, 0x50	; 80
 3d4:	8c bd       	out	0x2c, r24	; 44
	
	// Transmit MSB of the data word first
	SPCR &= ~(1 << DORD);
 3d6:	8c b5       	in	r24, 0x2c	; 44
 3d8:	8f 7d       	andi	r24, 0xDF	; 223
 3da:	8c bd       	out	0x2c, r24	; 44
	
	// Configure clock polarity (SCK is low when idle)
	SPCR &= ~(1 << CPOL);
 3dc:	8c b5       	in	r24, 0x2c	; 44
 3de:	87 7f       	andi	r24, 0xF7	; 247
 3e0:	8c bd       	out	0x2c, r24	; 44
	
	// Configure clock phase (data is sampled on leading edge)
	SPCR &= ~(1 << CPHA);
 3e2:	8c b5       	in	r24, 0x2c	; 44
 3e4:	8b 7f       	andi	r24, 0xFB	; 251
 3e6:	8c bd       	out	0x2c, r24	; 44
	
	// Configure SCK rate (f_osc/16)
	SPCR |= (1 << SPR0);
 3e8:	8c b5       	in	r24, 0x2c	; 44
 3ea:	81 60       	ori	r24, 0x01	; 1
 3ec:	8c bd       	out	0x2c, r24	; 44
 3ee:	08 95       	ret

000003f0 <SPI_transmit>:
}

void SPI_transmit(uint8_t data) {
	// Initiate data transmission
	SPDR = data;
 3f0:	8e bd       	out	0x2e, r24	; 46
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
 3f2:	0d b4       	in	r0, 0x2d	; 45
 3f4:	07 fe       	sbrs	r0, 7
 3f6:	fd cf       	rjmp	.-6      	; 0x3f2 <SPI_transmit+0x2>
}	
 3f8:	08 95       	ret

000003fa <SPI_read>:

uint8_t SPI_read(void) {
	SPDR = 0xFF; // Send dummy byte
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
 3fc:	8e bd       	out	0x2e, r24	; 46
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
 3fe:	0d b4       	in	r0, 0x2d	; 45
 400:	07 fe       	sbrs	r0, 7
 402:	fd cf       	rjmp	.-6      	; 0x3fe <SPI_read+0x4>
	
	return SPDR;
 404:	8e b5       	in	r24, 0x2e	; 46
	// SPIF bit in SPSR register is reset when accessing SPDR
}
 406:	08 95       	ret

00000408 <UART_transmit>:
#include <util/delay.h>
#include "uart.h"

void UART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while ( ! (UCSR0A & (1<<UDRE0))) {
 408:	e0 ec       	ldi	r30, 0xC0	; 192
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	90 81       	ld	r25, Z
 40e:	95 ff       	sbrs	r25, 5
 410:	fd cf       	rjmp	.-6      	; 0x40c <UART_transmit+0x4>
		// waiting...
	}
	// Put data into buffer, sends the data
	UDR0 = data;
 412:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 416:	08 95       	ret

00000418 <UART_receive>:
}

unsigned char UART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1 << RXC0))) {
 418:	e0 ec       	ldi	r30, 0xC0	; 192
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	88 23       	and	r24, r24
 420:	ec f7       	brge	.-6      	; 0x41c <UART_receive+0x4>
		// wait...
	}
	return UDR0;
 422:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	
}
 426:	08 95       	ret

00000428 <UART_init>:

void UART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = ubrr>>8;
 428:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = ubrr;
 42c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 430:	88 e1       	ldi	r24, 0x18	; 24
 432:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
 436:	8e e0       	ldi	r24, 0x0E	; 14
 438:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	
	fdevopen(UART_transmit, UART_receive);
 43c:	6c e0       	ldi	r22, 0x0C	; 12
 43e:	72 e0       	ldi	r23, 0x02	; 2
 440:	84 e0       	ldi	r24, 0x04	; 4
 442:	92 e0       	ldi	r25, 0x02	; 2
 444:	13 c0       	rjmp	.+38     	; 0x46c <fdevopen>
 446:	08 95       	ret

00000448 <main>:
#include <avr/interrupt.h>
#define MYUBRR 103

int main(void)
{
	INTERRUPT_init();
 448:	ff de       	rcall	.-514    	; 0x248 <INTERRUPT_init>
	UART_init(MYUBRR);
 44a:	87 e6       	ldi	r24, 0x67	; 103
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	ec df       	rcall	.-40     	; 0x428 <UART_init>
	CAN_init(MODE_NORMAL);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	68 de       	rcall	.-816    	; 0x124 <CAN_init>
 454:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 456:	33 e2       	ldi	r19, 0x23	; 35
 458:	84 ef       	ldi	r24, 0xF4	; 244
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	21 50       	subi	r18, 0x01	; 1
 45e:	30 40       	sbci	r19, 0x00	; 0
 460:	80 40       	sbci	r24, 0x00	; 0
 462:	90 40       	sbci	r25, 0x00	; 0
 464:	d9 f7       	brne	.-10     	; 0x45c <main+0x14>
 466:	00 c0       	rjmp	.+0      	; 0x468 <main+0x20>
 468:	00 00       	nop
 46a:	f4 cf       	rjmp	.-24     	; 0x454 <main+0xc>

0000046c <fdevopen>:
 46c:	0f 93       	push	r16
 46e:	1f 93       	push	r17
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	00 97       	sbiw	r24, 0x00	; 0
 476:	31 f4       	brne	.+12     	; 0x484 <fdevopen+0x18>
 478:	61 15       	cp	r22, r1
 47a:	71 05       	cpc	r23, r1
 47c:	19 f4       	brne	.+6      	; 0x484 <fdevopen+0x18>
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	39 c0       	rjmp	.+114    	; 0x4f6 <fdevopen+0x8a>
 484:	8b 01       	movw	r16, r22
 486:	ec 01       	movw	r28, r24
 488:	6e e0       	ldi	r22, 0x0E	; 14
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	47 d2       	rcall	.+1166   	; 0x920 <calloc>
 492:	fc 01       	movw	r30, r24
 494:	89 2b       	or	r24, r25
 496:	99 f3       	breq	.-26     	; 0x47e <fdevopen+0x12>
 498:	80 e8       	ldi	r24, 0x80	; 128
 49a:	83 83       	std	Z+3, r24	; 0x03
 49c:	01 15       	cp	r16, r1
 49e:	11 05       	cpc	r17, r1
 4a0:	71 f0       	breq	.+28     	; 0x4be <fdevopen+0x52>
 4a2:	13 87       	std	Z+11, r17	; 0x0b
 4a4:	02 87       	std	Z+10, r16	; 0x0a
 4a6:	81 e8       	ldi	r24, 0x81	; 129
 4a8:	83 83       	std	Z+3, r24	; 0x03
 4aa:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__data_end>
 4ae:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <__data_end+0x1>
 4b2:	89 2b       	or	r24, r25
 4b4:	21 f4       	brne	.+8      	; 0x4be <fdevopen+0x52>
 4b6:	f0 93 b7 02 	sts	0x02B7, r31	; 0x8002b7 <__data_end+0x1>
 4ba:	e0 93 b6 02 	sts	0x02B6, r30	; 0x8002b6 <__data_end>
 4be:	20 97       	sbiw	r28, 0x00	; 0
 4c0:	c9 f0       	breq	.+50     	; 0x4f4 <fdevopen+0x88>
 4c2:	d1 87       	std	Z+9, r29	; 0x09
 4c4:	c0 87       	std	Z+8, r28	; 0x08
 4c6:	83 81       	ldd	r24, Z+3	; 0x03
 4c8:	82 60       	ori	r24, 0x02	; 2
 4ca:	83 83       	std	Z+3, r24	; 0x03
 4cc:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__data_end+0x2>
 4d0:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <__data_end+0x3>
 4d4:	89 2b       	or	r24, r25
 4d6:	71 f4       	brne	.+28     	; 0x4f4 <fdevopen+0x88>
 4d8:	f0 93 b9 02 	sts	0x02B9, r31	; 0x8002b9 <__data_end+0x3>
 4dc:	e0 93 b8 02 	sts	0x02B8, r30	; 0x8002b8 <__data_end+0x2>
 4e0:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <__data_end+0x4>
 4e4:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <__data_end+0x5>
 4e8:	89 2b       	or	r24, r25
 4ea:	21 f4       	brne	.+8      	; 0x4f4 <fdevopen+0x88>
 4ec:	f0 93 bb 02 	sts	0x02BB, r31	; 0x8002bb <__data_end+0x5>
 4f0:	e0 93 ba 02 	sts	0x02BA, r30	; 0x8002ba <__data_end+0x4>
 4f4:	cf 01       	movw	r24, r30
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	08 95       	ret

00000500 <printf>:
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	cd b7       	in	r28, 0x3d	; 61
 506:	de b7       	in	r29, 0x3e	; 62
 508:	ae 01       	movw	r20, r28
 50a:	4a 5f       	subi	r20, 0xFA	; 250
 50c:	5f 4f       	sbci	r21, 0xFF	; 255
 50e:	fa 01       	movw	r30, r20
 510:	61 91       	ld	r22, Z+
 512:	71 91       	ld	r23, Z+
 514:	af 01       	movw	r20, r30
 516:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__data_end+0x2>
 51a:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <__data_end+0x3>
 51e:	03 d0       	rcall	.+6      	; 0x526 <vfprintf>
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <vfprintf>:
 526:	2f 92       	push	r2
 528:	3f 92       	push	r3
 52a:	4f 92       	push	r4
 52c:	5f 92       	push	r5
 52e:	6f 92       	push	r6
 530:	7f 92       	push	r7
 532:	8f 92       	push	r8
 534:	9f 92       	push	r9
 536:	af 92       	push	r10
 538:	bf 92       	push	r11
 53a:	cf 92       	push	r12
 53c:	df 92       	push	r13
 53e:	ef 92       	push	r14
 540:	ff 92       	push	r15
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62
 54e:	2b 97       	sbiw	r28, 0x0b	; 11
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	f8 94       	cli
 554:	de bf       	out	0x3e, r29	; 62
 556:	0f be       	out	0x3f, r0	; 63
 558:	cd bf       	out	0x3d, r28	; 61
 55a:	6c 01       	movw	r12, r24
 55c:	7b 01       	movw	r14, r22
 55e:	8a 01       	movw	r16, r20
 560:	fc 01       	movw	r30, r24
 562:	17 82       	std	Z+7, r1	; 0x07
 564:	16 82       	std	Z+6, r1	; 0x06
 566:	83 81       	ldd	r24, Z+3	; 0x03
 568:	81 ff       	sbrs	r24, 1
 56a:	bf c1       	rjmp	.+894    	; 0x8ea <vfprintf+0x3c4>
 56c:	ce 01       	movw	r24, r28
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	3c 01       	movw	r6, r24
 572:	f6 01       	movw	r30, r12
 574:	93 81       	ldd	r25, Z+3	; 0x03
 576:	f7 01       	movw	r30, r14
 578:	93 fd       	sbrc	r25, 3
 57a:	85 91       	lpm	r24, Z+
 57c:	93 ff       	sbrs	r25, 3
 57e:	81 91       	ld	r24, Z+
 580:	7f 01       	movw	r14, r30
 582:	88 23       	and	r24, r24
 584:	09 f4       	brne	.+2      	; 0x588 <vfprintf+0x62>
 586:	ad c1       	rjmp	.+858    	; 0x8e2 <vfprintf+0x3bc>
 588:	85 32       	cpi	r24, 0x25	; 37
 58a:	39 f4       	brne	.+14     	; 0x59a <vfprintf+0x74>
 58c:	93 fd       	sbrc	r25, 3
 58e:	85 91       	lpm	r24, Z+
 590:	93 ff       	sbrs	r25, 3
 592:	81 91       	ld	r24, Z+
 594:	7f 01       	movw	r14, r30
 596:	85 32       	cpi	r24, 0x25	; 37
 598:	21 f4       	brne	.+8      	; 0x5a2 <vfprintf+0x7c>
 59a:	b6 01       	movw	r22, r12
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	18 d3       	rcall	.+1584   	; 0xbd0 <fputc>
 5a0:	e8 cf       	rjmp	.-48     	; 0x572 <vfprintf+0x4c>
 5a2:	91 2c       	mov	r9, r1
 5a4:	21 2c       	mov	r2, r1
 5a6:	31 2c       	mov	r3, r1
 5a8:	ff e1       	ldi	r31, 0x1F	; 31
 5aa:	f3 15       	cp	r31, r3
 5ac:	d8 f0       	brcs	.+54     	; 0x5e4 <vfprintf+0xbe>
 5ae:	8b 32       	cpi	r24, 0x2B	; 43
 5b0:	79 f0       	breq	.+30     	; 0x5d0 <vfprintf+0xaa>
 5b2:	38 f4       	brcc	.+14     	; 0x5c2 <vfprintf+0x9c>
 5b4:	80 32       	cpi	r24, 0x20	; 32
 5b6:	79 f0       	breq	.+30     	; 0x5d6 <vfprintf+0xb0>
 5b8:	83 32       	cpi	r24, 0x23	; 35
 5ba:	a1 f4       	brne	.+40     	; 0x5e4 <vfprintf+0xbe>
 5bc:	23 2d       	mov	r18, r3
 5be:	20 61       	ori	r18, 0x10	; 16
 5c0:	1d c0       	rjmp	.+58     	; 0x5fc <vfprintf+0xd6>
 5c2:	8d 32       	cpi	r24, 0x2D	; 45
 5c4:	61 f0       	breq	.+24     	; 0x5de <vfprintf+0xb8>
 5c6:	80 33       	cpi	r24, 0x30	; 48
 5c8:	69 f4       	brne	.+26     	; 0x5e4 <vfprintf+0xbe>
 5ca:	23 2d       	mov	r18, r3
 5cc:	21 60       	ori	r18, 0x01	; 1
 5ce:	16 c0       	rjmp	.+44     	; 0x5fc <vfprintf+0xd6>
 5d0:	83 2d       	mov	r24, r3
 5d2:	82 60       	ori	r24, 0x02	; 2
 5d4:	38 2e       	mov	r3, r24
 5d6:	e3 2d       	mov	r30, r3
 5d8:	e4 60       	ori	r30, 0x04	; 4
 5da:	3e 2e       	mov	r3, r30
 5dc:	2a c0       	rjmp	.+84     	; 0x632 <vfprintf+0x10c>
 5de:	f3 2d       	mov	r31, r3
 5e0:	f8 60       	ori	r31, 0x08	; 8
 5e2:	1d c0       	rjmp	.+58     	; 0x61e <vfprintf+0xf8>
 5e4:	37 fc       	sbrc	r3, 7
 5e6:	2d c0       	rjmp	.+90     	; 0x642 <vfprintf+0x11c>
 5e8:	20 ed       	ldi	r18, 0xD0	; 208
 5ea:	28 0f       	add	r18, r24
 5ec:	2a 30       	cpi	r18, 0x0A	; 10
 5ee:	40 f0       	brcs	.+16     	; 0x600 <vfprintf+0xda>
 5f0:	8e 32       	cpi	r24, 0x2E	; 46
 5f2:	b9 f4       	brne	.+46     	; 0x622 <vfprintf+0xfc>
 5f4:	36 fc       	sbrc	r3, 6
 5f6:	75 c1       	rjmp	.+746    	; 0x8e2 <vfprintf+0x3bc>
 5f8:	23 2d       	mov	r18, r3
 5fa:	20 64       	ori	r18, 0x40	; 64
 5fc:	32 2e       	mov	r3, r18
 5fe:	19 c0       	rjmp	.+50     	; 0x632 <vfprintf+0x10c>
 600:	36 fe       	sbrs	r3, 6
 602:	06 c0       	rjmp	.+12     	; 0x610 <vfprintf+0xea>
 604:	8a e0       	ldi	r24, 0x0A	; 10
 606:	98 9e       	mul	r9, r24
 608:	20 0d       	add	r18, r0
 60a:	11 24       	eor	r1, r1
 60c:	92 2e       	mov	r9, r18
 60e:	11 c0       	rjmp	.+34     	; 0x632 <vfprintf+0x10c>
 610:	ea e0       	ldi	r30, 0x0A	; 10
 612:	2e 9e       	mul	r2, r30
 614:	20 0d       	add	r18, r0
 616:	11 24       	eor	r1, r1
 618:	22 2e       	mov	r2, r18
 61a:	f3 2d       	mov	r31, r3
 61c:	f0 62       	ori	r31, 0x20	; 32
 61e:	3f 2e       	mov	r3, r31
 620:	08 c0       	rjmp	.+16     	; 0x632 <vfprintf+0x10c>
 622:	8c 36       	cpi	r24, 0x6C	; 108
 624:	21 f4       	brne	.+8      	; 0x62e <vfprintf+0x108>
 626:	83 2d       	mov	r24, r3
 628:	80 68       	ori	r24, 0x80	; 128
 62a:	38 2e       	mov	r3, r24
 62c:	02 c0       	rjmp	.+4      	; 0x632 <vfprintf+0x10c>
 62e:	88 36       	cpi	r24, 0x68	; 104
 630:	41 f4       	brne	.+16     	; 0x642 <vfprintf+0x11c>
 632:	f7 01       	movw	r30, r14
 634:	93 fd       	sbrc	r25, 3
 636:	85 91       	lpm	r24, Z+
 638:	93 ff       	sbrs	r25, 3
 63a:	81 91       	ld	r24, Z+
 63c:	7f 01       	movw	r14, r30
 63e:	81 11       	cpse	r24, r1
 640:	b3 cf       	rjmp	.-154    	; 0x5a8 <vfprintf+0x82>
 642:	98 2f       	mov	r25, r24
 644:	9f 7d       	andi	r25, 0xDF	; 223
 646:	95 54       	subi	r25, 0x45	; 69
 648:	93 30       	cpi	r25, 0x03	; 3
 64a:	28 f4       	brcc	.+10     	; 0x656 <vfprintf+0x130>
 64c:	0c 5f       	subi	r16, 0xFC	; 252
 64e:	1f 4f       	sbci	r17, 0xFF	; 255
 650:	9f e3       	ldi	r25, 0x3F	; 63
 652:	99 83       	std	Y+1, r25	; 0x01
 654:	0d c0       	rjmp	.+26     	; 0x670 <vfprintf+0x14a>
 656:	83 36       	cpi	r24, 0x63	; 99
 658:	31 f0       	breq	.+12     	; 0x666 <vfprintf+0x140>
 65a:	83 37       	cpi	r24, 0x73	; 115
 65c:	71 f0       	breq	.+28     	; 0x67a <vfprintf+0x154>
 65e:	83 35       	cpi	r24, 0x53	; 83
 660:	09 f0       	breq	.+2      	; 0x664 <vfprintf+0x13e>
 662:	55 c0       	rjmp	.+170    	; 0x70e <vfprintf+0x1e8>
 664:	20 c0       	rjmp	.+64     	; 0x6a6 <vfprintf+0x180>
 666:	f8 01       	movw	r30, r16
 668:	80 81       	ld	r24, Z
 66a:	89 83       	std	Y+1, r24	; 0x01
 66c:	0e 5f       	subi	r16, 0xFE	; 254
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	88 24       	eor	r8, r8
 672:	83 94       	inc	r8
 674:	91 2c       	mov	r9, r1
 676:	53 01       	movw	r10, r6
 678:	12 c0       	rjmp	.+36     	; 0x69e <vfprintf+0x178>
 67a:	28 01       	movw	r4, r16
 67c:	f2 e0       	ldi	r31, 0x02	; 2
 67e:	4f 0e       	add	r4, r31
 680:	51 1c       	adc	r5, r1
 682:	f8 01       	movw	r30, r16
 684:	a0 80       	ld	r10, Z
 686:	b1 80       	ldd	r11, Z+1	; 0x01
 688:	36 fe       	sbrs	r3, 6
 68a:	03 c0       	rjmp	.+6      	; 0x692 <vfprintf+0x16c>
 68c:	69 2d       	mov	r22, r9
 68e:	70 e0       	ldi	r23, 0x00	; 0
 690:	02 c0       	rjmp	.+4      	; 0x696 <vfprintf+0x170>
 692:	6f ef       	ldi	r22, 0xFF	; 255
 694:	7f ef       	ldi	r23, 0xFF	; 255
 696:	c5 01       	movw	r24, r10
 698:	90 d2       	rcall	.+1312   	; 0xbba <strnlen>
 69a:	4c 01       	movw	r8, r24
 69c:	82 01       	movw	r16, r4
 69e:	f3 2d       	mov	r31, r3
 6a0:	ff 77       	andi	r31, 0x7F	; 127
 6a2:	3f 2e       	mov	r3, r31
 6a4:	15 c0       	rjmp	.+42     	; 0x6d0 <vfprintf+0x1aa>
 6a6:	28 01       	movw	r4, r16
 6a8:	22 e0       	ldi	r18, 0x02	; 2
 6aa:	42 0e       	add	r4, r18
 6ac:	51 1c       	adc	r5, r1
 6ae:	f8 01       	movw	r30, r16
 6b0:	a0 80       	ld	r10, Z
 6b2:	b1 80       	ldd	r11, Z+1	; 0x01
 6b4:	36 fe       	sbrs	r3, 6
 6b6:	03 c0       	rjmp	.+6      	; 0x6be <vfprintf+0x198>
 6b8:	69 2d       	mov	r22, r9
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <vfprintf+0x19c>
 6be:	6f ef       	ldi	r22, 0xFF	; 255
 6c0:	7f ef       	ldi	r23, 0xFF	; 255
 6c2:	c5 01       	movw	r24, r10
 6c4:	68 d2       	rcall	.+1232   	; 0xb96 <strnlen_P>
 6c6:	4c 01       	movw	r8, r24
 6c8:	f3 2d       	mov	r31, r3
 6ca:	f0 68       	ori	r31, 0x80	; 128
 6cc:	3f 2e       	mov	r3, r31
 6ce:	82 01       	movw	r16, r4
 6d0:	33 fc       	sbrc	r3, 3
 6d2:	19 c0       	rjmp	.+50     	; 0x706 <vfprintf+0x1e0>
 6d4:	82 2d       	mov	r24, r2
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	88 16       	cp	r8, r24
 6da:	99 06       	cpc	r9, r25
 6dc:	a0 f4       	brcc	.+40     	; 0x706 <vfprintf+0x1e0>
 6de:	b6 01       	movw	r22, r12
 6e0:	80 e2       	ldi	r24, 0x20	; 32
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	75 d2       	rcall	.+1258   	; 0xbd0 <fputc>
 6e6:	2a 94       	dec	r2
 6e8:	f5 cf       	rjmp	.-22     	; 0x6d4 <vfprintf+0x1ae>
 6ea:	f5 01       	movw	r30, r10
 6ec:	37 fc       	sbrc	r3, 7
 6ee:	85 91       	lpm	r24, Z+
 6f0:	37 fe       	sbrs	r3, 7
 6f2:	81 91       	ld	r24, Z+
 6f4:	5f 01       	movw	r10, r30
 6f6:	b6 01       	movw	r22, r12
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	6a d2       	rcall	.+1236   	; 0xbd0 <fputc>
 6fc:	21 10       	cpse	r2, r1
 6fe:	2a 94       	dec	r2
 700:	21 e0       	ldi	r18, 0x01	; 1
 702:	82 1a       	sub	r8, r18
 704:	91 08       	sbc	r9, r1
 706:	81 14       	cp	r8, r1
 708:	91 04       	cpc	r9, r1
 70a:	79 f7       	brne	.-34     	; 0x6ea <vfprintf+0x1c4>
 70c:	e1 c0       	rjmp	.+450    	; 0x8d0 <vfprintf+0x3aa>
 70e:	84 36       	cpi	r24, 0x64	; 100
 710:	11 f0       	breq	.+4      	; 0x716 <vfprintf+0x1f0>
 712:	89 36       	cpi	r24, 0x69	; 105
 714:	39 f5       	brne	.+78     	; 0x764 <vfprintf+0x23e>
 716:	f8 01       	movw	r30, r16
 718:	37 fe       	sbrs	r3, 7
 71a:	07 c0       	rjmp	.+14     	; 0x72a <vfprintf+0x204>
 71c:	60 81       	ld	r22, Z
 71e:	71 81       	ldd	r23, Z+1	; 0x01
 720:	82 81       	ldd	r24, Z+2	; 0x02
 722:	93 81       	ldd	r25, Z+3	; 0x03
 724:	0c 5f       	subi	r16, 0xFC	; 252
 726:	1f 4f       	sbci	r17, 0xFF	; 255
 728:	08 c0       	rjmp	.+16     	; 0x73a <vfprintf+0x214>
 72a:	60 81       	ld	r22, Z
 72c:	71 81       	ldd	r23, Z+1	; 0x01
 72e:	07 2e       	mov	r0, r23
 730:	00 0c       	add	r0, r0
 732:	88 0b       	sbc	r24, r24
 734:	99 0b       	sbc	r25, r25
 736:	0e 5f       	subi	r16, 0xFE	; 254
 738:	1f 4f       	sbci	r17, 0xFF	; 255
 73a:	f3 2d       	mov	r31, r3
 73c:	ff 76       	andi	r31, 0x6F	; 111
 73e:	3f 2e       	mov	r3, r31
 740:	97 ff       	sbrs	r25, 7
 742:	09 c0       	rjmp	.+18     	; 0x756 <vfprintf+0x230>
 744:	90 95       	com	r25
 746:	80 95       	com	r24
 748:	70 95       	com	r23
 74a:	61 95       	neg	r22
 74c:	7f 4f       	sbci	r23, 0xFF	; 255
 74e:	8f 4f       	sbci	r24, 0xFF	; 255
 750:	9f 4f       	sbci	r25, 0xFF	; 255
 752:	f0 68       	ori	r31, 0x80	; 128
 754:	3f 2e       	mov	r3, r31
 756:	2a e0       	ldi	r18, 0x0A	; 10
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	a3 01       	movw	r20, r6
 75c:	75 d2       	rcall	.+1258   	; 0xc48 <__ultoa_invert>
 75e:	88 2e       	mov	r8, r24
 760:	86 18       	sub	r8, r6
 762:	44 c0       	rjmp	.+136    	; 0x7ec <vfprintf+0x2c6>
 764:	85 37       	cpi	r24, 0x75	; 117
 766:	31 f4       	brne	.+12     	; 0x774 <vfprintf+0x24e>
 768:	23 2d       	mov	r18, r3
 76a:	2f 7e       	andi	r18, 0xEF	; 239
 76c:	b2 2e       	mov	r11, r18
 76e:	2a e0       	ldi	r18, 0x0A	; 10
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	25 c0       	rjmp	.+74     	; 0x7be <vfprintf+0x298>
 774:	93 2d       	mov	r25, r3
 776:	99 7f       	andi	r25, 0xF9	; 249
 778:	b9 2e       	mov	r11, r25
 77a:	8f 36       	cpi	r24, 0x6F	; 111
 77c:	c1 f0       	breq	.+48     	; 0x7ae <vfprintf+0x288>
 77e:	18 f4       	brcc	.+6      	; 0x786 <vfprintf+0x260>
 780:	88 35       	cpi	r24, 0x58	; 88
 782:	79 f0       	breq	.+30     	; 0x7a2 <vfprintf+0x27c>
 784:	ae c0       	rjmp	.+348    	; 0x8e2 <vfprintf+0x3bc>
 786:	80 37       	cpi	r24, 0x70	; 112
 788:	19 f0       	breq	.+6      	; 0x790 <vfprintf+0x26a>
 78a:	88 37       	cpi	r24, 0x78	; 120
 78c:	21 f0       	breq	.+8      	; 0x796 <vfprintf+0x270>
 78e:	a9 c0       	rjmp	.+338    	; 0x8e2 <vfprintf+0x3bc>
 790:	e9 2f       	mov	r30, r25
 792:	e0 61       	ori	r30, 0x10	; 16
 794:	be 2e       	mov	r11, r30
 796:	b4 fe       	sbrs	r11, 4
 798:	0d c0       	rjmp	.+26     	; 0x7b4 <vfprintf+0x28e>
 79a:	fb 2d       	mov	r31, r11
 79c:	f4 60       	ori	r31, 0x04	; 4
 79e:	bf 2e       	mov	r11, r31
 7a0:	09 c0       	rjmp	.+18     	; 0x7b4 <vfprintf+0x28e>
 7a2:	34 fe       	sbrs	r3, 4
 7a4:	0a c0       	rjmp	.+20     	; 0x7ba <vfprintf+0x294>
 7a6:	29 2f       	mov	r18, r25
 7a8:	26 60       	ori	r18, 0x06	; 6
 7aa:	b2 2e       	mov	r11, r18
 7ac:	06 c0       	rjmp	.+12     	; 0x7ba <vfprintf+0x294>
 7ae:	28 e0       	ldi	r18, 0x08	; 8
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	05 c0       	rjmp	.+10     	; 0x7be <vfprintf+0x298>
 7b4:	20 e1       	ldi	r18, 0x10	; 16
 7b6:	30 e0       	ldi	r19, 0x00	; 0
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <vfprintf+0x298>
 7ba:	20 e1       	ldi	r18, 0x10	; 16
 7bc:	32 e0       	ldi	r19, 0x02	; 2
 7be:	f8 01       	movw	r30, r16
 7c0:	b7 fe       	sbrs	r11, 7
 7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <vfprintf+0x2ac>
 7c4:	60 81       	ld	r22, Z
 7c6:	71 81       	ldd	r23, Z+1	; 0x01
 7c8:	82 81       	ldd	r24, Z+2	; 0x02
 7ca:	93 81       	ldd	r25, Z+3	; 0x03
 7cc:	0c 5f       	subi	r16, 0xFC	; 252
 7ce:	1f 4f       	sbci	r17, 0xFF	; 255
 7d0:	06 c0       	rjmp	.+12     	; 0x7de <vfprintf+0x2b8>
 7d2:	60 81       	ld	r22, Z
 7d4:	71 81       	ldd	r23, Z+1	; 0x01
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	0e 5f       	subi	r16, 0xFE	; 254
 7dc:	1f 4f       	sbci	r17, 0xFF	; 255
 7de:	a3 01       	movw	r20, r6
 7e0:	33 d2       	rcall	.+1126   	; 0xc48 <__ultoa_invert>
 7e2:	88 2e       	mov	r8, r24
 7e4:	86 18       	sub	r8, r6
 7e6:	fb 2d       	mov	r31, r11
 7e8:	ff 77       	andi	r31, 0x7F	; 127
 7ea:	3f 2e       	mov	r3, r31
 7ec:	36 fe       	sbrs	r3, 6
 7ee:	0d c0       	rjmp	.+26     	; 0x80a <vfprintf+0x2e4>
 7f0:	23 2d       	mov	r18, r3
 7f2:	2e 7f       	andi	r18, 0xFE	; 254
 7f4:	a2 2e       	mov	r10, r18
 7f6:	89 14       	cp	r8, r9
 7f8:	58 f4       	brcc	.+22     	; 0x810 <vfprintf+0x2ea>
 7fa:	34 fe       	sbrs	r3, 4
 7fc:	0b c0       	rjmp	.+22     	; 0x814 <vfprintf+0x2ee>
 7fe:	32 fc       	sbrc	r3, 2
 800:	09 c0       	rjmp	.+18     	; 0x814 <vfprintf+0x2ee>
 802:	83 2d       	mov	r24, r3
 804:	8e 7e       	andi	r24, 0xEE	; 238
 806:	a8 2e       	mov	r10, r24
 808:	05 c0       	rjmp	.+10     	; 0x814 <vfprintf+0x2ee>
 80a:	b8 2c       	mov	r11, r8
 80c:	a3 2c       	mov	r10, r3
 80e:	03 c0       	rjmp	.+6      	; 0x816 <vfprintf+0x2f0>
 810:	b8 2c       	mov	r11, r8
 812:	01 c0       	rjmp	.+2      	; 0x816 <vfprintf+0x2f0>
 814:	b9 2c       	mov	r11, r9
 816:	a4 fe       	sbrs	r10, 4
 818:	0f c0       	rjmp	.+30     	; 0x838 <vfprintf+0x312>
 81a:	fe 01       	movw	r30, r28
 81c:	e8 0d       	add	r30, r8
 81e:	f1 1d       	adc	r31, r1
 820:	80 81       	ld	r24, Z
 822:	80 33       	cpi	r24, 0x30	; 48
 824:	21 f4       	brne	.+8      	; 0x82e <vfprintf+0x308>
 826:	9a 2d       	mov	r25, r10
 828:	99 7e       	andi	r25, 0xE9	; 233
 82a:	a9 2e       	mov	r10, r25
 82c:	09 c0       	rjmp	.+18     	; 0x840 <vfprintf+0x31a>
 82e:	a2 fe       	sbrs	r10, 2
 830:	06 c0       	rjmp	.+12     	; 0x83e <vfprintf+0x318>
 832:	b3 94       	inc	r11
 834:	b3 94       	inc	r11
 836:	04 c0       	rjmp	.+8      	; 0x840 <vfprintf+0x31a>
 838:	8a 2d       	mov	r24, r10
 83a:	86 78       	andi	r24, 0x86	; 134
 83c:	09 f0       	breq	.+2      	; 0x840 <vfprintf+0x31a>
 83e:	b3 94       	inc	r11
 840:	a3 fc       	sbrc	r10, 3
 842:	10 c0       	rjmp	.+32     	; 0x864 <vfprintf+0x33e>
 844:	a0 fe       	sbrs	r10, 0
 846:	06 c0       	rjmp	.+12     	; 0x854 <vfprintf+0x32e>
 848:	b2 14       	cp	r11, r2
 84a:	80 f4       	brcc	.+32     	; 0x86c <vfprintf+0x346>
 84c:	28 0c       	add	r2, r8
 84e:	92 2c       	mov	r9, r2
 850:	9b 18       	sub	r9, r11
 852:	0d c0       	rjmp	.+26     	; 0x86e <vfprintf+0x348>
 854:	b2 14       	cp	r11, r2
 856:	58 f4       	brcc	.+22     	; 0x86e <vfprintf+0x348>
 858:	b6 01       	movw	r22, r12
 85a:	80 e2       	ldi	r24, 0x20	; 32
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	b8 d1       	rcall	.+880    	; 0xbd0 <fputc>
 860:	b3 94       	inc	r11
 862:	f8 cf       	rjmp	.-16     	; 0x854 <vfprintf+0x32e>
 864:	b2 14       	cp	r11, r2
 866:	18 f4       	brcc	.+6      	; 0x86e <vfprintf+0x348>
 868:	2b 18       	sub	r2, r11
 86a:	02 c0       	rjmp	.+4      	; 0x870 <vfprintf+0x34a>
 86c:	98 2c       	mov	r9, r8
 86e:	21 2c       	mov	r2, r1
 870:	a4 fe       	sbrs	r10, 4
 872:	0f c0       	rjmp	.+30     	; 0x892 <vfprintf+0x36c>
 874:	b6 01       	movw	r22, r12
 876:	80 e3       	ldi	r24, 0x30	; 48
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	aa d1       	rcall	.+852    	; 0xbd0 <fputc>
 87c:	a2 fe       	sbrs	r10, 2
 87e:	16 c0       	rjmp	.+44     	; 0x8ac <vfprintf+0x386>
 880:	a1 fc       	sbrc	r10, 1
 882:	03 c0       	rjmp	.+6      	; 0x88a <vfprintf+0x364>
 884:	88 e7       	ldi	r24, 0x78	; 120
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	02 c0       	rjmp	.+4      	; 0x88e <vfprintf+0x368>
 88a:	88 e5       	ldi	r24, 0x58	; 88
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	b6 01       	movw	r22, r12
 890:	0c c0       	rjmp	.+24     	; 0x8aa <vfprintf+0x384>
 892:	8a 2d       	mov	r24, r10
 894:	86 78       	andi	r24, 0x86	; 134
 896:	51 f0       	breq	.+20     	; 0x8ac <vfprintf+0x386>
 898:	a1 fe       	sbrs	r10, 1
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <vfprintf+0x37a>
 89c:	8b e2       	ldi	r24, 0x2B	; 43
 89e:	01 c0       	rjmp	.+2      	; 0x8a2 <vfprintf+0x37c>
 8a0:	80 e2       	ldi	r24, 0x20	; 32
 8a2:	a7 fc       	sbrc	r10, 7
 8a4:	8d e2       	ldi	r24, 0x2D	; 45
 8a6:	b6 01       	movw	r22, r12
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	92 d1       	rcall	.+804    	; 0xbd0 <fputc>
 8ac:	89 14       	cp	r8, r9
 8ae:	30 f4       	brcc	.+12     	; 0x8bc <vfprintf+0x396>
 8b0:	b6 01       	movw	r22, r12
 8b2:	80 e3       	ldi	r24, 0x30	; 48
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	8c d1       	rcall	.+792    	; 0xbd0 <fputc>
 8b8:	9a 94       	dec	r9
 8ba:	f8 cf       	rjmp	.-16     	; 0x8ac <vfprintf+0x386>
 8bc:	8a 94       	dec	r8
 8be:	f3 01       	movw	r30, r6
 8c0:	e8 0d       	add	r30, r8
 8c2:	f1 1d       	adc	r31, r1
 8c4:	80 81       	ld	r24, Z
 8c6:	b6 01       	movw	r22, r12
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	82 d1       	rcall	.+772    	; 0xbd0 <fputc>
 8cc:	81 10       	cpse	r8, r1
 8ce:	f6 cf       	rjmp	.-20     	; 0x8bc <vfprintf+0x396>
 8d0:	22 20       	and	r2, r2
 8d2:	09 f4       	brne	.+2      	; 0x8d6 <vfprintf+0x3b0>
 8d4:	4e ce       	rjmp	.-868    	; 0x572 <vfprintf+0x4c>
 8d6:	b6 01       	movw	r22, r12
 8d8:	80 e2       	ldi	r24, 0x20	; 32
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	79 d1       	rcall	.+754    	; 0xbd0 <fputc>
 8de:	2a 94       	dec	r2
 8e0:	f7 cf       	rjmp	.-18     	; 0x8d0 <vfprintf+0x3aa>
 8e2:	f6 01       	movw	r30, r12
 8e4:	86 81       	ldd	r24, Z+6	; 0x06
 8e6:	97 81       	ldd	r25, Z+7	; 0x07
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <vfprintf+0x3c8>
 8ea:	8f ef       	ldi	r24, 0xFF	; 255
 8ec:	9f ef       	ldi	r25, 0xFF	; 255
 8ee:	2b 96       	adiw	r28, 0x0b	; 11
 8f0:	0f b6       	in	r0, 0x3f	; 63
 8f2:	f8 94       	cli
 8f4:	de bf       	out	0x3e, r29	; 62
 8f6:	0f be       	out	0x3f, r0	; 63
 8f8:	cd bf       	out	0x3d, r28	; 61
 8fa:	df 91       	pop	r29
 8fc:	cf 91       	pop	r28
 8fe:	1f 91       	pop	r17
 900:	0f 91       	pop	r16
 902:	ff 90       	pop	r15
 904:	ef 90       	pop	r14
 906:	df 90       	pop	r13
 908:	cf 90       	pop	r12
 90a:	bf 90       	pop	r11
 90c:	af 90       	pop	r10
 90e:	9f 90       	pop	r9
 910:	8f 90       	pop	r8
 912:	7f 90       	pop	r7
 914:	6f 90       	pop	r6
 916:	5f 90       	pop	r5
 918:	4f 90       	pop	r4
 91a:	3f 90       	pop	r3
 91c:	2f 90       	pop	r2
 91e:	08 95       	ret

00000920 <calloc>:
 920:	0f 93       	push	r16
 922:	1f 93       	push	r17
 924:	cf 93       	push	r28
 926:	df 93       	push	r29
 928:	86 9f       	mul	r24, r22
 92a:	80 01       	movw	r16, r0
 92c:	87 9f       	mul	r24, r23
 92e:	10 0d       	add	r17, r0
 930:	96 9f       	mul	r25, r22
 932:	10 0d       	add	r17, r0
 934:	11 24       	eor	r1, r1
 936:	c8 01       	movw	r24, r16
 938:	0d d0       	rcall	.+26     	; 0x954 <malloc>
 93a:	ec 01       	movw	r28, r24
 93c:	00 97       	sbiw	r24, 0x00	; 0
 93e:	21 f0       	breq	.+8      	; 0x948 <calloc+0x28>
 940:	a8 01       	movw	r20, r16
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	32 d1       	rcall	.+612    	; 0xbac <memset>
 948:	ce 01       	movw	r24, r28
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	1f 91       	pop	r17
 950:	0f 91       	pop	r16
 952:	08 95       	ret

00000954 <malloc>:
 954:	0f 93       	push	r16
 956:	1f 93       	push	r17
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
 95c:	82 30       	cpi	r24, 0x02	; 2
 95e:	91 05       	cpc	r25, r1
 960:	10 f4       	brcc	.+4      	; 0x966 <malloc+0x12>
 962:	82 e0       	ldi	r24, 0x02	; 2
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <__flp>
 96a:	f0 91 bf 02 	lds	r31, 0x02BF	; 0x8002bf <__flp+0x1>
 96e:	20 e0       	ldi	r18, 0x00	; 0
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	a0 e0       	ldi	r26, 0x00	; 0
 974:	b0 e0       	ldi	r27, 0x00	; 0
 976:	30 97       	sbiw	r30, 0x00	; 0
 978:	19 f1       	breq	.+70     	; 0x9c0 <malloc+0x6c>
 97a:	40 81       	ld	r20, Z
 97c:	51 81       	ldd	r21, Z+1	; 0x01
 97e:	02 81       	ldd	r16, Z+2	; 0x02
 980:	13 81       	ldd	r17, Z+3	; 0x03
 982:	48 17       	cp	r20, r24
 984:	59 07       	cpc	r21, r25
 986:	c8 f0       	brcs	.+50     	; 0x9ba <malloc+0x66>
 988:	84 17       	cp	r24, r20
 98a:	95 07       	cpc	r25, r21
 98c:	69 f4       	brne	.+26     	; 0x9a8 <malloc+0x54>
 98e:	10 97       	sbiw	r26, 0x00	; 0
 990:	31 f0       	breq	.+12     	; 0x99e <malloc+0x4a>
 992:	12 96       	adiw	r26, 0x02	; 2
 994:	0c 93       	st	X, r16
 996:	12 97       	sbiw	r26, 0x02	; 2
 998:	13 96       	adiw	r26, 0x03	; 3
 99a:	1c 93       	st	X, r17
 99c:	27 c0       	rjmp	.+78     	; 0x9ec <malloc+0x98>
 99e:	00 93 be 02 	sts	0x02BE, r16	; 0x8002be <__flp>
 9a2:	10 93 bf 02 	sts	0x02BF, r17	; 0x8002bf <__flp+0x1>
 9a6:	22 c0       	rjmp	.+68     	; 0x9ec <malloc+0x98>
 9a8:	21 15       	cp	r18, r1
 9aa:	31 05       	cpc	r19, r1
 9ac:	19 f0       	breq	.+6      	; 0x9b4 <malloc+0x60>
 9ae:	42 17       	cp	r20, r18
 9b0:	53 07       	cpc	r21, r19
 9b2:	18 f4       	brcc	.+6      	; 0x9ba <malloc+0x66>
 9b4:	9a 01       	movw	r18, r20
 9b6:	bd 01       	movw	r22, r26
 9b8:	ef 01       	movw	r28, r30
 9ba:	df 01       	movw	r26, r30
 9bc:	f8 01       	movw	r30, r16
 9be:	db cf       	rjmp	.-74     	; 0x976 <malloc+0x22>
 9c0:	21 15       	cp	r18, r1
 9c2:	31 05       	cpc	r19, r1
 9c4:	f9 f0       	breq	.+62     	; 0xa04 <malloc+0xb0>
 9c6:	28 1b       	sub	r18, r24
 9c8:	39 0b       	sbc	r19, r25
 9ca:	24 30       	cpi	r18, 0x04	; 4
 9cc:	31 05       	cpc	r19, r1
 9ce:	80 f4       	brcc	.+32     	; 0x9f0 <malloc+0x9c>
 9d0:	8a 81       	ldd	r24, Y+2	; 0x02
 9d2:	9b 81       	ldd	r25, Y+3	; 0x03
 9d4:	61 15       	cp	r22, r1
 9d6:	71 05       	cpc	r23, r1
 9d8:	21 f0       	breq	.+8      	; 0x9e2 <malloc+0x8e>
 9da:	fb 01       	movw	r30, r22
 9dc:	93 83       	std	Z+3, r25	; 0x03
 9de:	82 83       	std	Z+2, r24	; 0x02
 9e0:	04 c0       	rjmp	.+8      	; 0x9ea <malloc+0x96>
 9e2:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <__flp+0x1>
 9e6:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <__flp>
 9ea:	fe 01       	movw	r30, r28
 9ec:	32 96       	adiw	r30, 0x02	; 2
 9ee:	44 c0       	rjmp	.+136    	; 0xa78 <malloc+0x124>
 9f0:	fe 01       	movw	r30, r28
 9f2:	e2 0f       	add	r30, r18
 9f4:	f3 1f       	adc	r31, r19
 9f6:	81 93       	st	Z+, r24
 9f8:	91 93       	st	Z+, r25
 9fa:	22 50       	subi	r18, 0x02	; 2
 9fc:	31 09       	sbc	r19, r1
 9fe:	39 83       	std	Y+1, r19	; 0x01
 a00:	28 83       	st	Y, r18
 a02:	3a c0       	rjmp	.+116    	; 0xa78 <malloc+0x124>
 a04:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__brkval>
 a08:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__brkval+0x1>
 a0c:	23 2b       	or	r18, r19
 a0e:	41 f4       	brne	.+16     	; 0xa20 <malloc+0xcc>
 a10:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 a14:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 a18:	30 93 bd 02 	sts	0x02BD, r19	; 0x8002bd <__brkval+0x1>
 a1c:	20 93 bc 02 	sts	0x02BC, r18	; 0x8002bc <__brkval>
 a20:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 a24:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 a28:	21 15       	cp	r18, r1
 a2a:	31 05       	cpc	r19, r1
 a2c:	41 f4       	brne	.+16     	; 0xa3e <malloc+0xea>
 a2e:	2d b7       	in	r18, 0x3d	; 61
 a30:	3e b7       	in	r19, 0x3e	; 62
 a32:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 a36:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 a3a:	24 1b       	sub	r18, r20
 a3c:	35 0b       	sbc	r19, r21
 a3e:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <__brkval>
 a42:	f0 91 bd 02 	lds	r31, 0x02BD	; 0x8002bd <__brkval+0x1>
 a46:	e2 17       	cp	r30, r18
 a48:	f3 07       	cpc	r31, r19
 a4a:	a0 f4       	brcc	.+40     	; 0xa74 <malloc+0x120>
 a4c:	2e 1b       	sub	r18, r30
 a4e:	3f 0b       	sbc	r19, r31
 a50:	28 17       	cp	r18, r24
 a52:	39 07       	cpc	r19, r25
 a54:	78 f0       	brcs	.+30     	; 0xa74 <malloc+0x120>
 a56:	ac 01       	movw	r20, r24
 a58:	4e 5f       	subi	r20, 0xFE	; 254
 a5a:	5f 4f       	sbci	r21, 0xFF	; 255
 a5c:	24 17       	cp	r18, r20
 a5e:	35 07       	cpc	r19, r21
 a60:	48 f0       	brcs	.+18     	; 0xa74 <malloc+0x120>
 a62:	4e 0f       	add	r20, r30
 a64:	5f 1f       	adc	r21, r31
 a66:	50 93 bd 02 	sts	0x02BD, r21	; 0x8002bd <__brkval+0x1>
 a6a:	40 93 bc 02 	sts	0x02BC, r20	; 0x8002bc <__brkval>
 a6e:	81 93       	st	Z+, r24
 a70:	91 93       	st	Z+, r25
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <malloc+0x124>
 a74:	e0 e0       	ldi	r30, 0x00	; 0
 a76:	f0 e0       	ldi	r31, 0x00	; 0
 a78:	cf 01       	movw	r24, r30
 a7a:	df 91       	pop	r29
 a7c:	cf 91       	pop	r28
 a7e:	1f 91       	pop	r17
 a80:	0f 91       	pop	r16
 a82:	08 95       	ret

00000a84 <free>:
 a84:	cf 93       	push	r28
 a86:	df 93       	push	r29
 a88:	00 97       	sbiw	r24, 0x00	; 0
 a8a:	09 f4       	brne	.+2      	; 0xa8e <free+0xa>
 a8c:	81 c0       	rjmp	.+258    	; 0xb90 <free+0x10c>
 a8e:	fc 01       	movw	r30, r24
 a90:	32 97       	sbiw	r30, 0x02	; 2
 a92:	13 82       	std	Z+3, r1	; 0x03
 a94:	12 82       	std	Z+2, r1	; 0x02
 a96:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <__flp>
 a9a:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <__flp+0x1>
 a9e:	10 97       	sbiw	r26, 0x00	; 0
 aa0:	81 f4       	brne	.+32     	; 0xac2 <free+0x3e>
 aa2:	20 81       	ld	r18, Z
 aa4:	31 81       	ldd	r19, Z+1	; 0x01
 aa6:	82 0f       	add	r24, r18
 aa8:	93 1f       	adc	r25, r19
 aaa:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__brkval>
 aae:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__brkval+0x1>
 ab2:	28 17       	cp	r18, r24
 ab4:	39 07       	cpc	r19, r25
 ab6:	51 f5       	brne	.+84     	; 0xb0c <free+0x88>
 ab8:	f0 93 bd 02 	sts	0x02BD, r31	; 0x8002bd <__brkval+0x1>
 abc:	e0 93 bc 02 	sts	0x02BC, r30	; 0x8002bc <__brkval>
 ac0:	67 c0       	rjmp	.+206    	; 0xb90 <free+0x10c>
 ac2:	ed 01       	movw	r28, r26
 ac4:	20 e0       	ldi	r18, 0x00	; 0
 ac6:	30 e0       	ldi	r19, 0x00	; 0
 ac8:	ce 17       	cp	r28, r30
 aca:	df 07       	cpc	r29, r31
 acc:	40 f4       	brcc	.+16     	; 0xade <free+0x5a>
 ace:	4a 81       	ldd	r20, Y+2	; 0x02
 ad0:	5b 81       	ldd	r21, Y+3	; 0x03
 ad2:	9e 01       	movw	r18, r28
 ad4:	41 15       	cp	r20, r1
 ad6:	51 05       	cpc	r21, r1
 ad8:	f1 f0       	breq	.+60     	; 0xb16 <free+0x92>
 ada:	ea 01       	movw	r28, r20
 adc:	f5 cf       	rjmp	.-22     	; 0xac8 <free+0x44>
 ade:	d3 83       	std	Z+3, r29	; 0x03
 ae0:	c2 83       	std	Z+2, r28	; 0x02
 ae2:	40 81       	ld	r20, Z
 ae4:	51 81       	ldd	r21, Z+1	; 0x01
 ae6:	84 0f       	add	r24, r20
 ae8:	95 1f       	adc	r25, r21
 aea:	c8 17       	cp	r28, r24
 aec:	d9 07       	cpc	r29, r25
 aee:	59 f4       	brne	.+22     	; 0xb06 <free+0x82>
 af0:	88 81       	ld	r24, Y
 af2:	99 81       	ldd	r25, Y+1	; 0x01
 af4:	84 0f       	add	r24, r20
 af6:	95 1f       	adc	r25, r21
 af8:	02 96       	adiw	r24, 0x02	; 2
 afa:	91 83       	std	Z+1, r25	; 0x01
 afc:	80 83       	st	Z, r24
 afe:	8a 81       	ldd	r24, Y+2	; 0x02
 b00:	9b 81       	ldd	r25, Y+3	; 0x03
 b02:	93 83       	std	Z+3, r25	; 0x03
 b04:	82 83       	std	Z+2, r24	; 0x02
 b06:	21 15       	cp	r18, r1
 b08:	31 05       	cpc	r19, r1
 b0a:	29 f4       	brne	.+10     	; 0xb16 <free+0x92>
 b0c:	f0 93 bf 02 	sts	0x02BF, r31	; 0x8002bf <__flp+0x1>
 b10:	e0 93 be 02 	sts	0x02BE, r30	; 0x8002be <__flp>
 b14:	3d c0       	rjmp	.+122    	; 0xb90 <free+0x10c>
 b16:	e9 01       	movw	r28, r18
 b18:	fb 83       	std	Y+3, r31	; 0x03
 b1a:	ea 83       	std	Y+2, r30	; 0x02
 b1c:	49 91       	ld	r20, Y+
 b1e:	59 91       	ld	r21, Y+
 b20:	c4 0f       	add	r28, r20
 b22:	d5 1f       	adc	r29, r21
 b24:	ec 17       	cp	r30, r28
 b26:	fd 07       	cpc	r31, r29
 b28:	61 f4       	brne	.+24     	; 0xb42 <free+0xbe>
 b2a:	80 81       	ld	r24, Z
 b2c:	91 81       	ldd	r25, Z+1	; 0x01
 b2e:	84 0f       	add	r24, r20
 b30:	95 1f       	adc	r25, r21
 b32:	02 96       	adiw	r24, 0x02	; 2
 b34:	e9 01       	movw	r28, r18
 b36:	99 83       	std	Y+1, r25	; 0x01
 b38:	88 83       	st	Y, r24
 b3a:	82 81       	ldd	r24, Z+2	; 0x02
 b3c:	93 81       	ldd	r25, Z+3	; 0x03
 b3e:	9b 83       	std	Y+3, r25	; 0x03
 b40:	8a 83       	std	Y+2, r24	; 0x02
 b42:	e0 e0       	ldi	r30, 0x00	; 0
 b44:	f0 e0       	ldi	r31, 0x00	; 0
 b46:	12 96       	adiw	r26, 0x02	; 2
 b48:	8d 91       	ld	r24, X+
 b4a:	9c 91       	ld	r25, X
 b4c:	13 97       	sbiw	r26, 0x03	; 3
 b4e:	00 97       	sbiw	r24, 0x00	; 0
 b50:	19 f0       	breq	.+6      	; 0xb58 <free+0xd4>
 b52:	fd 01       	movw	r30, r26
 b54:	dc 01       	movw	r26, r24
 b56:	f7 cf       	rjmp	.-18     	; 0xb46 <free+0xc2>
 b58:	8d 91       	ld	r24, X+
 b5a:	9c 91       	ld	r25, X
 b5c:	11 97       	sbiw	r26, 0x01	; 1
 b5e:	9d 01       	movw	r18, r26
 b60:	2e 5f       	subi	r18, 0xFE	; 254
 b62:	3f 4f       	sbci	r19, 0xFF	; 255
 b64:	82 0f       	add	r24, r18
 b66:	93 1f       	adc	r25, r19
 b68:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__brkval>
 b6c:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__brkval+0x1>
 b70:	28 17       	cp	r18, r24
 b72:	39 07       	cpc	r19, r25
 b74:	69 f4       	brne	.+26     	; 0xb90 <free+0x10c>
 b76:	30 97       	sbiw	r30, 0x00	; 0
 b78:	29 f4       	brne	.+10     	; 0xb84 <free+0x100>
 b7a:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__flp+0x1>
 b7e:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__flp>
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <free+0x104>
 b84:	13 82       	std	Z+3, r1	; 0x03
 b86:	12 82       	std	Z+2, r1	; 0x02
 b88:	b0 93 bd 02 	sts	0x02BD, r27	; 0x8002bd <__brkval+0x1>
 b8c:	a0 93 bc 02 	sts	0x02BC, r26	; 0x8002bc <__brkval>
 b90:	df 91       	pop	r29
 b92:	cf 91       	pop	r28
 b94:	08 95       	ret

00000b96 <strnlen_P>:
 b96:	fc 01       	movw	r30, r24
 b98:	05 90       	lpm	r0, Z+
 b9a:	61 50       	subi	r22, 0x01	; 1
 b9c:	70 40       	sbci	r23, 0x00	; 0
 b9e:	01 10       	cpse	r0, r1
 ba0:	d8 f7       	brcc	.-10     	; 0xb98 <strnlen_P+0x2>
 ba2:	80 95       	com	r24
 ba4:	90 95       	com	r25
 ba6:	8e 0f       	add	r24, r30
 ba8:	9f 1f       	adc	r25, r31
 baa:	08 95       	ret

00000bac <memset>:
 bac:	dc 01       	movw	r26, r24
 bae:	01 c0       	rjmp	.+2      	; 0xbb2 <memset+0x6>
 bb0:	6d 93       	st	X+, r22
 bb2:	41 50       	subi	r20, 0x01	; 1
 bb4:	50 40       	sbci	r21, 0x00	; 0
 bb6:	e0 f7       	brcc	.-8      	; 0xbb0 <memset+0x4>
 bb8:	08 95       	ret

00000bba <strnlen>:
 bba:	fc 01       	movw	r30, r24
 bbc:	61 50       	subi	r22, 0x01	; 1
 bbe:	70 40       	sbci	r23, 0x00	; 0
 bc0:	01 90       	ld	r0, Z+
 bc2:	01 10       	cpse	r0, r1
 bc4:	d8 f7       	brcc	.-10     	; 0xbbc <strnlen+0x2>
 bc6:	80 95       	com	r24
 bc8:	90 95       	com	r25
 bca:	8e 0f       	add	r24, r30
 bcc:	9f 1f       	adc	r25, r31
 bce:	08 95       	ret

00000bd0 <fputc>:
 bd0:	0f 93       	push	r16
 bd2:	1f 93       	push	r17
 bd4:	cf 93       	push	r28
 bd6:	df 93       	push	r29
 bd8:	fb 01       	movw	r30, r22
 bda:	23 81       	ldd	r18, Z+3	; 0x03
 bdc:	21 fd       	sbrc	r18, 1
 bde:	03 c0       	rjmp	.+6      	; 0xbe6 <fputc+0x16>
 be0:	8f ef       	ldi	r24, 0xFF	; 255
 be2:	9f ef       	ldi	r25, 0xFF	; 255
 be4:	2c c0       	rjmp	.+88     	; 0xc3e <fputc+0x6e>
 be6:	22 ff       	sbrs	r18, 2
 be8:	16 c0       	rjmp	.+44     	; 0xc16 <fputc+0x46>
 bea:	46 81       	ldd	r20, Z+6	; 0x06
 bec:	57 81       	ldd	r21, Z+7	; 0x07
 bee:	24 81       	ldd	r18, Z+4	; 0x04
 bf0:	35 81       	ldd	r19, Z+5	; 0x05
 bf2:	42 17       	cp	r20, r18
 bf4:	53 07       	cpc	r21, r19
 bf6:	44 f4       	brge	.+16     	; 0xc08 <fputc+0x38>
 bf8:	a0 81       	ld	r26, Z
 bfa:	b1 81       	ldd	r27, Z+1	; 0x01
 bfc:	9d 01       	movw	r18, r26
 bfe:	2f 5f       	subi	r18, 0xFF	; 255
 c00:	3f 4f       	sbci	r19, 0xFF	; 255
 c02:	31 83       	std	Z+1, r19	; 0x01
 c04:	20 83       	st	Z, r18
 c06:	8c 93       	st	X, r24
 c08:	26 81       	ldd	r18, Z+6	; 0x06
 c0a:	37 81       	ldd	r19, Z+7	; 0x07
 c0c:	2f 5f       	subi	r18, 0xFF	; 255
 c0e:	3f 4f       	sbci	r19, 0xFF	; 255
 c10:	37 83       	std	Z+7, r19	; 0x07
 c12:	26 83       	std	Z+6, r18	; 0x06
 c14:	14 c0       	rjmp	.+40     	; 0xc3e <fputc+0x6e>
 c16:	8b 01       	movw	r16, r22
 c18:	ec 01       	movw	r28, r24
 c1a:	fb 01       	movw	r30, r22
 c1c:	00 84       	ldd	r0, Z+8	; 0x08
 c1e:	f1 85       	ldd	r31, Z+9	; 0x09
 c20:	e0 2d       	mov	r30, r0
 c22:	19 95       	eicall
 c24:	89 2b       	or	r24, r25
 c26:	e1 f6       	brne	.-72     	; 0xbe0 <fputc+0x10>
 c28:	d8 01       	movw	r26, r16
 c2a:	16 96       	adiw	r26, 0x06	; 6
 c2c:	8d 91       	ld	r24, X+
 c2e:	9c 91       	ld	r25, X
 c30:	17 97       	sbiw	r26, 0x07	; 7
 c32:	01 96       	adiw	r24, 0x01	; 1
 c34:	17 96       	adiw	r26, 0x07	; 7
 c36:	9c 93       	st	X, r25
 c38:	8e 93       	st	-X, r24
 c3a:	16 97       	sbiw	r26, 0x06	; 6
 c3c:	ce 01       	movw	r24, r28
 c3e:	df 91       	pop	r29
 c40:	cf 91       	pop	r28
 c42:	1f 91       	pop	r17
 c44:	0f 91       	pop	r16
 c46:	08 95       	ret

00000c48 <__ultoa_invert>:
 c48:	fa 01       	movw	r30, r20
 c4a:	aa 27       	eor	r26, r26
 c4c:	28 30       	cpi	r18, 0x08	; 8
 c4e:	51 f1       	breq	.+84     	; 0xca4 <__ultoa_invert+0x5c>
 c50:	20 31       	cpi	r18, 0x10	; 16
 c52:	81 f1       	breq	.+96     	; 0xcb4 <__ultoa_invert+0x6c>
 c54:	e8 94       	clt
 c56:	6f 93       	push	r22
 c58:	6e 7f       	andi	r22, 0xFE	; 254
 c5a:	6e 5f       	subi	r22, 0xFE	; 254
 c5c:	7f 4f       	sbci	r23, 0xFF	; 255
 c5e:	8f 4f       	sbci	r24, 0xFF	; 255
 c60:	9f 4f       	sbci	r25, 0xFF	; 255
 c62:	af 4f       	sbci	r26, 0xFF	; 255
 c64:	b1 e0       	ldi	r27, 0x01	; 1
 c66:	3e d0       	rcall	.+124    	; 0xce4 <__ultoa_invert+0x9c>
 c68:	b4 e0       	ldi	r27, 0x04	; 4
 c6a:	3c d0       	rcall	.+120    	; 0xce4 <__ultoa_invert+0x9c>
 c6c:	67 0f       	add	r22, r23
 c6e:	78 1f       	adc	r23, r24
 c70:	89 1f       	adc	r24, r25
 c72:	9a 1f       	adc	r25, r26
 c74:	a1 1d       	adc	r26, r1
 c76:	68 0f       	add	r22, r24
 c78:	79 1f       	adc	r23, r25
 c7a:	8a 1f       	adc	r24, r26
 c7c:	91 1d       	adc	r25, r1
 c7e:	a1 1d       	adc	r26, r1
 c80:	6a 0f       	add	r22, r26
 c82:	71 1d       	adc	r23, r1
 c84:	81 1d       	adc	r24, r1
 c86:	91 1d       	adc	r25, r1
 c88:	a1 1d       	adc	r26, r1
 c8a:	20 d0       	rcall	.+64     	; 0xccc <__ultoa_invert+0x84>
 c8c:	09 f4       	brne	.+2      	; 0xc90 <__ultoa_invert+0x48>
 c8e:	68 94       	set
 c90:	3f 91       	pop	r19
 c92:	2a e0       	ldi	r18, 0x0A	; 10
 c94:	26 9f       	mul	r18, r22
 c96:	11 24       	eor	r1, r1
 c98:	30 19       	sub	r19, r0
 c9a:	30 5d       	subi	r19, 0xD0	; 208
 c9c:	31 93       	st	Z+, r19
 c9e:	de f6       	brtc	.-74     	; 0xc56 <__ultoa_invert+0xe>
 ca0:	cf 01       	movw	r24, r30
 ca2:	08 95       	ret
 ca4:	46 2f       	mov	r20, r22
 ca6:	47 70       	andi	r20, 0x07	; 7
 ca8:	40 5d       	subi	r20, 0xD0	; 208
 caa:	41 93       	st	Z+, r20
 cac:	b3 e0       	ldi	r27, 0x03	; 3
 cae:	0f d0       	rcall	.+30     	; 0xcce <__ultoa_invert+0x86>
 cb0:	c9 f7       	brne	.-14     	; 0xca4 <__ultoa_invert+0x5c>
 cb2:	f6 cf       	rjmp	.-20     	; 0xca0 <__ultoa_invert+0x58>
 cb4:	46 2f       	mov	r20, r22
 cb6:	4f 70       	andi	r20, 0x0F	; 15
 cb8:	40 5d       	subi	r20, 0xD0	; 208
 cba:	4a 33       	cpi	r20, 0x3A	; 58
 cbc:	18 f0       	brcs	.+6      	; 0xcc4 <__ultoa_invert+0x7c>
 cbe:	49 5d       	subi	r20, 0xD9	; 217
 cc0:	31 fd       	sbrc	r19, 1
 cc2:	40 52       	subi	r20, 0x20	; 32
 cc4:	41 93       	st	Z+, r20
 cc6:	02 d0       	rcall	.+4      	; 0xccc <__ultoa_invert+0x84>
 cc8:	a9 f7       	brne	.-22     	; 0xcb4 <__ultoa_invert+0x6c>
 cca:	ea cf       	rjmp	.-44     	; 0xca0 <__ultoa_invert+0x58>
 ccc:	b4 e0       	ldi	r27, 0x04	; 4
 cce:	a6 95       	lsr	r26
 cd0:	97 95       	ror	r25
 cd2:	87 95       	ror	r24
 cd4:	77 95       	ror	r23
 cd6:	67 95       	ror	r22
 cd8:	ba 95       	dec	r27
 cda:	c9 f7       	brne	.-14     	; 0xcce <__ultoa_invert+0x86>
 cdc:	00 97       	sbiw	r24, 0x00	; 0
 cde:	61 05       	cpc	r22, r1
 ce0:	71 05       	cpc	r23, r1
 ce2:	08 95       	ret
 ce4:	9b 01       	movw	r18, r22
 ce6:	ac 01       	movw	r20, r24
 ce8:	0a 2e       	mov	r0, r26
 cea:	06 94       	lsr	r0
 cec:	57 95       	ror	r21
 cee:	47 95       	ror	r20
 cf0:	37 95       	ror	r19
 cf2:	27 95       	ror	r18
 cf4:	ba 95       	dec	r27
 cf6:	c9 f7       	brne	.-14     	; 0xcea <__ultoa_invert+0xa2>
 cf8:	62 0f       	add	r22, r18
 cfa:	73 1f       	adc	r23, r19
 cfc:	84 1f       	adc	r24, r20
 cfe:	95 1f       	adc	r25, r21
 d00:	a0 1d       	adc	r26, r0
 d02:	08 95       	ret

00000d04 <_exit>:
 d04:	f8 94       	cli

00000d06 <__stop_program>:
 d06:	ff cf       	rjmp	.-2      	; 0xd06 <__stop_program>
