
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00001b22  00001bb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800152  00800152  00001c08  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001aa6  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ed  00000000  00000000  000038d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009cd  00000000  00000000  000042bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000458  00000000  00000000  00004c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000650  00000000  00000000  000050e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000108b  00000000  00000000  00005734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  000067bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <OLED_init+0xc8>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e2 e2       	ldi	r30, 0x22	; 34
     37c:	fb e1       	ldi	r31, 0x1B	; 27
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 35       	cpi	r26, 0x52	; 82
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	a2 e5       	ldi	r26, 0x52	; 82
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 35       	cpi	r26, 0x5E	; 94
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <main>
     39e:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_read_x>:



uint8_t ADC_read_x(void) {
	// Setup to read from channel 1
	XMEM_write(0b0100, 0b010000000100);
     3a6:	64 e0       	ldi	r22, 0x04	; 4
     3a8:	74 e0       	ldi	r23, 0x04	; 4
     3aa:	84 e0       	ldi	r24, 0x04	; 4
     3ac:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	while (!ADC_INTERRUPT_READY) {
     3b0:	80 91 52 01 	lds	r24, 0x0152
     3b4:	90 91 53 01 	lds	r25, 0x0153
     3b8:	89 2b       	or	r24, r25
     3ba:	d1 f3       	breq	.-12     	; 0x3b0 <ADC_read_x+0xa>
		// wait for interrupt from ADC
		//printf("waiting for interrupt\n\r");
	}
	ADC_INTERRUPT_READY = 0;
     3bc:	10 92 53 01 	sts	0x0153, r1
     3c0:	10 92 52 01 	sts	0x0152, r1
	uint8_t x = XMEM_read(0b010000000000);
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	94 e0       	ldi	r25, 0x04	; 4
     3c8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <XMEM_read>
	//printf("read_x = %d \n\r", x);
	return x;
}
     3cc:	08 95       	ret

000003ce <ADC_read_y>:

uint8_t ADC_read_y(void) {
	// Setup to read from channel 2
	XMEM_write(0b0101, 0b010000000101);
     3ce:	65 e0       	ldi	r22, 0x05	; 5
     3d0:	74 e0       	ldi	r23, 0x04	; 4
     3d2:	85 e0       	ldi	r24, 0x05	; 5
     3d4:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	while (!ADC_INTERRUPT_READY) {
     3d8:	80 91 52 01 	lds	r24, 0x0152
     3dc:	90 91 53 01 	lds	r25, 0x0153
     3e0:	89 2b       	or	r24, r25
     3e2:	d1 f3       	breq	.-12     	; 0x3d8 <ADC_read_y+0xa>
		// wait for interrupt from ADC
	}
	ADC_INTERRUPT_READY = 0;
     3e4:	10 92 53 01 	sts	0x0153, r1
     3e8:	10 92 52 01 	sts	0x0152, r1
	uint8_t y = XMEM_read(0b010000000000);
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	94 e0       	ldi	r25, 0x04	; 4
     3f0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <XMEM_read>
	//printf("read_y = %d \n\r", y);
	return y;
}
     3f4:	08 95       	ret

000003f6 <ADC_slider_left>:

uint8_t ADC_slider_left(void) {
	// Setup to read from channel 2
	XMEM_write(0b0110, 0b010000000110);
     3f6:	66 e0       	ldi	r22, 0x06	; 6
     3f8:	74 e0       	ldi	r23, 0x04	; 4
     3fa:	86 e0       	ldi	r24, 0x06	; 6
     3fc:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	while (!ADC_INTERRUPT_READY) {
     400:	80 91 52 01 	lds	r24, 0x0152
     404:	90 91 53 01 	lds	r25, 0x0153
     408:	89 2b       	or	r24, r25
     40a:	d1 f3       	breq	.-12     	; 0x400 <ADC_slider_left+0xa>
		// wait for interrupt from ADC
	}
	ADC_INTERRUPT_READY = 0;
     40c:	10 92 53 01 	sts	0x0153, r1
     410:	10 92 52 01 	sts	0x0152, r1
	return XMEM_read(0b010000000000);
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	94 e0       	ldi	r25, 0x04	; 4
     418:	0e 94 bd 06 	call	0xd7a	; 0xd7a <XMEM_read>
}
     41c:	08 95       	ret

0000041e <ADC_slider_right>:

uint8_t ADC_slider_right(void) {
	// Setup to read from channel 2
	XMEM_write(0b0111, 0b010000000111);
     41e:	67 e0       	ldi	r22, 0x07	; 7
     420:	74 e0       	ldi	r23, 0x04	; 4
     422:	87 e0       	ldi	r24, 0x07	; 7
     424:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	while (!ADC_INTERRUPT_READY) {
     428:	80 91 52 01 	lds	r24, 0x0152
     42c:	90 91 53 01 	lds	r25, 0x0153
     430:	89 2b       	or	r24, r25
     432:	d1 f3       	breq	.-12     	; 0x428 <ADC_slider_right+0xa>
		// wait for interrupt from ADC
	}
	ADC_INTERRUPT_READY = 0;
     434:	10 92 53 01 	sts	0x0153, r1
     438:	10 92 52 01 	sts	0x0152, r1
	return XMEM_read(0b010000000000);
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	94 e0       	ldi	r25, 0x04	; 4
     440:	0e 94 bd 06 	call	0xd7a	; 0xd7a <XMEM_read>
}
     444:	08 95       	ret

00000446 <joystick_pos>:
#include "controls.h"
#include "adc.h"
#include <avr/io.h>


pos_t joystick_pos(void) {
     446:	cf 93       	push	r28
	int8_t x_pos = (ADC_read_x()*100/131)-100;
     448:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read_x>
     44c:	c8 2f       	mov	r28, r24
	int8_t y_pos = (ADC_read_y()*100/131)-100;
     44e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ADC_read_y>
     452:	f8 2f       	mov	r31, r24
#include "adc.h"
#include <avr/io.h>


pos_t joystick_pos(void) {
	int8_t x_pos = (ADC_read_x()*100/131)-100;
     454:	e4 e6       	ldi	r30, 0x64	; 100
     456:	ec 9f       	mul	r30, r28
     458:	c0 01       	movw	r24, r0
     45a:	11 24       	eor	r1, r1
     45c:	23 e8       	ldi	r18, 0x83	; 131
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	b9 01       	movw	r22, r18
     462:	0e 94 0f 09 	call	0x121e	; 0x121e <__divmodhi4>
     466:	46 2f       	mov	r20, r22
	int8_t y_pos = (ADC_read_y()*100/131)-100;
     468:	ef 9f       	mul	r30, r31
     46a:	c0 01       	movw	r24, r0
     46c:	11 24       	eor	r1, r1
     46e:	b9 01       	movw	r22, r18
     470:	0e 94 0f 09 	call	0x121e	; 0x121e <__divmodhi4>
	pos_t pos = {x_pos, y_pos};
	return pos;
}
     474:	8c e9       	ldi	r24, 0x9C	; 156
     476:	84 0f       	add	r24, r20
     478:	9c e9       	ldi	r25, 0x9C	; 156
     47a:	96 0f       	add	r25, r22
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <joystick_dir>:

dir_t joystick_dir(void) {
	pos_t pos = joystick_pos();
     480:	0e 94 23 02 	call	0x446	; 0x446 <joystick_pos>
     484:	69 2f       	mov	r22, r25
     486:	98 2f       	mov	r25, r24
     488:	76 2f       	mov	r23, r22
	if (pos.x <= -10 && pos.x*pos.x > pos.y*pos.y){
     48a:	87 3f       	cpi	r24, 0xF7	; 247
     48c:	4c f4       	brge	.+18     	; 0x4a0 <joystick_dir+0x20>
     48e:	88 02       	muls	r24, r24
     490:	a0 01       	movw	r20, r0
     492:	11 24       	eor	r1, r1
     494:	66 02       	muls	r22, r22
     496:	90 01       	movw	r18, r0
     498:	11 24       	eor	r1, r1
     49a:	24 17       	cp	r18, r20
     49c:	35 07       	cpc	r19, r21
     49e:	1c f1       	brlt	.+70     	; 0x4e6 <joystick_dir+0x66>
		return LEFT;
	}
	else if (pos.x >= 10 && pos.x*pos.x > pos.y*pos.y){
     4a0:	9a 30       	cpi	r25, 0x0A	; 10
     4a2:	4c f0       	brlt	.+18     	; 0x4b6 <joystick_dir+0x36>
     4a4:	88 02       	muls	r24, r24
     4a6:	a0 01       	movw	r20, r0
     4a8:	11 24       	eor	r1, r1
     4aa:	66 02       	muls	r22, r22
     4ac:	90 01       	movw	r18, r0
     4ae:	11 24       	eor	r1, r1
     4b0:	24 17       	cp	r18, r20
     4b2:	35 07       	cpc	r19, r21
     4b4:	d4 f0       	brlt	.+52     	; 0x4ea <joystick_dir+0x6a>
		return RIGHT;
	}
	else if (pos.y <= -10 && pos.x*pos.x < pos.y*pos.y){
     4b6:	77 3f       	cpi	r23, 0xF7	; 247
     4b8:	4c f4       	brge	.+18     	; 0x4cc <joystick_dir+0x4c>
     4ba:	88 02       	muls	r24, r24
     4bc:	a0 01       	movw	r20, r0
     4be:	11 24       	eor	r1, r1
     4c0:	66 02       	muls	r22, r22
     4c2:	90 01       	movw	r18, r0
     4c4:	11 24       	eor	r1, r1
     4c6:	42 17       	cp	r20, r18
     4c8:	53 07       	cpc	r21, r19
     4ca:	8c f0       	brlt	.+34     	; 0x4ee <joystick_dir+0x6e>
		return DOWN;
	}
	else if (pos.y >= 10 && pos.x*pos.x < pos.y*pos.y){
     4cc:	7a 30       	cpi	r23, 0x0A	; 10
     4ce:	8c f0       	brlt	.+34     	; 0x4f2 <joystick_dir+0x72>
     4d0:	88 02       	muls	r24, r24
     4d2:	c0 01       	movw	r24, r0
     4d4:	11 24       	eor	r1, r1
     4d6:	66 02       	muls	r22, r22
     4d8:	90 01       	movw	r18, r0
     4da:	11 24       	eor	r1, r1
     4dc:	82 17       	cp	r24, r18
     4de:	93 07       	cpc	r25, r19
     4e0:	54 f0       	brlt	.+20     	; 0x4f6 <joystick_dir+0x76>
		return UP;
	}
	return NEUTRAL;
     4e2:	84 e0       	ldi	r24, 0x04	; 4
     4e4:	08 95       	ret
}

dir_t joystick_dir(void) {
	pos_t pos = joystick_pos();
	if (pos.x <= -10 && pos.x*pos.x > pos.y*pos.y){
		return LEFT;
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	08 95       	ret
	}
	else if (pos.x >= 10 && pos.x*pos.x > pos.y*pos.y){
		return RIGHT;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	08 95       	ret
	}
	else if (pos.y <= -10 && pos.x*pos.x < pos.y*pos.y){
		return DOWN;
     4ee:	83 e0       	ldi	r24, 0x03	; 3
     4f0:	08 95       	ret
	}
	else if (pos.y >= 10 && pos.x*pos.x < pos.y*pos.y){
		return UP;
	}
	return NEUTRAL;
     4f2:	84 e0       	ldi	r24, 0x04	; 4
     4f4:	08 95       	ret
	}
	else if (pos.y <= -10 && pos.x*pos.x < pos.y*pos.y){
		return DOWN;
	}
	else if (pos.y >= 10 && pos.x*pos.x < pos.y*pos.y){
		return UP;
     4f6:	82 e0       	ldi	r24, 0x02	; 2
	}
	return NEUTRAL;
}
     4f8:	08 95       	ret

000004fa <btn_init>:

void btn_init(void) {
	DDRB &= ~(1 << PB0);
     4fa:	b8 98       	cbi	0x17, 0	; 23
	DDRB &= ~(1 << PB1);
     4fc:	b9 98       	cbi	0x17, 1	; 23
     4fe:	08 95       	ret

00000500 <INTERRUPT_init>:

volatile int ADC_INTERRUPT_READY = 0;

void INTERRUPT_init() {
	// Enable global interrupts (set SREG register)
	sei();
     500:	78 94       	sei
	
	// Enable that a falling edge generates an interrupt request
	MCUCR |= (1 << ISC01);
     502:	85 b7       	in	r24, 0x35	; 53
     504:	82 60       	ori	r24, 0x02	; 2
     506:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     508:	85 b7       	in	r24, 0x35	; 53
     50a:	8e 7f       	andi	r24, 0xFE	; 254
     50c:	85 bf       	out	0x35, r24	; 53
	
	// Enable interrupt on INT0
	GICR |= (1 << INT0);
     50e:	8b b7       	in	r24, 0x3b	; 59
     510:	80 64       	ori	r24, 0x40	; 64
     512:	8b bf       	out	0x3b, r24	; 59
     514:	08 95       	ret

00000516 <__vector_1>:
}

// Interrupt for ADC
ISR(INT0_vect) {
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	8f 93       	push	r24
     522:	9f 93       	push	r25
	// Disable global interrupts while executing an ISR (?)
	//cli();
	ADC_INTERRUPT_READY = 1;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	90 93 53 01 	sts	0x0153, r25
     52c:	80 93 52 01 	sts	0x0152, r24
	// Reset interrupt flag
	//GIFR &= ~(1 << INTF0);
	//GIFR |= (1 << INTF0);
	//printf("routine finished\n\r");
	//sei();
}
     530:	9f 91       	pop	r25
     532:	8f 91       	pop	r24
     534:	0f 90       	pop	r0
     536:	0f be       	out	0x3f, r0	; 63
     538:	0f 90       	pop	r0
     53a:	1f 90       	pop	r1
     53c:	18 95       	reti

0000053e <MENU_print_children>:
#include <math.h>
#include <util/delay.h>

#define F_CPU 4915200

void MENU_print_children(menu_ptr item) {
     53e:	8f 92       	push	r8
     540:	9f 92       	push	r9
     542:	af 92       	push	r10
     544:	bf 92       	push	r11
     546:	cf 92       	push	r12
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	6c 01       	movw	r12, r24
	for (int i = 0; i<item->num_children; i++) {
     558:	dc 01       	movw	r26, r24
     55a:	12 96       	adiw	r26, 0x02	; 2
     55c:	8d 91       	ld	r24, X+
     55e:	9c 91       	ld	r25, X
     560:	13 97       	sbiw	r26, 0x03	; 3
     562:	18 16       	cp	r1, r24
     564:	19 06       	cpc	r1, r25
     566:	0c f0       	brlt	.+2      	; 0x56a <MENU_print_children+0x2c>
     568:	3f c0       	rjmp	.+126    	; 0x5e8 <MENU_print_children+0xaa>
     56a:	86 01       	movw	r16, r12
     56c:	e1 2c       	mov	r14, r1
     56e:	f1 2c       	mov	r15, r1
     570:	c0 e0       	ldi	r28, 0x00	; 0
     572:	d0 e0       	ldi	r29, 0x00	; 0
		if (item->selectedChild == i) {
     574:	f6 01       	movw	r30, r12
     576:	a6 88       	ldd	r10, Z+22	; 0x16
     578:	b7 88       	ldd	r11, Z+23	; 0x17
     57a:	ac 16       	cp	r10, r28
     57c:	bd 06       	cpc	r11, r29
     57e:	f1 f4       	brne	.+60     	; 0x5bc <MENU_print_children+0x7e>
			OLED_print_string("-", i*128);
     580:	45 01       	movw	r8, r10
     582:	96 94       	lsr	r9
     584:	98 2c       	mov	r9, r8
     586:	88 24       	eor	r8, r8
     588:	97 94       	ror	r9
     58a:	87 94       	ror	r8
     58c:	b4 01       	movw	r22, r8
     58e:	86 e0       	ldi	r24, 0x06	; 6
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <OLED_print_string>
			OLED_print_string(item->children[i]->name, i*128 + 8);
     596:	b4 01       	movw	r22, r8
     598:	68 5f       	subi	r22, 0xF8	; 248
     59a:	7f 4f       	sbci	r23, 0xFF	; 255
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	af 0e       	add	r10, r31
     5a0:	b1 1c       	adc	r11, r1
     5a2:	f5 01       	movw	r30, r10
     5a4:	ee 0f       	add	r30, r30
     5a6:	ff 1f       	adc	r31, r31
     5a8:	ec 0d       	add	r30, r12
     5aa:	fd 1d       	adc	r31, r13
     5ac:	01 90       	ld	r0, Z+
     5ae:	f0 81       	ld	r31, Z
     5b0:	e0 2d       	mov	r30, r0
     5b2:	80 8d       	ldd	r24, Z+24	; 0x18
     5b4:	91 8d       	ldd	r25, Z+25	; 0x19
     5b6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <OLED_print_string>
     5ba:	0a c0       	rjmp	.+20     	; 0x5d0 <MENU_print_children+0x92>
		}
		else{
			OLED_print_string(item->children[i]->name, i*128);
     5bc:	d8 01       	movw	r26, r16
     5be:	14 96       	adiw	r26, 0x04	; 4
     5c0:	ed 91       	ld	r30, X+
     5c2:	fc 91       	ld	r31, X
     5c4:	15 97       	sbiw	r26, 0x05	; 5
     5c6:	b7 01       	movw	r22, r14
     5c8:	80 8d       	ldd	r24, Z+24	; 0x18
     5ca:	91 8d       	ldd	r25, Z+25	; 0x19
     5cc:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <OLED_print_string>
#include <util/delay.h>

#define F_CPU 4915200

void MENU_print_children(menu_ptr item) {
	for (int i = 0; i<item->num_children; i++) {
     5d0:	21 96       	adiw	r28, 0x01	; 1
     5d2:	0e 5f       	subi	r16, 0xFE	; 254
     5d4:	1f 4f       	sbci	r17, 0xFF	; 255
     5d6:	b0 e8       	ldi	r27, 0x80	; 128
     5d8:	eb 0e       	add	r14, r27
     5da:	f1 1c       	adc	r15, r1
     5dc:	f6 01       	movw	r30, r12
     5de:	82 81       	ldd	r24, Z+2	; 0x02
     5e0:	93 81       	ldd	r25, Z+3	; 0x03
     5e2:	c8 17       	cp	r28, r24
     5e4:	d9 07       	cpc	r29, r25
     5e6:	34 f2       	brlt	.-116    	; 0x574 <MENU_print_children+0x36>
		}
		else{
			OLED_print_string(item->children[i]->name, i*128);
		}
	}
}
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	df 90       	pop	r13
     5f6:	cf 90       	pop	r12
     5f8:	bf 90       	pop	r11
     5fa:	af 90       	pop	r10
     5fc:	9f 90       	pop	r9
     5fe:	8f 90       	pop	r8
     600:	08 95       	ret

00000602 <MENU_navigate>:

void MENU_navigate(menu_ptr item) {
     602:	ec 01       	movw	r28, r24
	menu_ptr currentMenu = item;
	while(1){
		if (joystick_dir() != NEUTRAL) {
     604:	0e 94 40 02 	call	0x480	; 0x480 <joystick_dir>
     608:	84 30       	cpi	r24, 0x04	; 4
     60a:	09 f4       	brne	.+2      	; 0x60e <MENU_navigate+0xc>
     60c:	52 c0       	rjmp	.+164    	; 0x6b2 <MENU_navigate+0xb0>
			switch(joystick_dir()) {
     60e:	0e 94 40 02 	call	0x480	; 0x480 <joystick_dir>
     612:	81 30       	cpi	r24, 0x01	; 1
     614:	19 f1       	breq	.+70     	; 0x65c <MENU_navigate+0x5a>
     616:	08 f4       	brcc	.+2      	; 0x61a <MENU_navigate+0x18>
     618:	40 c0       	rjmp	.+128    	; 0x69a <MENU_navigate+0x98>
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	89 f0       	breq	.+34     	; 0x640 <MENU_navigate+0x3e>
     61e:	83 30       	cpi	r24, 0x03	; 3
     620:	09 f0       	breq	.+2      	; 0x624 <MENU_navigate+0x22>
     622:	43 c0       	rjmp	.+134    	; 0x6aa <MENU_navigate+0xa8>
				case DOWN:
					if (currentMenu->num_children == currentMenu->selectedChild + 1){
     624:	8e 89       	ldd	r24, Y+22	; 0x16
     626:	9f 89       	ldd	r25, Y+23	; 0x17
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	2a 81       	ldd	r18, Y+2	; 0x02
     62c:	3b 81       	ldd	r19, Y+3	; 0x03
     62e:	28 17       	cp	r18, r24
     630:	39 07       	cpc	r19, r25
     632:	19 f4       	brne	.+6      	; 0x63a <MENU_navigate+0x38>
						currentMenu->selectedChild = 0;
     634:	1f 8a       	std	Y+23, r1	; 0x17
     636:	1e 8a       	std	Y+22, r1	; 0x16
     638:	38 c0       	rjmp	.+112    	; 0x6aa <MENU_navigate+0xa8>
					}
					else{
						currentMenu->selectedChild += 1;
     63a:	9f 8b       	std	Y+23, r25	; 0x17
     63c:	8e 8b       	std	Y+22, r24	; 0x16
     63e:	35 c0       	rjmp	.+106    	; 0x6aa <MENU_navigate+0xa8>
					}
					break;
				case UP:
					if (currentMenu->selectedChild == 0){
     640:	8e 89       	ldd	r24, Y+22	; 0x16
     642:	9f 89       	ldd	r25, Y+23	; 0x17
     644:	00 97       	sbiw	r24, 0x00	; 0
     646:	31 f4       	brne	.+12     	; 0x654 <MENU_navigate+0x52>
						currentMenu->selectedChild = currentMenu->num_children - 1;
     648:	8a 81       	ldd	r24, Y+2	; 0x02
     64a:	9b 81       	ldd	r25, Y+3	; 0x03
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	9f 8b       	std	Y+23, r25	; 0x17
     650:	8e 8b       	std	Y+22, r24	; 0x16
     652:	2b c0       	rjmp	.+86     	; 0x6aa <MENU_navigate+0xa8>
					}
					else{
						currentMenu->selectedChild -= 1;
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	9f 8b       	std	Y+23, r25	; 0x17
     658:	8e 8b       	std	Y+22, r24	; 0x16
     65a:	27 c0       	rjmp	.+78     	; 0x6aa <MENU_navigate+0xa8>
					}
					break;
				case RIGHT:
					if (currentMenu->children[currentMenu->selectedChild]->num_children == 0){
     65c:	ee 89       	ldd	r30, Y+22	; 0x16
     65e:	ff 89       	ldd	r31, Y+23	; 0x17
     660:	32 96       	adiw	r30, 0x02	; 2
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	ec 0f       	add	r30, r28
     668:	fd 1f       	adc	r31, r29
     66a:	01 90       	ld	r0, Z+
     66c:	f0 81       	ld	r31, Z
     66e:	e0 2d       	mov	r30, r0
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	93 81       	ldd	r25, Z+3	; 0x03
     674:	89 2b       	or	r24, r25
     676:	b1 f4       	brne	.+44     	; 0x6a4 <MENU_navigate+0xa2>
						OLED_clearAll();
     678:	0e 94 8e 06 	call	0xd1c	; 0xd1c <OLED_clearAll>
						currentMenu->children[currentMenu->selectedChild]->fun_ptr();
     67c:	ee 89       	ldd	r30, Y+22	; 0x16
     67e:	ff 89       	ldd	r31, Y+23	; 0x17
     680:	32 96       	adiw	r30, 0x02	; 2
     682:	ee 0f       	add	r30, r30
     684:	ff 1f       	adc	r31, r31
     686:	ec 0f       	add	r30, r28
     688:	fd 1f       	adc	r31, r29
     68a:	01 90       	ld	r0, Z+
     68c:	f0 81       	ld	r31, Z
     68e:	e0 2d       	mov	r30, r0
     690:	01 90       	ld	r0, Z+
     692:	f0 81       	ld	r31, Z
     694:	e0 2d       	mov	r30, r0
     696:	09 95       	icall
     698:	08 c0       	rjmp	.+16     	; 0x6aa <MENU_navigate+0xa8>
					else{
						currentMenu = currentMenu->children[currentMenu->selectedChild];
					}
					break;
				case LEFT:
					if (currentMenu->parent != NULL){
     69a:	8c 89       	ldd	r24, Y+20	; 0x14
     69c:	9d 89       	ldd	r25, Y+21	; 0x15
     69e:	00 97       	sbiw	r24, 0x00	; 0
     6a0:	19 f4       	brne	.+6      	; 0x6a8 <MENU_navigate+0xa6>
     6a2:	03 c0       	rjmp	.+6      	; 0x6aa <MENU_navigate+0xa8>
					if (currentMenu->children[currentMenu->selectedChild]->num_children == 0){
						OLED_clearAll();
						currentMenu->children[currentMenu->selectedChild]->fun_ptr();
					}
					else{
						currentMenu = currentMenu->children[currentMenu->selectedChild];
     6a4:	ef 01       	movw	r28, r30
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <MENU_navigate+0xa8>
					}
					break;
				case LEFT:
					if (currentMenu->parent != NULL){
						currentMenu = currentMenu->parent;
     6a8:	ec 01       	movw	r28, r24
					}
					break;
			}
			while (joystick_dir() != NEUTRAL);
     6aa:	0e 94 40 02 	call	0x480	; 0x480 <joystick_dir>
     6ae:	84 30       	cpi	r24, 0x04	; 4
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <MENU_navigate+0xa8>
		}
	OLED_clearAll();
     6b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <OLED_clearAll>
	MENU_print_children(currentMenu);
     6b6:	ce 01       	movw	r24, r28
     6b8:	0e 94 9f 02 	call	0x53e	; 0x53e <MENU_print_children>
	OLED_refresh();
     6bc:	0e 94 39 06 	call	0xc72	; 0xc72 <OLED_refresh>
	}
     6c0:	a1 cf       	rjmp	.-190    	; 0x604 <MENU_navigate+0x2>

000006c2 <MENU_veryFunInvertingFunction>:
	MENU_print_children(mainMenuPtr);
}
*/

void MENU_veryFunInvertingFunction(){
	OLED_clearAll();
     6c2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <OLED_clearAll>
	OLED_refresh();
     6c6:	0e 94 39 06 	call	0xc72	; 0xc72 <OLED_refresh>
	while(1){
		if (joystick_dir() == DOWN){
     6ca:	0e 94 40 02 	call	0x480	; 0x480 <joystick_dir>
     6ce:	83 30       	cpi	r24, 0x03	; 3
     6d0:	39 f4       	brne	.+14     	; 0x6e0 <MENU_veryFunInvertingFunction+0x1e>
			XMEM_write(0xA7, 0xA7);
     6d2:	67 ea       	ldi	r22, 0xA7	; 167
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	87 ea       	ldi	r24, 0xA7	; 167
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
     6de:	f5 cf       	rjmp	.-22     	; 0x6ca <MENU_veryFunInvertingFunction+0x8>
		}
		else{
			XMEM_write(0xA6, 0xA6);
     6e0:	66 ea       	ldi	r22, 0xA6	; 166
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	86 ea       	ldi	r24, 0xA6	; 166
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
     6ec:	ee cf       	rjmp	.-36     	; 0x6ca <MENU_veryFunInvertingFunction+0x8>

000006ee <MENU_animation>:
	int y = 10;
	int x_vel = 3;
	int y_vel = 2;
	while (1) {
		x += x_vel;
		y += y_vel;
     6ee:	0c e0       	ldi	r16, 0x0C	; 12
     6f0:	10 e0       	ldi	r17, 0x00	; 0
	int x = 20;
	int y = 10;
	int x_vel = 3;
	int y_vel = 2;
	while (1) {
		x += x_vel;
     6f2:	c7 e1       	ldi	r28, 0x17	; 23
     6f4:	d0 e0       	ldi	r29, 0x00	; 0

void MENU_animation() {
	int x = 20;
	int y = 10;
	int x_vel = 3;
	int y_vel = 2;
     6f6:	68 94       	set
     6f8:	cc 24       	eor	r12, r12
     6fa:	c1 f8       	bld	r12, 1
     6fc:	d1 2c       	mov	r13, r1
}

void MENU_animation() {
	int x = 20;
	int y = 10;
	int x_vel = 3;
     6fe:	0f 2e       	mov	r0, r31
     700:	f3 e0       	ldi	r31, 0x03	; 3
     702:	ef 2e       	mov	r14, r31
     704:	f1 2c       	mov	r15, r1
     706:	f0 2d       	mov	r31, r0
     708:	03 c0       	rjmp	.+6      	; 0x710 <MENU_animation+0x22>
	int y_vel = 2;
	while (1) {
		x += x_vel;
		y += y_vel;
		if (x <= 0 || x >= 127) {
			x_vel *= -1;
     70a:	f1 94       	neg	r15
     70c:	e1 94       	neg	r14
     70e:	f1 08       	sbc	r15, r1
		}
		if (y <= 0 || y >= 63) {
     710:	c8 01       	movw	r24, r16
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	ce 97       	sbiw	r24, 0x3e	; 62
     716:	18 f0       	brcs	.+6      	; 0x71e <MENU_animation+0x30>
			y_vel *= -1;
     718:	d1 94       	neg	r13
     71a:	c1 94       	neg	r12
     71c:	d1 08       	sbc	r13, r1
		}
		OLED_set_pixel(x, y);
     71e:	b8 01       	movw	r22, r16
     720:	ce 01       	movw	r24, r28
     722:	0e 94 ff 05 	call	0xbfe	; 0xbfe <OLED_set_pixel>
		OLED_refresh();
     726:	0e 94 39 06 	call	0xc72	; 0xc72 <OLED_refresh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     72a:	83 ed       	ldi	r24, 0xD3	; 211
     72c:	90 e3       	ldi	r25, 0x30	; 48
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	f1 f7       	brne	.-4      	; 0x72e <MENU_animation+0x40>
     732:	00 c0       	rjmp	.+0      	; 0x734 <MENU_animation+0x46>
     734:	00 00       	nop
	int x = 20;
	int y = 10;
	int x_vel = 3;
	int y_vel = 2;
	while (1) {
		x += x_vel;
     736:	ce 0d       	add	r28, r14
     738:	df 1d       	adc	r29, r15
		y += y_vel;
     73a:	0c 0d       	add	r16, r12
     73c:	1d 1d       	adc	r17, r13
		if (x <= 0 || x >= 127) {
     73e:	ce 01       	movw	r24, r28
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	8e 37       	cpi	r24, 0x7E	; 126
     744:	91 05       	cpc	r25, r1
     746:	08 f7       	brcc	.-62     	; 0x70a <MENU_animation+0x1c>
     748:	e3 cf       	rjmp	.-58     	; 0x710 <MENU_animation+0x22>

0000074a <MENU_pong>:
		_delay_ms(50);
	}
}


void MENU_pong() {
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	2a 97       	sbiw	r28, 0x0a	; 10
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
	int rightPoints = 0;
	int leftPoints = 0;
	float difference = 0;
	while (1) {
		float x = 63;
		float y = 31;
     75e:	10 e0       	ldi	r17, 0x00	; 0
     760:	00 e0       	ldi	r16, 0x00	; 0
     762:	0f 2e       	mov	r0, r31
     764:	f8 ef       	ldi	r31, 0xF8	; 248
     766:	3f 2e       	mov	r3, r31
     768:	f0 2d       	mov	r31, r0
     76a:	0f 2e       	mov	r0, r31
     76c:	f1 e4       	ldi	r31, 0x41	; 65
     76e:	2f 2e       	mov	r2, r31
     770:	f0 2d       	mov	r31, r0
	float rightPaddleX = 124;
	int rightPoints = 0;
	int leftPoints = 0;
	float difference = 0;
	while (1) {
		float x = 63;
     772:	0f 2e       	mov	r0, r31
     774:	c1 2c       	mov	r12, r1
     776:	d1 2c       	mov	r13, r1
     778:	fc e7       	ldi	r31, 0x7C	; 124
     77a:	ef 2e       	mov	r14, r31
     77c:	f2 e4       	ldi	r31, 0x42	; 66
     77e:	ff 2e       	mov	r15, r31
     780:	f0 2d       	mov	r31, r0
		float y = 31;
		x_vel = 1;
		y_vel = 0;
     782:	1d 82       	std	Y+5, r1	; 0x05
     784:	1e 82       	std	Y+6, r1	; 0x06
     786:	1f 82       	std	Y+7, r1	; 0x07
     788:	18 86       	std	Y+8, r1	; 0x08
	int leftPoints = 0;
	float difference = 0;
	while (1) {
		float x = 63;
		float y = 31;
		x_vel = 1;
     78a:	19 82       	std	Y+1, r1	; 0x01
     78c:	1a 82       	std	Y+2, r1	; 0x02
     78e:	20 e8       	ldi	r18, 0x80	; 128
     790:	2b 83       	std	Y+3, r18	; 0x03
     792:	3f e3       	ldi	r19, 0x3F	; 63
     794:	3c 83       	std	Y+4, r19	; 0x04
     796:	39 c0       	rjmp	.+114    	; 0x80a <MENU_pong+0xc0>
	int rightPoints = 0;
	int leftPoints = 0;
	float difference = 0;
	while (1) {
		float x = 63;
		float y = 31;
     798:	10 e0       	ldi	r17, 0x00	; 0
     79a:	00 e0       	ldi	r16, 0x00	; 0
     79c:	0f 2e       	mov	r0, r31
     79e:	f8 ef       	ldi	r31, 0xF8	; 248
     7a0:	3f 2e       	mov	r3, r31
     7a2:	f0 2d       	mov	r31, r0
     7a4:	0f 2e       	mov	r0, r31
     7a6:	f1 e4       	ldi	r31, 0x41	; 65
     7a8:	2f 2e       	mov	r2, r31
     7aa:	f0 2d       	mov	r31, r0
	float rightPaddleX = 124;
	int rightPoints = 0;
	int leftPoints = 0;
	float difference = 0;
	while (1) {
		float x = 63;
     7ac:	0f 2e       	mov	r0, r31
     7ae:	c1 2c       	mov	r12, r1
     7b0:	d1 2c       	mov	r13, r1
     7b2:	fc e7       	ldi	r31, 0x7C	; 124
     7b4:	ef 2e       	mov	r14, r31
     7b6:	f2 e4       	ldi	r31, 0x42	; 66
     7b8:	ff 2e       	mov	r15, r31
     7ba:	f0 2d       	mov	r31, r0
		float y = 31;
		x_vel = 1;
		y_vel = 0;
     7bc:	1d 82       	std	Y+5, r1	; 0x05
     7be:	1e 82       	std	Y+6, r1	; 0x06
     7c0:	1f 82       	std	Y+7, r1	; 0x07
     7c2:	18 86       	std	Y+8, r1	; 0x08
	int leftPoints = 0;
	float difference = 0;
	while (1) {
		float x = 63;
		float y = 31;
		x_vel = 1;
     7c4:	19 82       	std	Y+1, r1	; 0x01
     7c6:	1a 82       	std	Y+2, r1	; 0x02
     7c8:	80 e8       	ldi	r24, 0x80	; 128
     7ca:	8b 83       	std	Y+3, r24	; 0x03
     7cc:	9f e3       	ldi	r25, 0x3F	; 63
     7ce:	9c 83       	std	Y+4, r25	; 0x04
     7d0:	1c c0       	rjmp	.+56     	; 0x80a <MENU_pong+0xc0>
	int rightPoints = 0;
	int leftPoints = 0;
	float difference = 0;
	while (1) {
		float x = 63;
		float y = 31;
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	00 e0       	ldi	r16, 0x00	; 0
     7d6:	0f 2e       	mov	r0, r31
     7d8:	f8 ef       	ldi	r31, 0xF8	; 248
     7da:	3f 2e       	mov	r3, r31
     7dc:	f0 2d       	mov	r31, r0
     7de:	0f 2e       	mov	r0, r31
     7e0:	f1 e4       	ldi	r31, 0x41	; 65
     7e2:	2f 2e       	mov	r2, r31
     7e4:	f0 2d       	mov	r31, r0
	float rightPaddleX = 124;
	int rightPoints = 0;
	int leftPoints = 0;
	float difference = 0;
	while (1) {
		float x = 63;
     7e6:	0f 2e       	mov	r0, r31
     7e8:	c1 2c       	mov	r12, r1
     7ea:	d1 2c       	mov	r13, r1
     7ec:	fc e7       	ldi	r31, 0x7C	; 124
     7ee:	ef 2e       	mov	r14, r31
     7f0:	f2 e4       	ldi	r31, 0x42	; 66
     7f2:	ff 2e       	mov	r15, r31
     7f4:	f0 2d       	mov	r31, r0
		float y = 31;
		x_vel = 1;
		y_vel = 0;
     7f6:	1d 82       	std	Y+5, r1	; 0x05
     7f8:	1e 82       	std	Y+6, r1	; 0x06
     7fa:	1f 82       	std	Y+7, r1	; 0x07
     7fc:	18 86       	std	Y+8, r1	; 0x08
	int leftPoints = 0;
	float difference = 0;
	while (1) {
		float x = 63;
		float y = 31;
		x_vel = 1;
     7fe:	19 82       	std	Y+1, r1	; 0x01
     800:	1a 82       	std	Y+2, r1	; 0x02
     802:	a0 e8       	ldi	r26, 0x80	; 128
     804:	ab 83       	std	Y+3, r26	; 0x03
     806:	bf e3       	ldi	r27, 0x3F	; 63
     808:	bc 83       	std	Y+4, r27	; 0x04
		y_vel = 0;
		while (1){
			rightPaddleY = (ADC_slider_right())/4.0;
     80a:	0e 94 0f 02 	call	0x41e	; 0x41e <ADC_slider_right>
     80e:	a8 2e       	mov	r10, r24
			leftPaddleY = (ADC_slider_left())/4.0;
     810:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ADC_slider_left>
     814:	b8 2e       	mov	r11, r24
			x += x_vel;
     816:	29 81       	ldd	r18, Y+1	; 0x01
     818:	3a 81       	ldd	r19, Y+2	; 0x02
     81a:	4b 81       	ldd	r20, Y+3	; 0x03
     81c:	5c 81       	ldd	r21, Y+4	; 0x04
     81e:	c7 01       	movw	r24, r14
     820:	b6 01       	movw	r22, r12
     822:	0e 94 5d 07 	call	0xeba	; 0xeba <__addsf3>
     826:	6b 01       	movw	r12, r22
     828:	7c 01       	movw	r14, r24
			y += y_vel;
			if (x <= 0) {
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	a9 01       	movw	r20, r18
     830:	0e 94 c1 07 	call	0xf82	; 0xf82 <__cmpsf2>
     834:	18 16       	cp	r1, r24
     836:	0c f0       	brlt	.+2      	; 0x83a <MENU_pong+0xf0>
     838:	af cf       	rjmp	.-162    	; 0x798 <MENU_pong+0x4e>
				leftPoints += 1;
				break;
			}
			else if (x >= 127) {
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	4e ef       	ldi	r20, 0xFE	; 254
     840:	52 e4       	ldi	r21, 0x42	; 66
     842:	c7 01       	movw	r24, r14
     844:	b6 01       	movw	r22, r12
     846:	0e 94 a8 08 	call	0x1150	; 0x1150 <__gesf2>
     84a:	88 23       	and	r24, r24
     84c:	14 f6       	brge	.-124    	; 0x7d2 <MENU_pong+0x88>
		float x = 63;
		float y = 31;
		x_vel = 1;
		y_vel = 0;
		while (1){
			rightPaddleY = (ADC_slider_right())/4.0;
     84e:	6a 2d       	mov	r22, r10
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 f8 07 	call	0xff0	; 0xff0 <__floatsisf>
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e8       	ldi	r20, 0x80	; 128
     860:	5e e3       	ldi	r21, 0x3E	; 62
     862:	0e 94 ac 08 	call	0x1158	; 0x1158 <__mulsf3>
     866:	2b 01       	movw	r4, r22
     868:	3c 01       	movw	r6, r24
			leftPaddleY = (ADC_slider_left())/4.0;
     86a:	6b 2d       	mov	r22, r11
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 f8 07 	call	0xff0	; 0xff0 <__floatsisf>
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e8       	ldi	r20, 0x80	; 128
     87c:	5e e3       	ldi	r21, 0x3E	; 62
     87e:	0e 94 ac 08 	call	0x1158	; 0x1158 <__mulsf3>
     882:	4b 01       	movw	r8, r22
     884:	5c 01       	movw	r10, r24
			x += x_vel;
			y += y_vel;
     886:	2d 81       	ldd	r18, Y+5	; 0x05
     888:	3e 81       	ldd	r19, Y+6	; 0x06
     88a:	4f 81       	ldd	r20, Y+7	; 0x07
     88c:	58 85       	ldd	r21, Y+8	; 0x08
     88e:	61 2f       	mov	r22, r17
     890:	70 2f       	mov	r23, r16
     892:	83 2d       	mov	r24, r3
     894:	92 2d       	mov	r25, r2
     896:	0e 94 5d 07 	call	0xeba	; 0xeba <__addsf3>
     89a:	16 2f       	mov	r17, r22
     89c:	07 2f       	mov	r16, r23
     89e:	38 2e       	mov	r3, r24
     8a0:	29 2e       	mov	r2, r25
			}
			else if (x >= 127) {
				rightPoints += 1;
				break;
			}
			else if (x == leftPaddleX + 1 && y <= leftPaddleY + 4 && y >= leftPaddleY - 4){
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e8       	ldi	r20, 0x80	; 128
     8a8:	50 e4       	ldi	r21, 0x40	; 64
     8aa:	c7 01       	movw	r24, r14
     8ac:	b6 01       	movw	r22, r12
     8ae:	0e 94 c1 07 	call	0xf82	; 0xf82 <__cmpsf2>
     8b2:	81 11       	cpse	r24, r1
     8b4:	3e c0       	rjmp	.+124    	; 0x932 <MENU_pong+0x1e8>
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	40 e8       	ldi	r20, 0x80	; 128
     8bc:	50 e4       	ldi	r21, 0x40	; 64
     8be:	c5 01       	movw	r24, r10
     8c0:	b4 01       	movw	r22, r8
     8c2:	0e 94 5d 07 	call	0xeba	; 0xeba <__addsf3>
     8c6:	9b 01       	movw	r18, r22
     8c8:	ac 01       	movw	r20, r24
     8ca:	61 2f       	mov	r22, r17
     8cc:	70 2f       	mov	r23, r16
     8ce:	83 2d       	mov	r24, r3
     8d0:	92 2d       	mov	r25, r2
     8d2:	0e 94 c1 07 	call	0xf82	; 0xf82 <__cmpsf2>
     8d6:	18 16       	cp	r1, r24
     8d8:	0c f4       	brge	.+2      	; 0x8dc <MENU_pong+0x192>
     8da:	70 c0       	rjmp	.+224    	; 0x9bc <MENU_pong+0x272>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e8       	ldi	r20, 0x80	; 128
     8e2:	50 e4       	ldi	r21, 0x40	; 64
     8e4:	c5 01       	movw	r24, r10
     8e6:	b4 01       	movw	r22, r8
     8e8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__subsf3>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	61 2f       	mov	r22, r17
     8f2:	70 2f       	mov	r23, r16
     8f4:	83 2d       	mov	r24, r3
     8f6:	92 2d       	mov	r25, r2
     8f8:	0e 94 a8 08 	call	0x1150	; 0x1150 <__gesf2>
     8fc:	88 23       	and	r24, r24
     8fe:	0c f4       	brge	.+2      	; 0x902 <MENU_pong+0x1b8>
     900:	5d c0       	rjmp	.+186    	; 0x9bc <MENU_pong+0x272>
				difference = y - leftPaddleY;
     902:	a5 01       	movw	r20, r10
     904:	94 01       	movw	r18, r8
     906:	61 2f       	mov	r22, r17
     908:	70 2f       	mov	r23, r16
     90a:	83 2d       	mov	r24, r3
     90c:	92 2d       	mov	r25, r2
     90e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__subsf3>
				y_vel = difference / 8.0;
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	5e e3       	ldi	r21, 0x3E	; 62
     91a:	0e 94 ac 08 	call	0x1158	; 0x1158 <__mulsf3>
     91e:	6d 83       	std	Y+5, r22	; 0x05
     920:	7e 83       	std	Y+6, r23	; 0x06
     922:	8f 83       	std	Y+7, r24	; 0x07
     924:	98 87       	std	Y+8, r25	; 0x08
				x_vel = 0.5;
     926:	19 82       	std	Y+1, r1	; 0x01
     928:	1a 82       	std	Y+2, r1	; 0x02
     92a:	1b 82       	std	Y+3, r1	; 0x03
     92c:	ef e3       	ldi	r30, 0x3F	; 63
     92e:	ec 83       	std	Y+4, r30	; 0x04
     930:	45 c0       	rjmp	.+138    	; 0x9bc <MENU_pong+0x272>
			}
			else if (x == rightPaddleX - 1 && y <= rightPaddleY + 4 && y >= rightPaddleY - 4){
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	46 ef       	ldi	r20, 0xF6	; 246
     938:	52 e4       	ldi	r21, 0x42	; 66
     93a:	c7 01       	movw	r24, r14
     93c:	b6 01       	movw	r22, r12
     93e:	0e 94 c1 07 	call	0xf82	; 0xf82 <__cmpsf2>
     942:	81 11       	cpse	r24, r1
     944:	3b c0       	rjmp	.+118    	; 0x9bc <MENU_pong+0x272>
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	40 e8       	ldi	r20, 0x80	; 128
     94c:	50 e4       	ldi	r21, 0x40	; 64
     94e:	c3 01       	movw	r24, r6
     950:	b2 01       	movw	r22, r4
     952:	0e 94 5d 07 	call	0xeba	; 0xeba <__addsf3>
     956:	9b 01       	movw	r18, r22
     958:	ac 01       	movw	r20, r24
     95a:	61 2f       	mov	r22, r17
     95c:	70 2f       	mov	r23, r16
     95e:	83 2d       	mov	r24, r3
     960:	92 2d       	mov	r25, r2
     962:	0e 94 c1 07 	call	0xf82	; 0xf82 <__cmpsf2>
     966:	18 16       	cp	r1, r24
     968:	4c f1       	brlt	.+82     	; 0x9bc <MENU_pong+0x272>
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e8       	ldi	r20, 0x80	; 128
     970:	50 e4       	ldi	r21, 0x40	; 64
     972:	c3 01       	movw	r24, r6
     974:	b2 01       	movw	r22, r4
     976:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__subsf3>
     97a:	9b 01       	movw	r18, r22
     97c:	ac 01       	movw	r20, r24
     97e:	61 2f       	mov	r22, r17
     980:	70 2f       	mov	r23, r16
     982:	83 2d       	mov	r24, r3
     984:	92 2d       	mov	r25, r2
     986:	0e 94 a8 08 	call	0x1150	; 0x1150 <__gesf2>
     98a:	88 23       	and	r24, r24
     98c:	bc f0       	brlt	.+46     	; 0x9bc <MENU_pong+0x272>
				difference = y - rightPaddleY;
     98e:	a3 01       	movw	r20, r6
     990:	92 01       	movw	r18, r4
     992:	61 2f       	mov	r22, r17
     994:	70 2f       	mov	r23, r16
     996:	83 2d       	mov	r24, r3
     998:	92 2d       	mov	r25, r2
     99a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__subsf3>
				y_vel = difference / 8.0;
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	5e e3       	ldi	r21, 0x3E	; 62
     9a6:	0e 94 ac 08 	call	0x1158	; 0x1158 <__mulsf3>
     9aa:	6d 83       	std	Y+5, r22	; 0x05
     9ac:	7e 83       	std	Y+6, r23	; 0x06
     9ae:	8f 83       	std	Y+7, r24	; 0x07
     9b0:	98 87       	std	Y+8, r25	; 0x08
				x_vel = -0.5;
     9b2:	19 82       	std	Y+1, r1	; 0x01
     9b4:	1a 82       	std	Y+2, r1	; 0x02
     9b6:	1b 82       	std	Y+3, r1	; 0x03
     9b8:	ff eb       	ldi	r31, 0xBF	; 191
     9ba:	fc 83       	std	Y+4, r31	; 0x04
			}
			if (y <= 0 || y >= 63) {
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	a9 01       	movw	r20, r18
     9c2:	61 2f       	mov	r22, r17
     9c4:	70 2f       	mov	r23, r16
     9c6:	83 2d       	mov	r24, r3
     9c8:	92 2d       	mov	r25, r2
     9ca:	0e 94 c1 07 	call	0xf82	; 0xf82 <__cmpsf2>
     9ce:	18 16       	cp	r1, r24
     9d0:	64 f4       	brge	.+24     	; 0x9ea <MENU_pong+0x2a0>
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	4c e7       	ldi	r20, 0x7C	; 124
     9d8:	52 e4       	ldi	r21, 0x42	; 66
     9da:	61 2f       	mov	r22, r17
     9dc:	70 2f       	mov	r23, r16
     9de:	83 2d       	mov	r24, r3
     9e0:	92 2d       	mov	r25, r2
     9e2:	0e 94 a8 08 	call	0x1150	; 0x1150 <__gesf2>
     9e6:	88 23       	and	r24, r24
     9e8:	4c f0       	brlt	.+18     	; 0x9fc <MENU_pong+0x2b2>
				y_vel = -y_vel;
     9ea:	8d 81       	ldd	r24, Y+5	; 0x05
     9ec:	9e 81       	ldd	r25, Y+6	; 0x06
     9ee:	af 81       	ldd	r26, Y+7	; 0x07
     9f0:	b8 85       	ldd	r27, Y+8	; 0x08
     9f2:	b0 58       	subi	r27, 0x80	; 128
     9f4:	8d 83       	std	Y+5, r24	; 0x05
     9f6:	9e 83       	std	Y+6, r25	; 0x06
     9f8:	af 83       	std	Y+7, r26	; 0x07
     9fa:	b8 87       	std	Y+8, r27	; 0x08
			}
			OLED_clearAll();
     9fc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <OLED_clearAll>
			for (int i = -4; i < 5; i++){
     a00:	9c ef       	ldi	r25, 0xFC	; 252
     a02:	99 87       	std	Y+9, r25	; 0x09
     a04:	af ef       	ldi	r26, 0xFF	; 255
     a06:	aa 87       	std	Y+10, r26	; 0x0a
				OLED_set_pixel((int)leftPaddleX, (int)leftPaddleY + i);
     a08:	c5 01       	movw	r24, r10
     a0a:	b4 01       	movw	r22, r8
     a0c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixsfsi>
     a10:	29 85       	ldd	r18, Y+9	; 0x09
     a12:	3a 85       	ldd	r19, Y+10	; 0x0a
     a14:	62 0f       	add	r22, r18
     a16:	73 1f       	adc	r23, r19
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 ff 05 	call	0xbfe	; 0xbfe <OLED_set_pixel>
				OLED_set_pixel((int)rightPaddleX, (int)rightPaddleY + i);
     a20:	c3 01       	movw	r24, r6
     a22:	b2 01       	movw	r22, r4
     a24:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixsfsi>
     a28:	a9 85       	ldd	r26, Y+9	; 0x09
     a2a:	ba 85       	ldd	r27, Y+10	; 0x0a
     a2c:	6a 0f       	add	r22, r26
     a2e:	7b 1f       	adc	r23, r27
     a30:	8c e7       	ldi	r24, 0x7C	; 124
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 ff 05 	call	0xbfe	; 0xbfe <OLED_set_pixel>
			}
			if (y <= 0 || y >= 63) {
				y_vel = -y_vel;
			}
			OLED_clearAll();
			for (int i = -4; i < 5; i++){
     a38:	e9 85       	ldd	r30, Y+9	; 0x09
     a3a:	fa 85       	ldd	r31, Y+10	; 0x0a
     a3c:	31 96       	adiw	r30, 0x01	; 1
     a3e:	fa 87       	std	Y+10, r31	; 0x0a
     a40:	e9 87       	std	Y+9, r30	; 0x09
     a42:	35 97       	sbiw	r30, 0x05	; 5
     a44:	09 f7       	brne	.-62     	; 0xa08 <MENU_pong+0x2be>
				OLED_set_pixel((int)leftPaddleX, (int)leftPaddleY + i);
				OLED_set_pixel((int)rightPaddleX, (int)rightPaddleY + i);
			}
			OLED_set_pixel((int)x, (int)y);
     a46:	61 2f       	mov	r22, r17
     a48:	70 2f       	mov	r23, r16
     a4a:	83 2d       	mov	r24, r3
     a4c:	92 2d       	mov	r25, r2
     a4e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixsfsi>
     a52:	4b 01       	movw	r8, r22
     a54:	5c 01       	movw	r10, r24
     a56:	c7 01       	movw	r24, r14
     a58:	b6 01       	movw	r22, r12
     a5a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fixsfsi>
     a5e:	dc 01       	movw	r26, r24
     a60:	cb 01       	movw	r24, r22
     a62:	b4 01       	movw	r22, r8
     a64:	0e 94 ff 05 	call	0xbfe	; 0xbfe <OLED_set_pixel>
			OLED_refresh();
     a68:	0e 94 39 06 	call	0xc72	; 0xc72 <OLED_refresh>
     a6c:	83 ef       	ldi	r24, 0xF3	; 243
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	f1 f7       	brne	.-4      	; 0xa70 <MENU_pong+0x326>
     a74:	00 c0       	rjmp	.+0      	; 0xa76 <MENU_pong+0x32c>
     a76:	00 00       	nop
     a78:	c8 ce       	rjmp	.-624    	; 0x80a <MENU_pong+0xc0>

00000a7a <OLED_init>:
#include "fonts.h"
#include <avr/io.h>


void OLED_init(void) {
	XMEM_write(0xAE, 0xAE); // display off
     a7a:	6e ea       	ldi	r22, 0xAE	; 174
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	8e ea       	ldi	r24, 0xAE	; 174
     a80:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0xA1, 0xA1); // segment remap
     a84:	61 ea       	ldi	r22, 0xA1	; 161
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	81 ea       	ldi	r24, 0xA1	; 161
     a8a:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0xDA, 0xDA); // common pads hardware: alternative
     a8e:	6a ed       	ldi	r22, 0xDA	; 218
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	8a ed       	ldi	r24, 0xDA	; 218
     a94:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0x12, 0x12);
     a98:	62 e1       	ldi	r22, 0x12	; 18
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	82 e1       	ldi	r24, 0x12	; 18
     a9e:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0xC8, 0xC8); // common output scan direction:com63-com0
     aa2:	68 ec       	ldi	r22, 0xC8	; 200
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	88 ec       	ldi	r24, 0xC8	; 200
     aa8:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0xA8, 0xA8); //multiplex ratio mode:63 
     aac:	68 ea       	ldi	r22, 0xA8	; 168
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	88 ea       	ldi	r24, 0xA8	; 168
     ab2:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0x3F, 0x3F); 
     ab6:	6f e3       	ldi	r22, 0x3F	; 63
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	8f e3       	ldi	r24, 0x3F	; 63
     abc:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0xD5, 0xD5); // display divide ratio/osc. freq. mode
     ac0:	65 ed       	ldi	r22, 0xD5	; 213
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	85 ed       	ldi	r24, 0xD5	; 213
     ac6:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0x80, 0x80);
     aca:	60 e8       	ldi	r22, 0x80	; 128
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	80 e8       	ldi	r24, 0x80	; 128
     ad0:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0x81, 0x81); // contrast control
     ad4:	61 e8       	ldi	r22, 0x81	; 129
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e8       	ldi	r24, 0x81	; 129
     ada:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0x50, 0x50);
     ade:	60 e5       	ldi	r22, 0x50	; 80
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	80 e5       	ldi	r24, 0x50	; 80
     ae4:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0xD9, 0xD9); // set pre-charge period
     ae8:	69 ed       	ldi	r22, 0xD9	; 217
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	89 ed       	ldi	r24, 0xD9	; 217
     aee:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0x21, 0x21); 
     af2:	61 e2       	ldi	r22, 0x21	; 33
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	81 e2       	ldi	r24, 0x21	; 33
     af8:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0x20, 0x20); // set page addressing mode
     afc:	60 e2       	ldi	r22, 0x20	; 32
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	80 e2       	ldi	r24, 0x20	; 32
     b02:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0x02, 0x02); 
     b06:	62 e0       	ldi	r22, 0x02	; 2
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0xDB, 0xDB); // VCOM deselect level mode
     b10:	6b ed       	ldi	r22, 0xDB	; 219
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	8b ed       	ldi	r24, 0xDB	; 219
     b16:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0x30, 0x30);
     b1a:	60 e3       	ldi	r22, 0x30	; 48
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	80 e3       	ldi	r24, 0x30	; 48
     b20:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0xAD, 0xAD); // master config
     b24:	6d ea       	ldi	r22, 0xAD	; 173
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	8d ea       	ldi	r24, 0xAD	; 173
     b2a:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0x00, 0x00);
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0xA4, 0xA4); // out follows RAM content
     b38:	64 ea       	ldi	r22, 0xA4	; 164
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	84 ea       	ldi	r24, 0xA4	; 164
     b3e:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0xA6, 0xA6); // set normal display
     b42:	66 ea       	ldi	r22, 0xA6	; 166
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	86 ea       	ldi	r24, 0xA6	; 166
     b48:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0xD3, 0xD3);
     b4c:	63 ed       	ldi	r22, 0xD3	; 211
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	83 ed       	ldi	r24, 0xD3	; 211
     b52:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0x00, 0x00);
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	XMEM_write(0xAF, 0xAF); // display on
     b60:	6f ea       	ldi	r22, 0xAF	; 175
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	8f ea       	ldi	r24, 0xAF	; 175
     b66:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
     b6a:	08 95       	ret

00000b6c <OLED_print_char>:
	}
}



void OLED_print_char(char c, int offset) {
     b6c:	ef 92       	push	r14
     b6e:	ff 92       	push	r15
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	eb 01       	movw	r28, r22
     b7a:	d8 5f       	subi	r29, 0xF8	; 248
	c -= 32; // ASCII offset 
     b7c:	80 52       	subi	r24, 0x20	; 32
     b7e:	e8 2e       	mov	r14, r24
     b80:	f1 2c       	mov	r15, r1
     b82:	ee 0c       	add	r14, r14
     b84:	ff 1c       	adc	r15, r15
     b86:	ee 0c       	add	r14, r14
     b88:	ff 1c       	adc	r15, r15
     b8a:	ee 0c       	add	r14, r14
     b8c:	ff 1c       	adc	r15, r15
     b8e:	c7 01       	movw	r24, r14
     b90:	86 1b       	sub	r24, r22
     b92:	97 0b       	sbc	r25, r23
	for (int row = 0; row < 8; row++) {
     b94:	00 e0       	ldi	r16, 0x00	; 0
     b96:	10 e0       	ldi	r17, 0x00	; 0
     b98:	9c 01       	movw	r18, r24
     b9a:	20 59       	subi	r18, 0x90	; 144
     b9c:	37 40       	sbci	r19, 0x07	; 7
     b9e:	79 01       	movw	r14, r18
     ba0:	f7 01       	movw	r30, r14
     ba2:	ec 0f       	add	r30, r28
     ba4:	fd 1f       	adc	r31, r29
		//printf("\n\r%X0", pgm_read_byte(&font8[c][row]));
		XMEM_write(pgm_read_byte(&font8[c][row]), 0x800 + row + offset);
     ba6:	84 91       	lpm	r24, Z
     ba8:	be 01       	movw	r22, r28
     baa:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>



void OLED_print_char(char c, int offset) {
	c -= 32; // ASCII offset 
	for (int row = 0; row < 8; row++) {
     bae:	0f 5f       	subi	r16, 0xFF	; 255
     bb0:	1f 4f       	sbci	r17, 0xFF	; 255
     bb2:	21 96       	adiw	r28, 0x01	; 1
     bb4:	08 30       	cpi	r16, 0x08	; 8
     bb6:	11 05       	cpc	r17, r1
     bb8:	99 f7       	brne	.-26     	; 0xba0 <OLED_print_char+0x34>
		//printf("\n\r%X0", pgm_read_byte(&font8[c][row]));
		XMEM_write(pgm_read_byte(&font8[c][row]), 0x800 + row + offset);
	}
}
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	ff 90       	pop	r15
     bc4:	ef 90       	pop	r14
     bc6:	08 95       	ret

00000bc8 <OLED_print_string>:

void OLED_print_string(char *c, int offset) {
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	fc 01       	movw	r30, r24
	int i = 0;
	while (c[i] != '\0') {
     bd2:	80 81       	ld	r24, Z
     bd4:	88 23       	and	r24, r24
     bd6:	71 f0       	breq	.+28     	; 0xbf4 <OLED_print_string+0x2c>
     bd8:	c6 2f       	mov	r28, r22
     bda:	d7 2f       	mov	r29, r23
     bdc:	8f 01       	movw	r16, r30
     bde:	0f 5f       	subi	r16, 0xFF	; 255
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
		OLED_print_char(c[i], i*8 + offset);
     be2:	be 01       	movw	r22, r28
     be4:	0e 94 b6 05 	call	0xb6c	; 0xb6c <OLED_print_char>
	}
}

void OLED_print_string(char *c, int offset) {
	int i = 0;
	while (c[i] != '\0') {
     be8:	f8 01       	movw	r30, r16
     bea:	81 91       	ld	r24, Z+
     bec:	8f 01       	movw	r16, r30
     bee:	28 96       	adiw	r28, 0x08	; 8
     bf0:	81 11       	cpse	r24, r1
     bf2:	f7 cf       	rjmp	.-18     	; 0xbe2 <OLED_print_string+0x1a>
		OLED_print_char(c[i], i*8 + offset);
		i++;
	}
}
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	08 95       	ret

00000bfe <OLED_set_pixel>:

void OLED_set_pixel(int x, int y){
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
	if (x < 128 && x >= 0 && y < 64 && y >= 0){
     c06:	80 38       	cpi	r24, 0x80	; 128
     c08:	91 05       	cpc	r25, r1
     c0a:	70 f5       	brcc	.+92     	; 0xc68 <OLED_set_pixel+0x6a>
     c0c:	60 34       	cpi	r22, 0x40	; 64
     c0e:	71 05       	cpc	r23, r1
     c10:	58 f5       	brcc	.+86     	; 0xc68 <OLED_set_pixel+0x6a>
		int page = y/8;
     c12:	eb 01       	movw	r28, r22
     c14:	77 23       	and	r23, r23
     c16:	0c f4       	brge	.+2      	; 0xc1a <OLED_set_pixel+0x1c>
     c18:	27 96       	adiw	r28, 0x07	; 7
     c1a:	d5 95       	asr	r29
     c1c:	c7 95       	ror	r28
     c1e:	d5 95       	asr	r29
     c20:	c7 95       	ror	r28
     c22:	d5 95       	asr	r29
     c24:	c7 95       	ror	r28
		int height = y - page*8;
     c26:	9e 01       	movw	r18, r28
     c28:	22 0f       	add	r18, r18
     c2a:	33 1f       	adc	r19, r19
     c2c:	22 0f       	add	r18, r18
     c2e:	33 1f       	adc	r19, r19
     c30:	22 0f       	add	r18, r18
     c32:	33 1f       	adc	r19, r19
     c34:	8b 01       	movw	r16, r22
     c36:	02 1b       	sub	r16, r18
     c38:	13 0b       	sbc	r17, r19
		uint16_t index = 0x800 + page*128 + x;
     c3a:	60 96       	adiw	r28, 0x10	; 16
     c3c:	d6 95       	lsr	r29
     c3e:	dc 2f       	mov	r29, r28
     c40:	cc 27       	eor	r28, r28
     c42:	d7 95       	ror	r29
     c44:	c7 95       	ror	r28
     c46:	c8 0f       	add	r28, r24
     c48:	d9 1f       	adc	r29, r25
		uint8_t value = XMEM_read(index);
     c4a:	ce 01       	movw	r24, r28
     c4c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <XMEM_read>
		value |= (1 << height);
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	9b 01       	movw	r18, r22
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <OLED_set_pixel+0x5e>
     c58:	22 0f       	add	r18, r18
     c5a:	33 1f       	adc	r19, r19
     c5c:	0a 95       	dec	r16
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <OLED_set_pixel+0x5a>
		XMEM_write(value, index);
     c60:	be 01       	movw	r22, r28
     c62:	82 2b       	or	r24, r18
     c64:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	}
}
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	08 95       	ret

00000c72 <OLED_refresh>:
	XMEM_write(value, index);
	}
}


void OLED_refresh(void){
     c72:	af 92       	push	r10
     c74:	bf 92       	push	r11
     c76:	cf 92       	push	r12
     c78:	df 92       	push	r13
     c7a:	ef 92       	push	r14
     c7c:	ff 92       	push	r15
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	e1 2c       	mov	r14, r1
     c88:	68 94       	set
     c8a:	ff 24       	eor	r15, r15
     c8c:	f3 f8       	bld	r15, 3
     c8e:	0f 2e       	mov	r0, r31
     c90:	f0 eb       	ldi	r31, 0xB0	; 176
     c92:	cf 2e       	mov	r12, r31
     c94:	d1 2c       	mov	r13, r1
     c96:	f0 2d       	mov	r31, r0
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
		for (int column = 0; column < 128; column++){
     c98:	a1 2c       	mov	r10, r1
     c9a:	b1 2c       	mov	r11, r1
}


void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
     c9c:	b6 01       	movw	r22, r12
     c9e:	8c 2d       	mov	r24, r12
     ca0:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
		for (int column = 0; column < 128; column++){
     ca4:	ca 2d       	mov	r28, r10
     ca6:	db 2d       	mov	r29, r11
			uint8_t lowerCol = column & 0x0F;
     ca8:	8c 2f       	mov	r24, r28
     caa:	8f 70       	andi	r24, 0x0F	; 15
			uint8_t upperCol = column >> 4;
     cac:	8e 01       	movw	r16, r28
     cae:	15 95       	asr	r17
     cb0:	07 95       	ror	r16
     cb2:	15 95       	asr	r17
     cb4:	07 95       	ror	r16
     cb6:	15 95       	asr	r17
     cb8:	07 95       	ror	r16
     cba:	15 95       	asr	r17
     cbc:	07 95       	ror	r16
			
			XMEM_write(lowerCol, lowerCol);		// Set lower column start address
     cbe:	68 2f       	mov	r22, r24
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
			XMEM_write(0x10 + upperCol, 0x10 + upperCol);  // Set data register
     cc6:	b8 01       	movw	r22, r16
     cc8:	77 27       	eor	r23, r23
     cca:	60 5f       	subi	r22, 0xF0	; 240
     ccc:	7f 4f       	sbci	r23, 0xFF	; 255
     cce:	80 e1       	ldi	r24, 0x10	; 16
     cd0:	80 0f       	add	r24, r16
     cd2:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
			uint8_t SRAMvalue = XMEM_read(0x800 + page*128 + column);
     cd6:	ce 01       	movw	r24, r28
     cd8:	8e 0d       	add	r24, r14
     cda:	9f 1d       	adc	r25, r15
     cdc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <XMEM_read>
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	7e 5f       	subi	r23, 0xFE	; 254
     ce6:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>


void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
		for (int column = 0; column < 128; column++){
     cea:	21 96       	adiw	r28, 0x01	; 1
     cec:	c0 38       	cpi	r28, 0x80	; 128
     cee:	d1 05       	cpc	r29, r1
     cf0:	d9 f6       	brne	.-74     	; 0xca8 <OLED_refresh+0x36>
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	c8 1a       	sub	r12, r24
     cf6:	d8 0a       	sbc	r13, r24
     cf8:	80 e8       	ldi	r24, 0x80	; 128
     cfa:	e8 0e       	add	r14, r24
     cfc:	f1 1c       	adc	r15, r1
	}
}


void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
     cfe:	88 eb       	ldi	r24, 0xB8	; 184
     d00:	c8 16       	cp	r12, r24
     d02:	d1 04       	cpc	r13, r1
     d04:	59 f6       	brne	.-106    	; 0xc9c <OLED_refresh+0x2a>
			uint8_t SRAMvalue = XMEM_read(0x800 + page*128 + column);
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
			
		}
	}
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	bf 90       	pop	r11
     d18:	af 90       	pop	r10
     d1a:	08 95       	ret

00000d1c <OLED_clearAll>:


void OLED_clearAll(void) {
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
	for (uint16_t index = 0x800; index < 0x800 + 1024; index++){
     d20:	c0 e0       	ldi	r28, 0x00	; 0
     d22:	d8 e0       	ldi	r29, 0x08	; 8
		XMEM_write(0, index);
     d24:	be 01       	movw	r22, r28
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	0e 94 c1 06 	call	0xd82	; 0xd82 <XMEM_write>
	}
}


void OLED_clearAll(void) {
	for (uint16_t index = 0x800; index < 0x800 + 1024; index++){
     d2c:	21 96       	adiw	r28, 0x01	; 1
     d2e:	c1 15       	cp	r28, r1
     d30:	8c e0       	ldi	r24, 0x0C	; 12
     d32:	d8 07       	cpc	r29, r24
     d34:	b9 f7       	brne	.-18     	; 0xd24 <OLED_clearAll+0x8>
		XMEM_write(0, index);
	}
}
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <UART_transmit>:
#include <util/delay.h>
#include "uart.h"

void UART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while ( ! (UCSR0A & (1<<UDRE0))) {
     d3c:	5d 9b       	sbis	0x0b, 5	; 11
     d3e:	fe cf       	rjmp	.-4      	; 0xd3c <UART_transmit>
		// waiting...
	}
	// Put data into buffer, sends the data
	UDR0 = data;
     d40:	8c b9       	out	0x0c, r24	; 12
     d42:	08 95       	ret

00000d44 <UART_receive>:
}

unsigned char UART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1 << RXC0))) {
     d44:	5f 9b       	sbis	0x0b, 7	; 11
     d46:	fe cf       	rjmp	.-4      	; 0xd44 <UART_receive>
		// wait...
	}
	return UDR0;
     d48:	8c b1       	in	r24, 0x0c	; 12
	
}
     d4a:	08 95       	ret

00000d4c <UART_init>:

void UART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = ubrr>>8;
     d4c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = ubrr;
     d4e:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     d50:	88 e1       	ldi	r24, 0x18	; 24
     d52:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     d54:	8e e8       	ldi	r24, 0x8E	; 142
     d56:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(UART_transmit, UART_receive);
     d58:	62 ea       	ldi	r22, 0xA2	; 162
     d5a:	76 e0       	ldi	r23, 0x06	; 6
     d5c:	8e e9       	ldi	r24, 0x9E	; 158
     d5e:	96 e0       	ldi	r25, 0x06	; 6
     d60:	0e 94 37 09 	call	0x126e	; 0x126e <fdevopen>
     d64:	08 95       	ret

00000d66 <XMEM_init>:
#include "uart.h"
#define BASE_ADDRESS 0x1000

void XMEM_init(void) {
	// Enable XMEM
	MCUCR |= (1 << SRE);
     d66:	85 b7       	in	r24, 0x35	; 53
     d68:	80 68       	ori	r24, 0x80	; 128
     d6a:	85 bf       	out	0x35, r24	; 53
	
	// SFIOR = XX100XXX
	// We use PC7-PC4 for JTAG, NOT for XMEM address
	SFIOR |= (1 << XMM2);
     d6c:	80 b7       	in	r24, 0x30	; 48
     d6e:	80 62       	ori	r24, 0x20	; 32
     d70:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~((1 << XMM1) | (1 << XMM0));
     d72:	80 b7       	in	r24, 0x30	; 48
     d74:	87 7e       	andi	r24, 0xE7	; 231
     d76:	80 bf       	out	0x30, r24	; 48
     d78:	08 95       	ret

00000d7a <XMEM_read>:
}

uint8_t XMEM_read(uint16_t address) {
	volatile uint8_t *ext_mem = (uint8_t*) BASE_ADDRESS;
	return ext_mem[address];
     d7a:	90 5f       	subi	r25, 0xF0	; 240
     d7c:	fc 01       	movw	r30, r24
     d7e:	80 81       	ld	r24, Z
}
     d80:	08 95       	ret

00000d82 <XMEM_write>:

void XMEM_write(uint8_t data, uint16_t address) {
	volatile uint8_t *ext_mem = (uint8_t *) BASE_ADDRESS;
	ext_mem[address] = data;
     d82:	fb 01       	movw	r30, r22
     d84:	f0 5f       	subi	r31, 0xF0	; 240
     d86:	80 83       	st	Z, r24
     d88:	08 95       	ret

00000d8a <main>:
#include "Drivers/oled.h"
#define MYUBRR 31


int main(void)
{
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	c6 5b       	subi	r28, 0xB6	; 182
     d94:	d1 09       	sbc	r29, r1
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);
     da0:	8f e1       	ldi	r24, 0x1F	; 31
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <UART_init>
	XMEM_init();
     da8:	0e 94 b3 06 	call	0xd66	; 0xd66 <XMEM_init>
	INTERRUPT_init();
     dac:	0e 94 80 02 	call	0x500	; 0x500 <INTERRUPT_init>
	btn_init();
     db0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <btn_init>
	printf("Starting....\n\r");
     db4:	88 e0       	ldi	r24, 0x08	; 8
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	9f 93       	push	r25
     dba:	8f 93       	push	r24
     dbc:	0e 94 82 09 	call	0x1304	; 0x1304 <printf>
	OLED_init();
     dc0:	0e 94 3d 05 	call	0xa7a	; 0xa7a <OLED_init>
	
	OLED_clearAll();
     dc4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <OLED_clearAll>

	//MENU_init();	
	OLED_refresh();
     dc8:	0e 94 39 06 	call	0xc72	; 0xc72 <OLED_refresh>

	menu_t mainMenu;
	menu_ptr mainMenuPtr = &mainMenu;
	mainMenu.name = "Main menu";
     dcc:	87 e1       	ldi	r24, 0x17	; 23
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	9a 8f       	std	Y+26, r25	; 0x1a
     dd2:	89 8f       	std	Y+25, r24	; 0x19
	mainMenu.num_children = 3;
     dd4:	23 e0       	ldi	r18, 0x03	; 3
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	3c 83       	std	Y+4, r19	; 0x04
     dda:	2b 83       	std	Y+3, r18	; 0x03
	mainMenu.selectedChild = 0;
     ddc:	18 8e       	std	Y+24, r1	; 0x18
     dde:	1f 8a       	std	Y+23, r1	; 0x17

	menu_t sub_menu0;
	menu_ptr sub_menu0Ptr = &sub_menu0;
	sub_menu0.parent = mainMenuPtr;
     de0:	ce 01       	movw	r24, r28
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	98 ab       	std	Y+48, r25	; 0x30
     de6:	8f a7       	std	Y+47, r24	; 0x2f
	sub_menu0.num_children = 0;
     de8:	1e 8e       	std	Y+30, r1	; 0x1e
     dea:	1d 8e       	std	Y+29, r1	; 0x1d
	sub_menu0.name = "sub0";
     dec:	41 e2       	ldi	r20, 0x21	; 33
     dee:	51 e0       	ldi	r21, 0x01	; 1
     df0:	5c ab       	std	Y+52, r21	; 0x34
     df2:	4b ab       	std	Y+51, r20	; 0x33

	menu_t sub_menu1;
	menu_ptr sub_menu1Ptr = &sub_menu1;
	sub_menu1.parent = mainMenuPtr;
     df4:	2b 96       	adiw	r28, 0x0b	; 11
     df6:	9f af       	std	Y+63, r25	; 0x3f
     df8:	8e af       	std	Y+62, r24	; 0x3e
     dfa:	2b 97       	sbiw	r28, 0x0b	; 11
	sub_menu1.num_children = 3;
     dfc:	38 af       	std	Y+56, r19	; 0x38
     dfe:	2f ab       	std	Y+55, r18	; 0x37
	sub_menu1.name = "Morofunksjoner";
     e00:	26 e2       	ldi	r18, 0x26	; 38
     e02:	31 e0       	ldi	r19, 0x01	; 1
     e04:	2f 96       	adiw	r28, 0x0f	; 15
     e06:	3f af       	std	Y+63, r19	; 0x3f
     e08:	2e af       	std	Y+62, r18	; 0x3e
     e0a:	2f 97       	sbiw	r28, 0x0f	; 15

	menu_t sub_menu2;
	menu_ptr sub_menu2Ptr = &sub_menu2;
	sub_menu2.parent = mainMenuPtr;
     e0c:	fe 01       	movw	r30, r28
     e0e:	e1 5b       	subi	r30, 0xB1	; 177
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	95 8b       	std	Z+21, r25	; 0x15
     e14:	84 8b       	std	Z+20, r24	; 0x14
	sub_menu2.num_children = 0;
     e16:	13 82       	std	Z+3, r1	; 0x03
     e18:	12 82       	std	Z+2, r1	; 0x02
	sub_menu2.name = "sub2";
     e1a:	25 e3       	ldi	r18, 0x35	; 53
     e1c:	31 e0       	ldi	r19, 0x01	; 1
     e1e:	31 8f       	std	Z+25, r19	; 0x19
     e20:	20 8f       	std	Z+24, r18	; 0x18

	mainMenu.parent = NULL;
     e22:	1e 8a       	std	Y+22, r1	; 0x16
     e24:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu.children[0] = sub_menu0Ptr;
     e26:	9e 01       	movw	r18, r28
     e28:	25 5e       	subi	r18, 0xE5	; 229
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
     e2c:	3e 83       	std	Y+6, r19	; 0x06
     e2e:	2d 83       	std	Y+5, r18	; 0x05
	mainMenu.children[1] = sub_menu1Ptr;
     e30:	ae 01       	movw	r20, r28
     e32:	4b 5c       	subi	r20, 0xCB	; 203
     e34:	5f 4f       	sbci	r21, 0xFF	; 255
     e36:	58 87       	std	Y+8, r21	; 0x08
     e38:	4f 83       	std	Y+7, r20	; 0x07
	mainMenu.children[2] = sub_menu2Ptr;
     e3a:	fa 87       	std	Y+10, r31	; 0x0a
     e3c:	e9 87       	std	Y+9, r30	; 0x09

	menu_t sub_menu00;
	menu_ptr sub_menu00Ptr = &sub_menu00;
	sub_menu00.parent = sub_menu1Ptr;
     e3e:	22 5b       	subi	r18, 0xB2	; 178
     e40:	3f 4f       	sbci	r19, 0xFF	; 255
     e42:	f9 01       	movw	r30, r18
     e44:	55 8b       	std	Z+21, r21	; 0x15
     e46:	44 8b       	std	Z+20, r20	; 0x14
	sub_menu00.num_children = 0;
     e48:	13 82       	std	Z+3, r1	; 0x03
     e4a:	12 82       	std	Z+2, r1	; 0x02
	sub_menu00.name = "pong";
     e4c:	6a e3       	ldi	r22, 0x3A	; 58
     e4e:	71 e0       	ldi	r23, 0x01	; 1
     e50:	71 8f       	std	Z+25, r23	; 0x19
     e52:	60 8f       	std	Z+24, r22	; 0x18
	sub_menu00.fun_ptr = &MENU_pong;
     e54:	65 ea       	ldi	r22, 0xA5	; 165
     e56:	73 e0       	ldi	r23, 0x03	; 3
     e58:	71 83       	std	Z+1, r23	; 0x01
     e5a:	60 83       	st	Z, r22

	menu_t sub_menu10;
	menu_ptr sub_menu10Ptr = &sub_menu10;
	sub_menu10.parent = sub_menu1Ptr;
     e5c:	de 01       	movw	r26, r28
     e5e:	ad 57       	subi	r26, 0x7D	; 125
     e60:	bf 4f       	sbci	r27, 0xFF	; 255
     e62:	55 96       	adiw	r26, 0x15	; 21
     e64:	5c 93       	st	X, r21
     e66:	4e 93       	st	-X, r20
     e68:	54 97       	sbiw	r26, 0x14	; 20
	sub_menu10.num_children = 0;
     e6a:	13 96       	adiw	r26, 0x03	; 3
     e6c:	1c 92       	st	X, r1
     e6e:	1e 92       	st	-X, r1
     e70:	12 97       	sbiw	r26, 0x02	; 2
	sub_menu10.name = "Thomas' CD";
     e72:	6f e3       	ldi	r22, 0x3F	; 63
     e74:	71 e0       	ldi	r23, 0x01	; 1
     e76:	59 96       	adiw	r26, 0x19	; 25
     e78:	7c 93       	st	X, r23
     e7a:	6e 93       	st	-X, r22
     e7c:	58 97       	sbiw	r26, 0x18	; 24
	sub_menu10.fun_ptr = &MENU_animation;
     e7e:	67 e7       	ldi	r22, 0x77	; 119
     e80:	73 e0       	ldi	r23, 0x03	; 3
     e82:	11 96       	adiw	r26, 0x01	; 1
     e84:	7c 93       	st	X, r23
     e86:	6e 93       	st	-X, r22

	menu_t sub_menu20;
	menu_ptr sub_menu20Ptr = &sub_menu20;
	sub_menu20.parent = sub_menu1Ptr;
     e88:	f4 96       	adiw	r30, 0x34	; 52
     e8a:	55 8b       	std	Z+21, r21	; 0x15
     e8c:	44 8b       	std	Z+20, r20	; 0x14
	sub_menu20.num_children = 0;
     e8e:	13 82       	std	Z+3, r1	; 0x03
     e90:	12 82       	std	Z+2, r1	; 0x02
	sub_menu20.name = "Invers";
     e92:	4a e4       	ldi	r20, 0x4A	; 74
     e94:	51 e0       	ldi	r21, 0x01	; 1
     e96:	51 8f       	std	Z+25, r21	; 0x19
     e98:	40 8f       	std	Z+24, r20	; 0x18
	sub_menu20.fun_ptr = &MENU_veryFunInvertingFunction;
     e9a:	41 e6       	ldi	r20, 0x61	; 97
     e9c:	53 e0       	ldi	r21, 0x03	; 3
     e9e:	51 83       	std	Z+1, r21	; 0x01
     ea0:	40 83       	st	Z, r20


	sub_menu1.children[0] = sub_menu00Ptr;
     ea2:	3a af       	std	Y+58, r19	; 0x3a
     ea4:	29 af       	std	Y+57, r18	; 0x39
	sub_menu1.children[1] = sub_menu10Ptr;
     ea6:	bc af       	std	Y+60, r27	; 0x3c
     ea8:	ab af       	std	Y+59, r26	; 0x3b
	sub_menu1.children[2] = sub_menu20Ptr;
     eaa:	fe af       	std	Y+62, r31	; 0x3e
     eac:	ed af       	std	Y+61, r30	; 0x3d

	MENU_navigate(mainMenuPtr);
     eae:	0e 94 01 03 	call	0x602	; 0x602 <MENU_navigate>
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	ff cf       	rjmp	.-2      	; 0xeb6 <main+0x12c>

00000eb8 <__subsf3>:
     eb8:	50 58       	subi	r21, 0x80	; 128

00000eba <__addsf3>:
     eba:	bb 27       	eor	r27, r27
     ebc:	aa 27       	eor	r26, r26
     ebe:	0e d0       	rcall	.+28     	; 0xedc <__addsf3x>
     ec0:	0d c1       	rjmp	.+538    	; 0x10dc <__fp_round>
     ec2:	fe d0       	rcall	.+508    	; 0x10c0 <__fp_pscA>
     ec4:	30 f0       	brcs	.+12     	; 0xed2 <__addsf3+0x18>
     ec6:	03 d1       	rcall	.+518    	; 0x10ce <__fp_pscB>
     ec8:	20 f0       	brcs	.+8      	; 0xed2 <__addsf3+0x18>
     eca:	31 f4       	brne	.+12     	; 0xed8 <__addsf3+0x1e>
     ecc:	9f 3f       	cpi	r25, 0xFF	; 255
     ece:	11 f4       	brne	.+4      	; 0xed4 <__addsf3+0x1a>
     ed0:	1e f4       	brtc	.+6      	; 0xed8 <__addsf3+0x1e>
     ed2:	f3 c0       	rjmp	.+486    	; 0x10ba <__fp_nan>
     ed4:	0e f4       	brtc	.+2      	; 0xed8 <__addsf3+0x1e>
     ed6:	e0 95       	com	r30
     ed8:	e7 fb       	bst	r30, 7
     eda:	e9 c0       	rjmp	.+466    	; 0x10ae <__fp_inf>

00000edc <__addsf3x>:
     edc:	e9 2f       	mov	r30, r25
     ede:	0f d1       	rcall	.+542    	; 0x10fe <__fp_split3>
     ee0:	80 f3       	brcs	.-32     	; 0xec2 <__addsf3+0x8>
     ee2:	ba 17       	cp	r27, r26
     ee4:	62 07       	cpc	r22, r18
     ee6:	73 07       	cpc	r23, r19
     ee8:	84 07       	cpc	r24, r20
     eea:	95 07       	cpc	r25, r21
     eec:	18 f0       	brcs	.+6      	; 0xef4 <__addsf3x+0x18>
     eee:	71 f4       	brne	.+28     	; 0xf0c <__addsf3x+0x30>
     ef0:	9e f5       	brtc	.+102    	; 0xf58 <__addsf3x+0x7c>
     ef2:	27 c1       	rjmp	.+590    	; 0x1142 <__fp_zero>
     ef4:	0e f4       	brtc	.+2      	; 0xef8 <__addsf3x+0x1c>
     ef6:	e0 95       	com	r30
     ef8:	0b 2e       	mov	r0, r27
     efa:	ba 2f       	mov	r27, r26
     efc:	a0 2d       	mov	r26, r0
     efe:	0b 01       	movw	r0, r22
     f00:	b9 01       	movw	r22, r18
     f02:	90 01       	movw	r18, r0
     f04:	0c 01       	movw	r0, r24
     f06:	ca 01       	movw	r24, r20
     f08:	a0 01       	movw	r20, r0
     f0a:	11 24       	eor	r1, r1
     f0c:	ff 27       	eor	r31, r31
     f0e:	59 1b       	sub	r21, r25
     f10:	99 f0       	breq	.+38     	; 0xf38 <__addsf3x+0x5c>
     f12:	59 3f       	cpi	r21, 0xF9	; 249
     f14:	50 f4       	brcc	.+20     	; 0xf2a <__addsf3x+0x4e>
     f16:	50 3e       	cpi	r21, 0xE0	; 224
     f18:	68 f1       	brcs	.+90     	; 0xf74 <__addsf3x+0x98>
     f1a:	1a 16       	cp	r1, r26
     f1c:	f0 40       	sbci	r31, 0x00	; 0
     f1e:	a2 2f       	mov	r26, r18
     f20:	23 2f       	mov	r18, r19
     f22:	34 2f       	mov	r19, r20
     f24:	44 27       	eor	r20, r20
     f26:	58 5f       	subi	r21, 0xF8	; 248
     f28:	f3 cf       	rjmp	.-26     	; 0xf10 <__addsf3x+0x34>
     f2a:	46 95       	lsr	r20
     f2c:	37 95       	ror	r19
     f2e:	27 95       	ror	r18
     f30:	a7 95       	ror	r26
     f32:	f0 40       	sbci	r31, 0x00	; 0
     f34:	53 95       	inc	r21
     f36:	c9 f7       	brne	.-14     	; 0xf2a <__addsf3x+0x4e>
     f38:	7e f4       	brtc	.+30     	; 0xf58 <__addsf3x+0x7c>
     f3a:	1f 16       	cp	r1, r31
     f3c:	ba 0b       	sbc	r27, r26
     f3e:	62 0b       	sbc	r22, r18
     f40:	73 0b       	sbc	r23, r19
     f42:	84 0b       	sbc	r24, r20
     f44:	ba f0       	brmi	.+46     	; 0xf74 <__addsf3x+0x98>
     f46:	91 50       	subi	r25, 0x01	; 1
     f48:	a1 f0       	breq	.+40     	; 0xf72 <__addsf3x+0x96>
     f4a:	ff 0f       	add	r31, r31
     f4c:	bb 1f       	adc	r27, r27
     f4e:	66 1f       	adc	r22, r22
     f50:	77 1f       	adc	r23, r23
     f52:	88 1f       	adc	r24, r24
     f54:	c2 f7       	brpl	.-16     	; 0xf46 <__addsf3x+0x6a>
     f56:	0e c0       	rjmp	.+28     	; 0xf74 <__addsf3x+0x98>
     f58:	ba 0f       	add	r27, r26
     f5a:	62 1f       	adc	r22, r18
     f5c:	73 1f       	adc	r23, r19
     f5e:	84 1f       	adc	r24, r20
     f60:	48 f4       	brcc	.+18     	; 0xf74 <__addsf3x+0x98>
     f62:	87 95       	ror	r24
     f64:	77 95       	ror	r23
     f66:	67 95       	ror	r22
     f68:	b7 95       	ror	r27
     f6a:	f7 95       	ror	r31
     f6c:	9e 3f       	cpi	r25, 0xFE	; 254
     f6e:	08 f0       	brcs	.+2      	; 0xf72 <__addsf3x+0x96>
     f70:	b3 cf       	rjmp	.-154    	; 0xed8 <__addsf3+0x1e>
     f72:	93 95       	inc	r25
     f74:	88 0f       	add	r24, r24
     f76:	08 f0       	brcs	.+2      	; 0xf7a <__addsf3x+0x9e>
     f78:	99 27       	eor	r25, r25
     f7a:	ee 0f       	add	r30, r30
     f7c:	97 95       	ror	r25
     f7e:	87 95       	ror	r24
     f80:	08 95       	ret

00000f82 <__cmpsf2>:
     f82:	71 d0       	rcall	.+226    	; 0x1066 <__fp_cmp>
     f84:	08 f4       	brcc	.+2      	; 0xf88 <__cmpsf2+0x6>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	08 95       	ret

00000f8a <__fixsfsi>:
     f8a:	04 d0       	rcall	.+8      	; 0xf94 <__fixunssfsi>
     f8c:	68 94       	set
     f8e:	b1 11       	cpse	r27, r1
     f90:	d9 c0       	rjmp	.+434    	; 0x1144 <__fp_szero>
     f92:	08 95       	ret

00000f94 <__fixunssfsi>:
     f94:	bc d0       	rcall	.+376    	; 0x110e <__fp_splitA>
     f96:	88 f0       	brcs	.+34     	; 0xfba <__fixunssfsi+0x26>
     f98:	9f 57       	subi	r25, 0x7F	; 127
     f9a:	90 f0       	brcs	.+36     	; 0xfc0 <__fixunssfsi+0x2c>
     f9c:	b9 2f       	mov	r27, r25
     f9e:	99 27       	eor	r25, r25
     fa0:	b7 51       	subi	r27, 0x17	; 23
     fa2:	a0 f0       	brcs	.+40     	; 0xfcc <__fixunssfsi+0x38>
     fa4:	d1 f0       	breq	.+52     	; 0xfda <__fixunssfsi+0x46>
     fa6:	66 0f       	add	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	88 1f       	adc	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	1a f0       	brmi	.+6      	; 0xfb6 <__fixunssfsi+0x22>
     fb0:	ba 95       	dec	r27
     fb2:	c9 f7       	brne	.-14     	; 0xfa6 <__fixunssfsi+0x12>
     fb4:	12 c0       	rjmp	.+36     	; 0xfda <__fixunssfsi+0x46>
     fb6:	b1 30       	cpi	r27, 0x01	; 1
     fb8:	81 f0       	breq	.+32     	; 0xfda <__fixunssfsi+0x46>
     fba:	c3 d0       	rcall	.+390    	; 0x1142 <__fp_zero>
     fbc:	b1 e0       	ldi	r27, 0x01	; 1
     fbe:	08 95       	ret
     fc0:	c0 c0       	rjmp	.+384    	; 0x1142 <__fp_zero>
     fc2:	67 2f       	mov	r22, r23
     fc4:	78 2f       	mov	r23, r24
     fc6:	88 27       	eor	r24, r24
     fc8:	b8 5f       	subi	r27, 0xF8	; 248
     fca:	39 f0       	breq	.+14     	; 0xfda <__fixunssfsi+0x46>
     fcc:	b9 3f       	cpi	r27, 0xF9	; 249
     fce:	cc f3       	brlt	.-14     	; 0xfc2 <__fixunssfsi+0x2e>
     fd0:	86 95       	lsr	r24
     fd2:	77 95       	ror	r23
     fd4:	67 95       	ror	r22
     fd6:	b3 95       	inc	r27
     fd8:	d9 f7       	brne	.-10     	; 0xfd0 <__fixunssfsi+0x3c>
     fda:	3e f4       	brtc	.+14     	; 0xfea <__fixunssfsi+0x56>
     fdc:	90 95       	com	r25
     fde:	80 95       	com	r24
     fe0:	70 95       	com	r23
     fe2:	61 95       	neg	r22
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255
     fe6:	8f 4f       	sbci	r24, 0xFF	; 255
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	08 95       	ret

00000fec <__floatunsisf>:
     fec:	e8 94       	clt
     fee:	09 c0       	rjmp	.+18     	; 0x1002 <__floatsisf+0x12>

00000ff0 <__floatsisf>:
     ff0:	97 fb       	bst	r25, 7
     ff2:	3e f4       	brtc	.+14     	; 0x1002 <__floatsisf+0x12>
     ff4:	90 95       	com	r25
     ff6:	80 95       	com	r24
     ff8:	70 95       	com	r23
     ffa:	61 95       	neg	r22
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	99 23       	and	r25, r25
    1004:	a9 f0       	breq	.+42     	; 0x1030 <__floatsisf+0x40>
    1006:	f9 2f       	mov	r31, r25
    1008:	96 e9       	ldi	r25, 0x96	; 150
    100a:	bb 27       	eor	r27, r27
    100c:	93 95       	inc	r25
    100e:	f6 95       	lsr	r31
    1010:	87 95       	ror	r24
    1012:	77 95       	ror	r23
    1014:	67 95       	ror	r22
    1016:	b7 95       	ror	r27
    1018:	f1 11       	cpse	r31, r1
    101a:	f8 cf       	rjmp	.-16     	; 0x100c <__floatsisf+0x1c>
    101c:	fa f4       	brpl	.+62     	; 0x105c <__floatsisf+0x6c>
    101e:	bb 0f       	add	r27, r27
    1020:	11 f4       	brne	.+4      	; 0x1026 <__floatsisf+0x36>
    1022:	60 ff       	sbrs	r22, 0
    1024:	1b c0       	rjmp	.+54     	; 0x105c <__floatsisf+0x6c>
    1026:	6f 5f       	subi	r22, 0xFF	; 255
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	8f 4f       	sbci	r24, 0xFF	; 255
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	16 c0       	rjmp	.+44     	; 0x105c <__floatsisf+0x6c>
    1030:	88 23       	and	r24, r24
    1032:	11 f0       	breq	.+4      	; 0x1038 <__floatsisf+0x48>
    1034:	96 e9       	ldi	r25, 0x96	; 150
    1036:	11 c0       	rjmp	.+34     	; 0x105a <__floatsisf+0x6a>
    1038:	77 23       	and	r23, r23
    103a:	21 f0       	breq	.+8      	; 0x1044 <__floatsisf+0x54>
    103c:	9e e8       	ldi	r25, 0x8E	; 142
    103e:	87 2f       	mov	r24, r23
    1040:	76 2f       	mov	r23, r22
    1042:	05 c0       	rjmp	.+10     	; 0x104e <__floatsisf+0x5e>
    1044:	66 23       	and	r22, r22
    1046:	71 f0       	breq	.+28     	; 0x1064 <__floatsisf+0x74>
    1048:	96 e8       	ldi	r25, 0x86	; 134
    104a:	86 2f       	mov	r24, r22
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	2a f0       	brmi	.+10     	; 0x105c <__floatsisf+0x6c>
    1052:	9a 95       	dec	r25
    1054:	66 0f       	add	r22, r22
    1056:	77 1f       	adc	r23, r23
    1058:	88 1f       	adc	r24, r24
    105a:	da f7       	brpl	.-10     	; 0x1052 <__floatsisf+0x62>
    105c:	88 0f       	add	r24, r24
    105e:	96 95       	lsr	r25
    1060:	87 95       	ror	r24
    1062:	97 f9       	bld	r25, 7
    1064:	08 95       	ret

00001066 <__fp_cmp>:
    1066:	99 0f       	add	r25, r25
    1068:	00 08       	sbc	r0, r0
    106a:	55 0f       	add	r21, r21
    106c:	aa 0b       	sbc	r26, r26
    106e:	e0 e8       	ldi	r30, 0x80	; 128
    1070:	fe ef       	ldi	r31, 0xFE	; 254
    1072:	16 16       	cp	r1, r22
    1074:	17 06       	cpc	r1, r23
    1076:	e8 07       	cpc	r30, r24
    1078:	f9 07       	cpc	r31, r25
    107a:	c0 f0       	brcs	.+48     	; 0x10ac <__fp_cmp+0x46>
    107c:	12 16       	cp	r1, r18
    107e:	13 06       	cpc	r1, r19
    1080:	e4 07       	cpc	r30, r20
    1082:	f5 07       	cpc	r31, r21
    1084:	98 f0       	brcs	.+38     	; 0x10ac <__fp_cmp+0x46>
    1086:	62 1b       	sub	r22, r18
    1088:	73 0b       	sbc	r23, r19
    108a:	84 0b       	sbc	r24, r20
    108c:	95 0b       	sbc	r25, r21
    108e:	39 f4       	brne	.+14     	; 0x109e <__fp_cmp+0x38>
    1090:	0a 26       	eor	r0, r26
    1092:	61 f0       	breq	.+24     	; 0x10ac <__fp_cmp+0x46>
    1094:	23 2b       	or	r18, r19
    1096:	24 2b       	or	r18, r20
    1098:	25 2b       	or	r18, r21
    109a:	21 f4       	brne	.+8      	; 0x10a4 <__fp_cmp+0x3e>
    109c:	08 95       	ret
    109e:	0a 26       	eor	r0, r26
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <__fp_cmp+0x3e>
    10a2:	a1 40       	sbci	r26, 0x01	; 1
    10a4:	a6 95       	lsr	r26
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	81 1d       	adc	r24, r1
    10aa:	81 1d       	adc	r24, r1
    10ac:	08 95       	ret

000010ae <__fp_inf>:
    10ae:	97 f9       	bld	r25, 7
    10b0:	9f 67       	ori	r25, 0x7F	; 127
    10b2:	80 e8       	ldi	r24, 0x80	; 128
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	08 95       	ret

000010ba <__fp_nan>:
    10ba:	9f ef       	ldi	r25, 0xFF	; 255
    10bc:	80 ec       	ldi	r24, 0xC0	; 192
    10be:	08 95       	ret

000010c0 <__fp_pscA>:
    10c0:	00 24       	eor	r0, r0
    10c2:	0a 94       	dec	r0
    10c4:	16 16       	cp	r1, r22
    10c6:	17 06       	cpc	r1, r23
    10c8:	18 06       	cpc	r1, r24
    10ca:	09 06       	cpc	r0, r25
    10cc:	08 95       	ret

000010ce <__fp_pscB>:
    10ce:	00 24       	eor	r0, r0
    10d0:	0a 94       	dec	r0
    10d2:	12 16       	cp	r1, r18
    10d4:	13 06       	cpc	r1, r19
    10d6:	14 06       	cpc	r1, r20
    10d8:	05 06       	cpc	r0, r21
    10da:	08 95       	ret

000010dc <__fp_round>:
    10dc:	09 2e       	mov	r0, r25
    10de:	03 94       	inc	r0
    10e0:	00 0c       	add	r0, r0
    10e2:	11 f4       	brne	.+4      	; 0x10e8 <__fp_round+0xc>
    10e4:	88 23       	and	r24, r24
    10e6:	52 f0       	brmi	.+20     	; 0x10fc <__fp_round+0x20>
    10e8:	bb 0f       	add	r27, r27
    10ea:	40 f4       	brcc	.+16     	; 0x10fc <__fp_round+0x20>
    10ec:	bf 2b       	or	r27, r31
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <__fp_round+0x18>
    10f0:	60 ff       	sbrs	r22, 0
    10f2:	04 c0       	rjmp	.+8      	; 0x10fc <__fp_round+0x20>
    10f4:	6f 5f       	subi	r22, 0xFF	; 255
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	8f 4f       	sbci	r24, 0xFF	; 255
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	08 95       	ret

000010fe <__fp_split3>:
    10fe:	57 fd       	sbrc	r21, 7
    1100:	90 58       	subi	r25, 0x80	; 128
    1102:	44 0f       	add	r20, r20
    1104:	55 1f       	adc	r21, r21
    1106:	59 f0       	breq	.+22     	; 0x111e <__fp_splitA+0x10>
    1108:	5f 3f       	cpi	r21, 0xFF	; 255
    110a:	71 f0       	breq	.+28     	; 0x1128 <__fp_splitA+0x1a>
    110c:	47 95       	ror	r20

0000110e <__fp_splitA>:
    110e:	88 0f       	add	r24, r24
    1110:	97 fb       	bst	r25, 7
    1112:	99 1f       	adc	r25, r25
    1114:	61 f0       	breq	.+24     	; 0x112e <__fp_splitA+0x20>
    1116:	9f 3f       	cpi	r25, 0xFF	; 255
    1118:	79 f0       	breq	.+30     	; 0x1138 <__fp_splitA+0x2a>
    111a:	87 95       	ror	r24
    111c:	08 95       	ret
    111e:	12 16       	cp	r1, r18
    1120:	13 06       	cpc	r1, r19
    1122:	14 06       	cpc	r1, r20
    1124:	55 1f       	adc	r21, r21
    1126:	f2 cf       	rjmp	.-28     	; 0x110c <__fp_split3+0xe>
    1128:	46 95       	lsr	r20
    112a:	f1 df       	rcall	.-30     	; 0x110e <__fp_splitA>
    112c:	08 c0       	rjmp	.+16     	; 0x113e <__fp_splitA+0x30>
    112e:	16 16       	cp	r1, r22
    1130:	17 06       	cpc	r1, r23
    1132:	18 06       	cpc	r1, r24
    1134:	99 1f       	adc	r25, r25
    1136:	f1 cf       	rjmp	.-30     	; 0x111a <__fp_splitA+0xc>
    1138:	86 95       	lsr	r24
    113a:	71 05       	cpc	r23, r1
    113c:	61 05       	cpc	r22, r1
    113e:	08 94       	sec
    1140:	08 95       	ret

00001142 <__fp_zero>:
    1142:	e8 94       	clt

00001144 <__fp_szero>:
    1144:	bb 27       	eor	r27, r27
    1146:	66 27       	eor	r22, r22
    1148:	77 27       	eor	r23, r23
    114a:	cb 01       	movw	r24, r22
    114c:	97 f9       	bld	r25, 7
    114e:	08 95       	ret

00001150 <__gesf2>:
    1150:	8a df       	rcall	.-236    	; 0x1066 <__fp_cmp>
    1152:	08 f4       	brcc	.+2      	; 0x1156 <__gesf2+0x6>
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	08 95       	ret

00001158 <__mulsf3>:
    1158:	0b d0       	rcall	.+22     	; 0x1170 <__mulsf3x>
    115a:	c0 cf       	rjmp	.-128    	; 0x10dc <__fp_round>
    115c:	b1 df       	rcall	.-158    	; 0x10c0 <__fp_pscA>
    115e:	28 f0       	brcs	.+10     	; 0x116a <__mulsf3+0x12>
    1160:	b6 df       	rcall	.-148    	; 0x10ce <__fp_pscB>
    1162:	18 f0       	brcs	.+6      	; 0x116a <__mulsf3+0x12>
    1164:	95 23       	and	r25, r21
    1166:	09 f0       	breq	.+2      	; 0x116a <__mulsf3+0x12>
    1168:	a2 cf       	rjmp	.-188    	; 0x10ae <__fp_inf>
    116a:	a7 cf       	rjmp	.-178    	; 0x10ba <__fp_nan>
    116c:	11 24       	eor	r1, r1
    116e:	ea cf       	rjmp	.-44     	; 0x1144 <__fp_szero>

00001170 <__mulsf3x>:
    1170:	c6 df       	rcall	.-116    	; 0x10fe <__fp_split3>
    1172:	a0 f3       	brcs	.-24     	; 0x115c <__mulsf3+0x4>

00001174 <__mulsf3_pse>:
    1174:	95 9f       	mul	r25, r21
    1176:	d1 f3       	breq	.-12     	; 0x116c <__mulsf3+0x14>
    1178:	95 0f       	add	r25, r21
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	55 1f       	adc	r21, r21
    117e:	62 9f       	mul	r22, r18
    1180:	f0 01       	movw	r30, r0
    1182:	72 9f       	mul	r23, r18
    1184:	bb 27       	eor	r27, r27
    1186:	f0 0d       	add	r31, r0
    1188:	b1 1d       	adc	r27, r1
    118a:	63 9f       	mul	r22, r19
    118c:	aa 27       	eor	r26, r26
    118e:	f0 0d       	add	r31, r0
    1190:	b1 1d       	adc	r27, r1
    1192:	aa 1f       	adc	r26, r26
    1194:	64 9f       	mul	r22, r20
    1196:	66 27       	eor	r22, r22
    1198:	b0 0d       	add	r27, r0
    119a:	a1 1d       	adc	r26, r1
    119c:	66 1f       	adc	r22, r22
    119e:	82 9f       	mul	r24, r18
    11a0:	22 27       	eor	r18, r18
    11a2:	b0 0d       	add	r27, r0
    11a4:	a1 1d       	adc	r26, r1
    11a6:	62 1f       	adc	r22, r18
    11a8:	73 9f       	mul	r23, r19
    11aa:	b0 0d       	add	r27, r0
    11ac:	a1 1d       	adc	r26, r1
    11ae:	62 1f       	adc	r22, r18
    11b0:	83 9f       	mul	r24, r19
    11b2:	a0 0d       	add	r26, r0
    11b4:	61 1d       	adc	r22, r1
    11b6:	22 1f       	adc	r18, r18
    11b8:	74 9f       	mul	r23, r20
    11ba:	33 27       	eor	r19, r19
    11bc:	a0 0d       	add	r26, r0
    11be:	61 1d       	adc	r22, r1
    11c0:	23 1f       	adc	r18, r19
    11c2:	84 9f       	mul	r24, r20
    11c4:	60 0d       	add	r22, r0
    11c6:	21 1d       	adc	r18, r1
    11c8:	82 2f       	mov	r24, r18
    11ca:	76 2f       	mov	r23, r22
    11cc:	6a 2f       	mov	r22, r26
    11ce:	11 24       	eor	r1, r1
    11d0:	9f 57       	subi	r25, 0x7F	; 127
    11d2:	50 40       	sbci	r21, 0x00	; 0
    11d4:	8a f0       	brmi	.+34     	; 0x11f8 <__mulsf3_pse+0x84>
    11d6:	e1 f0       	breq	.+56     	; 0x1210 <__mulsf3_pse+0x9c>
    11d8:	88 23       	and	r24, r24
    11da:	4a f0       	brmi	.+18     	; 0x11ee <__mulsf3_pse+0x7a>
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	bb 1f       	adc	r27, r27
    11e2:	66 1f       	adc	r22, r22
    11e4:	77 1f       	adc	r23, r23
    11e6:	88 1f       	adc	r24, r24
    11e8:	91 50       	subi	r25, 0x01	; 1
    11ea:	50 40       	sbci	r21, 0x00	; 0
    11ec:	a9 f7       	brne	.-22     	; 0x11d8 <__mulsf3_pse+0x64>
    11ee:	9e 3f       	cpi	r25, 0xFE	; 254
    11f0:	51 05       	cpc	r21, r1
    11f2:	70 f0       	brcs	.+28     	; 0x1210 <__mulsf3_pse+0x9c>
    11f4:	5c cf       	rjmp	.-328    	; 0x10ae <__fp_inf>
    11f6:	a6 cf       	rjmp	.-180    	; 0x1144 <__fp_szero>
    11f8:	5f 3f       	cpi	r21, 0xFF	; 255
    11fa:	ec f3       	brlt	.-6      	; 0x11f6 <__mulsf3_pse+0x82>
    11fc:	98 3e       	cpi	r25, 0xE8	; 232
    11fe:	dc f3       	brlt	.-10     	; 0x11f6 <__mulsf3_pse+0x82>
    1200:	86 95       	lsr	r24
    1202:	77 95       	ror	r23
    1204:	67 95       	ror	r22
    1206:	b7 95       	ror	r27
    1208:	f7 95       	ror	r31
    120a:	e7 95       	ror	r30
    120c:	9f 5f       	subi	r25, 0xFF	; 255
    120e:	c1 f7       	brne	.-16     	; 0x1200 <__mulsf3_pse+0x8c>
    1210:	fe 2b       	or	r31, r30
    1212:	88 0f       	add	r24, r24
    1214:	91 1d       	adc	r25, r1
    1216:	96 95       	lsr	r25
    1218:	87 95       	ror	r24
    121a:	97 f9       	bld	r25, 7
    121c:	08 95       	ret

0000121e <__divmodhi4>:
    121e:	97 fb       	bst	r25, 7
    1220:	07 2e       	mov	r0, r23
    1222:	16 f4       	brtc	.+4      	; 0x1228 <__divmodhi4+0xa>
    1224:	00 94       	com	r0
    1226:	07 d0       	rcall	.+14     	; 0x1236 <__divmodhi4_neg1>
    1228:	77 fd       	sbrc	r23, 7
    122a:	09 d0       	rcall	.+18     	; 0x123e <__divmodhi4_neg2>
    122c:	0e 94 23 09 	call	0x1246	; 0x1246 <__udivmodhi4>
    1230:	07 fc       	sbrc	r0, 7
    1232:	05 d0       	rcall	.+10     	; 0x123e <__divmodhi4_neg2>
    1234:	3e f4       	brtc	.+14     	; 0x1244 <__divmodhi4_exit>

00001236 <__divmodhi4_neg1>:
    1236:	90 95       	com	r25
    1238:	81 95       	neg	r24
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	08 95       	ret

0000123e <__divmodhi4_neg2>:
    123e:	70 95       	com	r23
    1240:	61 95       	neg	r22
    1242:	7f 4f       	sbci	r23, 0xFF	; 255

00001244 <__divmodhi4_exit>:
    1244:	08 95       	ret

00001246 <__udivmodhi4>:
    1246:	aa 1b       	sub	r26, r26
    1248:	bb 1b       	sub	r27, r27
    124a:	51 e1       	ldi	r21, 0x11	; 17
    124c:	07 c0       	rjmp	.+14     	; 0x125c <__udivmodhi4_ep>

0000124e <__udivmodhi4_loop>:
    124e:	aa 1f       	adc	r26, r26
    1250:	bb 1f       	adc	r27, r27
    1252:	a6 17       	cp	r26, r22
    1254:	b7 07       	cpc	r27, r23
    1256:	10 f0       	brcs	.+4      	; 0x125c <__udivmodhi4_ep>
    1258:	a6 1b       	sub	r26, r22
    125a:	b7 0b       	sbc	r27, r23

0000125c <__udivmodhi4_ep>:
    125c:	88 1f       	adc	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	5a 95       	dec	r21
    1262:	a9 f7       	brne	.-22     	; 0x124e <__udivmodhi4_loop>
    1264:	80 95       	com	r24
    1266:	90 95       	com	r25
    1268:	bc 01       	movw	r22, r24
    126a:	cd 01       	movw	r24, r26
    126c:	08 95       	ret

0000126e <fdevopen>:
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	ec 01       	movw	r28, r24
    1278:	8b 01       	movw	r16, r22
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	31 f4       	brne	.+12     	; 0x128a <fdevopen+0x1c>
    127e:	61 15       	cp	r22, r1
    1280:	71 05       	cpc	r23, r1
    1282:	19 f4       	brne	.+6      	; 0x128a <fdevopen+0x1c>
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	38 c0       	rjmp	.+112    	; 0x12fa <fdevopen+0x8c>
    128a:	6e e0       	ldi	r22, 0x0E	; 14
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <calloc>
    1296:	fc 01       	movw	r30, r24
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	a1 f3       	breq	.-24     	; 0x1284 <fdevopen+0x16>
    129c:	80 e8       	ldi	r24, 0x80	; 128
    129e:	83 83       	std	Z+3, r24	; 0x03
    12a0:	01 15       	cp	r16, r1
    12a2:	11 05       	cpc	r17, r1
    12a4:	71 f0       	breq	.+28     	; 0x12c2 <fdevopen+0x54>
    12a6:	13 87       	std	Z+11, r17	; 0x0b
    12a8:	02 87       	std	Z+10, r16	; 0x0a
    12aa:	81 e8       	ldi	r24, 0x81	; 129
    12ac:	83 83       	std	Z+3, r24	; 0x03
    12ae:	80 91 54 01 	lds	r24, 0x0154
    12b2:	90 91 55 01 	lds	r25, 0x0155
    12b6:	89 2b       	or	r24, r25
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <fdevopen+0x54>
    12ba:	f0 93 55 01 	sts	0x0155, r31
    12be:	e0 93 54 01 	sts	0x0154, r30
    12c2:	20 97       	sbiw	r28, 0x00	; 0
    12c4:	c9 f0       	breq	.+50     	; 0x12f8 <fdevopen+0x8a>
    12c6:	d1 87       	std	Z+9, r29	; 0x09
    12c8:	c0 87       	std	Z+8, r28	; 0x08
    12ca:	83 81       	ldd	r24, Z+3	; 0x03
    12cc:	82 60       	ori	r24, 0x02	; 2
    12ce:	83 83       	std	Z+3, r24	; 0x03
    12d0:	80 91 56 01 	lds	r24, 0x0156
    12d4:	90 91 57 01 	lds	r25, 0x0157
    12d8:	89 2b       	or	r24, r25
    12da:	71 f4       	brne	.+28     	; 0x12f8 <fdevopen+0x8a>
    12dc:	f0 93 57 01 	sts	0x0157, r31
    12e0:	e0 93 56 01 	sts	0x0156, r30
    12e4:	80 91 58 01 	lds	r24, 0x0158
    12e8:	90 91 59 01 	lds	r25, 0x0159
    12ec:	89 2b       	or	r24, r25
    12ee:	21 f4       	brne	.+8      	; 0x12f8 <fdevopen+0x8a>
    12f0:	f0 93 59 01 	sts	0x0159, r31
    12f4:	e0 93 58 01 	sts	0x0158, r30
    12f8:	cf 01       	movw	r24, r30
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <printf>:
    1304:	a0 e0       	ldi	r26, 0x00	; 0
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e8 e8       	ldi	r30, 0x88	; 136
    130a:	f9 e0       	ldi	r31, 0x09	; 9
    130c:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__prologue_saves__+0x20>
    1310:	fe 01       	movw	r30, r28
    1312:	35 96       	adiw	r30, 0x05	; 5
    1314:	61 91       	ld	r22, Z+
    1316:	71 91       	ld	r23, Z+
    1318:	af 01       	movw	r20, r30
    131a:	80 91 56 01 	lds	r24, 0x0156
    131e:	90 91 57 01 	lds	r25, 0x0157
    1322:	0e 94 96 09 	call	0x132c	; 0x132c <vfprintf>
    1326:	e2 e0       	ldi	r30, 0x02	; 2
    1328:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__epilogue_restores__+0x20>

0000132c <vfprintf>:
    132c:	ac e0       	ldi	r26, 0x0C	; 12
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	ec e9       	ldi	r30, 0x9C	; 156
    1332:	f9 e0       	ldi	r31, 0x09	; 9
    1334:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__prologue_saves__>
    1338:	7c 01       	movw	r14, r24
    133a:	6b 01       	movw	r12, r22
    133c:	8a 01       	movw	r16, r20
    133e:	fc 01       	movw	r30, r24
    1340:	17 82       	std	Z+7, r1	; 0x07
    1342:	16 82       	std	Z+6, r1	; 0x06
    1344:	83 81       	ldd	r24, Z+3	; 0x03
    1346:	81 ff       	sbrs	r24, 1
    1348:	bd c1       	rjmp	.+890    	; 0x16c4 <vfprintf+0x398>
    134a:	ce 01       	movw	r24, r28
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	4c 01       	movw	r8, r24
    1350:	f7 01       	movw	r30, r14
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	f6 01       	movw	r30, r12
    1356:	93 fd       	sbrc	r25, 3
    1358:	85 91       	lpm	r24, Z+
    135a:	93 ff       	sbrs	r25, 3
    135c:	81 91       	ld	r24, Z+
    135e:	6f 01       	movw	r12, r30
    1360:	88 23       	and	r24, r24
    1362:	09 f4       	brne	.+2      	; 0x1366 <vfprintf+0x3a>
    1364:	ab c1       	rjmp	.+854    	; 0x16bc <vfprintf+0x390>
    1366:	85 32       	cpi	r24, 0x25	; 37
    1368:	39 f4       	brne	.+14     	; 0x1378 <vfprintf+0x4c>
    136a:	93 fd       	sbrc	r25, 3
    136c:	85 91       	lpm	r24, Z+
    136e:	93 ff       	sbrs	r25, 3
    1370:	81 91       	ld	r24, Z+
    1372:	6f 01       	movw	r12, r30
    1374:	85 32       	cpi	r24, 0x25	; 37
    1376:	29 f4       	brne	.+10     	; 0x1382 <vfprintf+0x56>
    1378:	b7 01       	movw	r22, r14
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    1380:	e7 cf       	rjmp	.-50     	; 0x1350 <vfprintf+0x24>
    1382:	51 2c       	mov	r5, r1
    1384:	31 2c       	mov	r3, r1
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	20 32       	cpi	r18, 0x20	; 32
    138a:	a0 f4       	brcc	.+40     	; 0x13b4 <vfprintf+0x88>
    138c:	8b 32       	cpi	r24, 0x2B	; 43
    138e:	69 f0       	breq	.+26     	; 0x13aa <vfprintf+0x7e>
    1390:	30 f4       	brcc	.+12     	; 0x139e <vfprintf+0x72>
    1392:	80 32       	cpi	r24, 0x20	; 32
    1394:	59 f0       	breq	.+22     	; 0x13ac <vfprintf+0x80>
    1396:	83 32       	cpi	r24, 0x23	; 35
    1398:	69 f4       	brne	.+26     	; 0x13b4 <vfprintf+0x88>
    139a:	20 61       	ori	r18, 0x10	; 16
    139c:	2c c0       	rjmp	.+88     	; 0x13f6 <vfprintf+0xca>
    139e:	8d 32       	cpi	r24, 0x2D	; 45
    13a0:	39 f0       	breq	.+14     	; 0x13b0 <vfprintf+0x84>
    13a2:	80 33       	cpi	r24, 0x30	; 48
    13a4:	39 f4       	brne	.+14     	; 0x13b4 <vfprintf+0x88>
    13a6:	21 60       	ori	r18, 0x01	; 1
    13a8:	26 c0       	rjmp	.+76     	; 0x13f6 <vfprintf+0xca>
    13aa:	22 60       	ori	r18, 0x02	; 2
    13ac:	24 60       	ori	r18, 0x04	; 4
    13ae:	23 c0       	rjmp	.+70     	; 0x13f6 <vfprintf+0xca>
    13b0:	28 60       	ori	r18, 0x08	; 8
    13b2:	21 c0       	rjmp	.+66     	; 0x13f6 <vfprintf+0xca>
    13b4:	27 fd       	sbrc	r18, 7
    13b6:	27 c0       	rjmp	.+78     	; 0x1406 <vfprintf+0xda>
    13b8:	30 ed       	ldi	r19, 0xD0	; 208
    13ba:	38 0f       	add	r19, r24
    13bc:	3a 30       	cpi	r19, 0x0A	; 10
    13be:	78 f4       	brcc	.+30     	; 0x13de <vfprintf+0xb2>
    13c0:	26 ff       	sbrs	r18, 6
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <vfprintf+0xa4>
    13c4:	fa e0       	ldi	r31, 0x0A	; 10
    13c6:	5f 9e       	mul	r5, r31
    13c8:	30 0d       	add	r19, r0
    13ca:	11 24       	eor	r1, r1
    13cc:	53 2e       	mov	r5, r19
    13ce:	13 c0       	rjmp	.+38     	; 0x13f6 <vfprintf+0xca>
    13d0:	8a e0       	ldi	r24, 0x0A	; 10
    13d2:	38 9e       	mul	r3, r24
    13d4:	30 0d       	add	r19, r0
    13d6:	11 24       	eor	r1, r1
    13d8:	33 2e       	mov	r3, r19
    13da:	20 62       	ori	r18, 0x20	; 32
    13dc:	0c c0       	rjmp	.+24     	; 0x13f6 <vfprintf+0xca>
    13de:	8e 32       	cpi	r24, 0x2E	; 46
    13e0:	21 f4       	brne	.+8      	; 0x13ea <vfprintf+0xbe>
    13e2:	26 fd       	sbrc	r18, 6
    13e4:	6b c1       	rjmp	.+726    	; 0x16bc <vfprintf+0x390>
    13e6:	20 64       	ori	r18, 0x40	; 64
    13e8:	06 c0       	rjmp	.+12     	; 0x13f6 <vfprintf+0xca>
    13ea:	8c 36       	cpi	r24, 0x6C	; 108
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <vfprintf+0xc6>
    13ee:	20 68       	ori	r18, 0x80	; 128
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <vfprintf+0xca>
    13f2:	88 36       	cpi	r24, 0x68	; 104
    13f4:	41 f4       	brne	.+16     	; 0x1406 <vfprintf+0xda>
    13f6:	f6 01       	movw	r30, r12
    13f8:	93 fd       	sbrc	r25, 3
    13fa:	85 91       	lpm	r24, Z+
    13fc:	93 ff       	sbrs	r25, 3
    13fe:	81 91       	ld	r24, Z+
    1400:	6f 01       	movw	r12, r30
    1402:	81 11       	cpse	r24, r1
    1404:	c1 cf       	rjmp	.-126    	; 0x1388 <vfprintf+0x5c>
    1406:	98 2f       	mov	r25, r24
    1408:	9f 7d       	andi	r25, 0xDF	; 223
    140a:	95 54       	subi	r25, 0x45	; 69
    140c:	93 30       	cpi	r25, 0x03	; 3
    140e:	28 f4       	brcc	.+10     	; 0x141a <vfprintf+0xee>
    1410:	0c 5f       	subi	r16, 0xFC	; 252
    1412:	1f 4f       	sbci	r17, 0xFF	; 255
    1414:	ff e3       	ldi	r31, 0x3F	; 63
    1416:	f9 83       	std	Y+1, r31	; 0x01
    1418:	0d c0       	rjmp	.+26     	; 0x1434 <vfprintf+0x108>
    141a:	83 36       	cpi	r24, 0x63	; 99
    141c:	31 f0       	breq	.+12     	; 0x142a <vfprintf+0xfe>
    141e:	83 37       	cpi	r24, 0x73	; 115
    1420:	71 f0       	breq	.+28     	; 0x143e <vfprintf+0x112>
    1422:	83 35       	cpi	r24, 0x53	; 83
    1424:	09 f0       	breq	.+2      	; 0x1428 <vfprintf+0xfc>
    1426:	5b c0       	rjmp	.+182    	; 0x14de <vfprintf+0x1b2>
    1428:	22 c0       	rjmp	.+68     	; 0x146e <vfprintf+0x142>
    142a:	f8 01       	movw	r30, r16
    142c:	80 81       	ld	r24, Z
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	0e 5f       	subi	r16, 0xFE	; 254
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	44 24       	eor	r4, r4
    1436:	43 94       	inc	r4
    1438:	51 2c       	mov	r5, r1
    143a:	54 01       	movw	r10, r8
    143c:	15 c0       	rjmp	.+42     	; 0x1468 <vfprintf+0x13c>
    143e:	38 01       	movw	r6, r16
    1440:	f2 e0       	ldi	r31, 0x02	; 2
    1442:	6f 0e       	add	r6, r31
    1444:	71 1c       	adc	r7, r1
    1446:	f8 01       	movw	r30, r16
    1448:	a0 80       	ld	r10, Z
    144a:	b1 80       	ldd	r11, Z+1	; 0x01
    144c:	26 ff       	sbrs	r18, 6
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <vfprintf+0x12a>
    1450:	65 2d       	mov	r22, r5
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	02 c0       	rjmp	.+4      	; 0x145a <vfprintf+0x12e>
    1456:	6f ef       	ldi	r22, 0xFF	; 255
    1458:	7f ef       	ldi	r23, 0xFF	; 255
    145a:	c5 01       	movw	r24, r10
    145c:	2c 87       	std	Y+12, r18	; 0x0c
    145e:	0e 94 bd 0c 	call	0x197a	; 0x197a <strnlen>
    1462:	2c 01       	movw	r4, r24
    1464:	83 01       	movw	r16, r6
    1466:	2c 85       	ldd	r18, Y+12	; 0x0c
    1468:	2f 77       	andi	r18, 0x7F	; 127
    146a:	22 2e       	mov	r2, r18
    146c:	17 c0       	rjmp	.+46     	; 0x149c <vfprintf+0x170>
    146e:	38 01       	movw	r6, r16
    1470:	f2 e0       	ldi	r31, 0x02	; 2
    1472:	6f 0e       	add	r6, r31
    1474:	71 1c       	adc	r7, r1
    1476:	f8 01       	movw	r30, r16
    1478:	a0 80       	ld	r10, Z
    147a:	b1 80       	ldd	r11, Z+1	; 0x01
    147c:	26 ff       	sbrs	r18, 6
    147e:	03 c0       	rjmp	.+6      	; 0x1486 <vfprintf+0x15a>
    1480:	65 2d       	mov	r22, r5
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	02 c0       	rjmp	.+4      	; 0x148a <vfprintf+0x15e>
    1486:	6f ef       	ldi	r22, 0xFF	; 255
    1488:	7f ef       	ldi	r23, 0xFF	; 255
    148a:	c5 01       	movw	r24, r10
    148c:	2c 87       	std	Y+12, r18	; 0x0c
    148e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <strnlen_P>
    1492:	2c 01       	movw	r4, r24
    1494:	2c 85       	ldd	r18, Y+12	; 0x0c
    1496:	20 68       	ori	r18, 0x80	; 128
    1498:	22 2e       	mov	r2, r18
    149a:	83 01       	movw	r16, r6
    149c:	23 fc       	sbrc	r2, 3
    149e:	1b c0       	rjmp	.+54     	; 0x14d6 <vfprintf+0x1aa>
    14a0:	83 2d       	mov	r24, r3
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	48 16       	cp	r4, r24
    14a6:	59 06       	cpc	r5, r25
    14a8:	b0 f4       	brcc	.+44     	; 0x14d6 <vfprintf+0x1aa>
    14aa:	b7 01       	movw	r22, r14
    14ac:	80 e2       	ldi	r24, 0x20	; 32
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    14b4:	3a 94       	dec	r3
    14b6:	f4 cf       	rjmp	.-24     	; 0x14a0 <vfprintf+0x174>
    14b8:	f5 01       	movw	r30, r10
    14ba:	27 fc       	sbrc	r2, 7
    14bc:	85 91       	lpm	r24, Z+
    14be:	27 fe       	sbrs	r2, 7
    14c0:	81 91       	ld	r24, Z+
    14c2:	5f 01       	movw	r10, r30
    14c4:	b7 01       	movw	r22, r14
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    14cc:	31 10       	cpse	r3, r1
    14ce:	3a 94       	dec	r3
    14d0:	f1 e0       	ldi	r31, 0x01	; 1
    14d2:	4f 1a       	sub	r4, r31
    14d4:	51 08       	sbc	r5, r1
    14d6:	41 14       	cp	r4, r1
    14d8:	51 04       	cpc	r5, r1
    14da:	71 f7       	brne	.-36     	; 0x14b8 <vfprintf+0x18c>
    14dc:	e5 c0       	rjmp	.+458    	; 0x16a8 <vfprintf+0x37c>
    14de:	84 36       	cpi	r24, 0x64	; 100
    14e0:	11 f0       	breq	.+4      	; 0x14e6 <vfprintf+0x1ba>
    14e2:	89 36       	cpi	r24, 0x69	; 105
    14e4:	39 f5       	brne	.+78     	; 0x1534 <vfprintf+0x208>
    14e6:	f8 01       	movw	r30, r16
    14e8:	27 ff       	sbrs	r18, 7
    14ea:	07 c0       	rjmp	.+14     	; 0x14fa <vfprintf+0x1ce>
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	0c 5f       	subi	r16, 0xFC	; 252
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	08 c0       	rjmp	.+16     	; 0x150a <vfprintf+0x1de>
    14fa:	60 81       	ld	r22, Z
    14fc:	71 81       	ldd	r23, Z+1	; 0x01
    14fe:	88 27       	eor	r24, r24
    1500:	77 fd       	sbrc	r23, 7
    1502:	80 95       	com	r24
    1504:	98 2f       	mov	r25, r24
    1506:	0e 5f       	subi	r16, 0xFE	; 254
    1508:	1f 4f       	sbci	r17, 0xFF	; 255
    150a:	2f 76       	andi	r18, 0x6F	; 111
    150c:	b2 2e       	mov	r11, r18
    150e:	97 ff       	sbrs	r25, 7
    1510:	09 c0       	rjmp	.+18     	; 0x1524 <vfprintf+0x1f8>
    1512:	90 95       	com	r25
    1514:	80 95       	com	r24
    1516:	70 95       	com	r23
    1518:	61 95       	neg	r22
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	8f 4f       	sbci	r24, 0xFF	; 255
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	20 68       	ori	r18, 0x80	; 128
    1522:	b2 2e       	mov	r11, r18
    1524:	2a e0       	ldi	r18, 0x0A	; 10
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	a4 01       	movw	r20, r8
    152a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__ultoa_invert>
    152e:	a8 2e       	mov	r10, r24
    1530:	a8 18       	sub	r10, r8
    1532:	44 c0       	rjmp	.+136    	; 0x15bc <vfprintf+0x290>
    1534:	85 37       	cpi	r24, 0x75	; 117
    1536:	29 f4       	brne	.+10     	; 0x1542 <vfprintf+0x216>
    1538:	2f 7e       	andi	r18, 0xEF	; 239
    153a:	b2 2e       	mov	r11, r18
    153c:	2a e0       	ldi	r18, 0x0A	; 10
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	25 c0       	rjmp	.+74     	; 0x158c <vfprintf+0x260>
    1542:	f2 2f       	mov	r31, r18
    1544:	f9 7f       	andi	r31, 0xF9	; 249
    1546:	bf 2e       	mov	r11, r31
    1548:	8f 36       	cpi	r24, 0x6F	; 111
    154a:	c1 f0       	breq	.+48     	; 0x157c <vfprintf+0x250>
    154c:	18 f4       	brcc	.+6      	; 0x1554 <vfprintf+0x228>
    154e:	88 35       	cpi	r24, 0x58	; 88
    1550:	79 f0       	breq	.+30     	; 0x1570 <vfprintf+0x244>
    1552:	b4 c0       	rjmp	.+360    	; 0x16bc <vfprintf+0x390>
    1554:	80 37       	cpi	r24, 0x70	; 112
    1556:	19 f0       	breq	.+6      	; 0x155e <vfprintf+0x232>
    1558:	88 37       	cpi	r24, 0x78	; 120
    155a:	21 f0       	breq	.+8      	; 0x1564 <vfprintf+0x238>
    155c:	af c0       	rjmp	.+350    	; 0x16bc <vfprintf+0x390>
    155e:	2f 2f       	mov	r18, r31
    1560:	20 61       	ori	r18, 0x10	; 16
    1562:	b2 2e       	mov	r11, r18
    1564:	b4 fe       	sbrs	r11, 4
    1566:	0d c0       	rjmp	.+26     	; 0x1582 <vfprintf+0x256>
    1568:	8b 2d       	mov	r24, r11
    156a:	84 60       	ori	r24, 0x04	; 4
    156c:	b8 2e       	mov	r11, r24
    156e:	09 c0       	rjmp	.+18     	; 0x1582 <vfprintf+0x256>
    1570:	24 ff       	sbrs	r18, 4
    1572:	0a c0       	rjmp	.+20     	; 0x1588 <vfprintf+0x25c>
    1574:	9f 2f       	mov	r25, r31
    1576:	96 60       	ori	r25, 0x06	; 6
    1578:	b9 2e       	mov	r11, r25
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <vfprintf+0x25c>
    157c:	28 e0       	ldi	r18, 0x08	; 8
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	05 c0       	rjmp	.+10     	; 0x158c <vfprintf+0x260>
    1582:	20 e1       	ldi	r18, 0x10	; 16
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	02 c0       	rjmp	.+4      	; 0x158c <vfprintf+0x260>
    1588:	20 e1       	ldi	r18, 0x10	; 16
    158a:	32 e0       	ldi	r19, 0x02	; 2
    158c:	f8 01       	movw	r30, r16
    158e:	b7 fe       	sbrs	r11, 7
    1590:	07 c0       	rjmp	.+14     	; 0x15a0 <vfprintf+0x274>
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	0c 5f       	subi	r16, 0xFC	; 252
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	06 c0       	rjmp	.+12     	; 0x15ac <vfprintf+0x280>
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 5f       	subi	r16, 0xFE	; 254
    15aa:	1f 4f       	sbci	r17, 0xFF	; 255
    15ac:	a4 01       	movw	r20, r8
    15ae:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__ultoa_invert>
    15b2:	a8 2e       	mov	r10, r24
    15b4:	a8 18       	sub	r10, r8
    15b6:	fb 2d       	mov	r31, r11
    15b8:	ff 77       	andi	r31, 0x7F	; 127
    15ba:	bf 2e       	mov	r11, r31
    15bc:	b6 fe       	sbrs	r11, 6
    15be:	0b c0       	rjmp	.+22     	; 0x15d6 <vfprintf+0x2aa>
    15c0:	2b 2d       	mov	r18, r11
    15c2:	2e 7f       	andi	r18, 0xFE	; 254
    15c4:	a5 14       	cp	r10, r5
    15c6:	50 f4       	brcc	.+20     	; 0x15dc <vfprintf+0x2b0>
    15c8:	b4 fe       	sbrs	r11, 4
    15ca:	0a c0       	rjmp	.+20     	; 0x15e0 <vfprintf+0x2b4>
    15cc:	b2 fc       	sbrc	r11, 2
    15ce:	08 c0       	rjmp	.+16     	; 0x15e0 <vfprintf+0x2b4>
    15d0:	2b 2d       	mov	r18, r11
    15d2:	2e 7e       	andi	r18, 0xEE	; 238
    15d4:	05 c0       	rjmp	.+10     	; 0x15e0 <vfprintf+0x2b4>
    15d6:	7a 2c       	mov	r7, r10
    15d8:	2b 2d       	mov	r18, r11
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <vfprintf+0x2b6>
    15dc:	7a 2c       	mov	r7, r10
    15de:	01 c0       	rjmp	.+2      	; 0x15e2 <vfprintf+0x2b6>
    15e0:	75 2c       	mov	r7, r5
    15e2:	24 ff       	sbrs	r18, 4
    15e4:	0d c0       	rjmp	.+26     	; 0x1600 <vfprintf+0x2d4>
    15e6:	fe 01       	movw	r30, r28
    15e8:	ea 0d       	add	r30, r10
    15ea:	f1 1d       	adc	r31, r1
    15ec:	80 81       	ld	r24, Z
    15ee:	80 33       	cpi	r24, 0x30	; 48
    15f0:	11 f4       	brne	.+4      	; 0x15f6 <vfprintf+0x2ca>
    15f2:	29 7e       	andi	r18, 0xE9	; 233
    15f4:	09 c0       	rjmp	.+18     	; 0x1608 <vfprintf+0x2dc>
    15f6:	22 ff       	sbrs	r18, 2
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <vfprintf+0x2da>
    15fa:	73 94       	inc	r7
    15fc:	73 94       	inc	r7
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <vfprintf+0x2dc>
    1600:	82 2f       	mov	r24, r18
    1602:	86 78       	andi	r24, 0x86	; 134
    1604:	09 f0       	breq	.+2      	; 0x1608 <vfprintf+0x2dc>
    1606:	73 94       	inc	r7
    1608:	23 fd       	sbrc	r18, 3
    160a:	13 c0       	rjmp	.+38     	; 0x1632 <vfprintf+0x306>
    160c:	20 ff       	sbrs	r18, 0
    160e:	06 c0       	rjmp	.+12     	; 0x161c <vfprintf+0x2f0>
    1610:	5a 2c       	mov	r5, r10
    1612:	73 14       	cp	r7, r3
    1614:	18 f4       	brcc	.+6      	; 0x161c <vfprintf+0x2f0>
    1616:	53 0c       	add	r5, r3
    1618:	57 18       	sub	r5, r7
    161a:	73 2c       	mov	r7, r3
    161c:	73 14       	cp	r7, r3
    161e:	68 f4       	brcc	.+26     	; 0x163a <vfprintf+0x30e>
    1620:	b7 01       	movw	r22, r14
    1622:	80 e2       	ldi	r24, 0x20	; 32
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	2c 87       	std	Y+12, r18	; 0x0c
    1628:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    162c:	73 94       	inc	r7
    162e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1630:	f5 cf       	rjmp	.-22     	; 0x161c <vfprintf+0x2f0>
    1632:	73 14       	cp	r7, r3
    1634:	10 f4       	brcc	.+4      	; 0x163a <vfprintf+0x30e>
    1636:	37 18       	sub	r3, r7
    1638:	01 c0       	rjmp	.+2      	; 0x163c <vfprintf+0x310>
    163a:	31 2c       	mov	r3, r1
    163c:	24 ff       	sbrs	r18, 4
    163e:	12 c0       	rjmp	.+36     	; 0x1664 <vfprintf+0x338>
    1640:	b7 01       	movw	r22, r14
    1642:	80 e3       	ldi	r24, 0x30	; 48
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	2c 87       	std	Y+12, r18	; 0x0c
    1648:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    164c:	2c 85       	ldd	r18, Y+12	; 0x0c
    164e:	22 ff       	sbrs	r18, 2
    1650:	17 c0       	rjmp	.+46     	; 0x1680 <vfprintf+0x354>
    1652:	21 ff       	sbrs	r18, 1
    1654:	03 c0       	rjmp	.+6      	; 0x165c <vfprintf+0x330>
    1656:	88 e5       	ldi	r24, 0x58	; 88
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <vfprintf+0x334>
    165c:	88 e7       	ldi	r24, 0x78	; 120
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	b7 01       	movw	r22, r14
    1662:	0c c0       	rjmp	.+24     	; 0x167c <vfprintf+0x350>
    1664:	82 2f       	mov	r24, r18
    1666:	86 78       	andi	r24, 0x86	; 134
    1668:	59 f0       	breq	.+22     	; 0x1680 <vfprintf+0x354>
    166a:	21 fd       	sbrc	r18, 1
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <vfprintf+0x346>
    166e:	80 e2       	ldi	r24, 0x20	; 32
    1670:	01 c0       	rjmp	.+2      	; 0x1674 <vfprintf+0x348>
    1672:	8b e2       	ldi	r24, 0x2B	; 43
    1674:	27 fd       	sbrc	r18, 7
    1676:	8d e2       	ldi	r24, 0x2D	; 45
    1678:	b7 01       	movw	r22, r14
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    1680:	a5 14       	cp	r10, r5
    1682:	38 f4       	brcc	.+14     	; 0x1692 <vfprintf+0x366>
    1684:	b7 01       	movw	r22, r14
    1686:	80 e3       	ldi	r24, 0x30	; 48
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    168e:	5a 94       	dec	r5
    1690:	f7 cf       	rjmp	.-18     	; 0x1680 <vfprintf+0x354>
    1692:	aa 94       	dec	r10
    1694:	f4 01       	movw	r30, r8
    1696:	ea 0d       	add	r30, r10
    1698:	f1 1d       	adc	r31, r1
    169a:	80 81       	ld	r24, Z
    169c:	b7 01       	movw	r22, r14
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    16a4:	a1 10       	cpse	r10, r1
    16a6:	f5 cf       	rjmp	.-22     	; 0x1692 <vfprintf+0x366>
    16a8:	33 20       	and	r3, r3
    16aa:	09 f4       	brne	.+2      	; 0x16ae <vfprintf+0x382>
    16ac:	51 ce       	rjmp	.-862    	; 0x1350 <vfprintf+0x24>
    16ae:	b7 01       	movw	r22, r14
    16b0:	80 e2       	ldi	r24, 0x20	; 32
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <fputc>
    16b8:	3a 94       	dec	r3
    16ba:	f6 cf       	rjmp	.-20     	; 0x16a8 <vfprintf+0x37c>
    16bc:	f7 01       	movw	r30, r14
    16be:	86 81       	ldd	r24, Z+6	; 0x06
    16c0:	97 81       	ldd	r25, Z+7	; 0x07
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <vfprintf+0x39c>
    16c4:	8f ef       	ldi	r24, 0xFF	; 255
    16c6:	9f ef       	ldi	r25, 0xFF	; 255
    16c8:	2c 96       	adiw	r28, 0x0c	; 12
    16ca:	e2 e1       	ldi	r30, 0x12	; 18
    16cc:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__epilogue_restores__>

000016d0 <calloc>:
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	86 9f       	mul	r24, r22
    16da:	80 01       	movw	r16, r0
    16dc:	87 9f       	mul	r24, r23
    16de:	10 0d       	add	r17, r0
    16e0:	96 9f       	mul	r25, r22
    16e2:	10 0d       	add	r17, r0
    16e4:	11 24       	eor	r1, r1
    16e6:	c8 01       	movw	r24, r16
    16e8:	0e 94 84 0b 	call	0x1708	; 0x1708 <malloc>
    16ec:	ec 01       	movw	r28, r24
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	29 f0       	breq	.+10     	; 0x16fc <calloc+0x2c>
    16f2:	a8 01       	movw	r20, r16
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	0e 94 b6 0c 	call	0x196c	; 0x196c <memset>
    16fc:	ce 01       	movw	r24, r28
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	08 95       	ret

00001708 <malloc>:
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	82 30       	cpi	r24, 0x02	; 2
    170e:	91 05       	cpc	r25, r1
    1710:	10 f4       	brcc	.+4      	; 0x1716 <malloc+0xe>
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	e0 91 5c 01 	lds	r30, 0x015C
    171a:	f0 91 5d 01 	lds	r31, 0x015D
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	a0 e0       	ldi	r26, 0x00	; 0
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	30 97       	sbiw	r30, 0x00	; 0
    1728:	39 f1       	breq	.+78     	; 0x1778 <malloc+0x70>
    172a:	40 81       	ld	r20, Z
    172c:	51 81       	ldd	r21, Z+1	; 0x01
    172e:	48 17       	cp	r20, r24
    1730:	59 07       	cpc	r21, r25
    1732:	b8 f0       	brcs	.+46     	; 0x1762 <malloc+0x5a>
    1734:	48 17       	cp	r20, r24
    1736:	59 07       	cpc	r21, r25
    1738:	71 f4       	brne	.+28     	; 0x1756 <malloc+0x4e>
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	10 97       	sbiw	r26, 0x00	; 0
    1740:	29 f0       	breq	.+10     	; 0x174c <malloc+0x44>
    1742:	13 96       	adiw	r26, 0x03	; 3
    1744:	9c 93       	st	X, r25
    1746:	8e 93       	st	-X, r24
    1748:	12 97       	sbiw	r26, 0x02	; 2
    174a:	2c c0       	rjmp	.+88     	; 0x17a4 <malloc+0x9c>
    174c:	90 93 5d 01 	sts	0x015D, r25
    1750:	80 93 5c 01 	sts	0x015C, r24
    1754:	27 c0       	rjmp	.+78     	; 0x17a4 <malloc+0x9c>
    1756:	21 15       	cp	r18, r1
    1758:	31 05       	cpc	r19, r1
    175a:	31 f0       	breq	.+12     	; 0x1768 <malloc+0x60>
    175c:	42 17       	cp	r20, r18
    175e:	53 07       	cpc	r21, r19
    1760:	18 f0       	brcs	.+6      	; 0x1768 <malloc+0x60>
    1762:	a9 01       	movw	r20, r18
    1764:	db 01       	movw	r26, r22
    1766:	01 c0       	rjmp	.+2      	; 0x176a <malloc+0x62>
    1768:	ef 01       	movw	r28, r30
    176a:	9a 01       	movw	r18, r20
    176c:	bd 01       	movw	r22, r26
    176e:	df 01       	movw	r26, r30
    1770:	02 80       	ldd	r0, Z+2	; 0x02
    1772:	f3 81       	ldd	r31, Z+3	; 0x03
    1774:	e0 2d       	mov	r30, r0
    1776:	d7 cf       	rjmp	.-82     	; 0x1726 <malloc+0x1e>
    1778:	21 15       	cp	r18, r1
    177a:	31 05       	cpc	r19, r1
    177c:	f9 f0       	breq	.+62     	; 0x17bc <malloc+0xb4>
    177e:	28 1b       	sub	r18, r24
    1780:	39 0b       	sbc	r19, r25
    1782:	24 30       	cpi	r18, 0x04	; 4
    1784:	31 05       	cpc	r19, r1
    1786:	80 f4       	brcc	.+32     	; 0x17a8 <malloc+0xa0>
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	9b 81       	ldd	r25, Y+3	; 0x03
    178c:	61 15       	cp	r22, r1
    178e:	71 05       	cpc	r23, r1
    1790:	21 f0       	breq	.+8      	; 0x179a <malloc+0x92>
    1792:	fb 01       	movw	r30, r22
    1794:	93 83       	std	Z+3, r25	; 0x03
    1796:	82 83       	std	Z+2, r24	; 0x02
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <malloc+0x9a>
    179a:	90 93 5d 01 	sts	0x015D, r25
    179e:	80 93 5c 01 	sts	0x015C, r24
    17a2:	fe 01       	movw	r30, r28
    17a4:	32 96       	adiw	r30, 0x02	; 2
    17a6:	44 c0       	rjmp	.+136    	; 0x1830 <malloc+0x128>
    17a8:	fe 01       	movw	r30, r28
    17aa:	e2 0f       	add	r30, r18
    17ac:	f3 1f       	adc	r31, r19
    17ae:	81 93       	st	Z+, r24
    17b0:	91 93       	st	Z+, r25
    17b2:	22 50       	subi	r18, 0x02	; 2
    17b4:	31 09       	sbc	r19, r1
    17b6:	39 83       	std	Y+1, r19	; 0x01
    17b8:	28 83       	st	Y, r18
    17ba:	3a c0       	rjmp	.+116    	; 0x1830 <malloc+0x128>
    17bc:	20 91 5a 01 	lds	r18, 0x015A
    17c0:	30 91 5b 01 	lds	r19, 0x015B
    17c4:	23 2b       	or	r18, r19
    17c6:	41 f4       	brne	.+16     	; 0x17d8 <malloc+0xd0>
    17c8:	20 91 02 01 	lds	r18, 0x0102
    17cc:	30 91 03 01 	lds	r19, 0x0103
    17d0:	30 93 5b 01 	sts	0x015B, r19
    17d4:	20 93 5a 01 	sts	0x015A, r18
    17d8:	20 91 00 01 	lds	r18, 0x0100
    17dc:	30 91 01 01 	lds	r19, 0x0101
    17e0:	21 15       	cp	r18, r1
    17e2:	31 05       	cpc	r19, r1
    17e4:	41 f4       	brne	.+16     	; 0x17f6 <malloc+0xee>
    17e6:	2d b7       	in	r18, 0x3d	; 61
    17e8:	3e b7       	in	r19, 0x3e	; 62
    17ea:	40 91 04 01 	lds	r20, 0x0104
    17ee:	50 91 05 01 	lds	r21, 0x0105
    17f2:	24 1b       	sub	r18, r20
    17f4:	35 0b       	sbc	r19, r21
    17f6:	e0 91 5a 01 	lds	r30, 0x015A
    17fa:	f0 91 5b 01 	lds	r31, 0x015B
    17fe:	e2 17       	cp	r30, r18
    1800:	f3 07       	cpc	r31, r19
    1802:	a0 f4       	brcc	.+40     	; 0x182c <malloc+0x124>
    1804:	2e 1b       	sub	r18, r30
    1806:	3f 0b       	sbc	r19, r31
    1808:	28 17       	cp	r18, r24
    180a:	39 07       	cpc	r19, r25
    180c:	78 f0       	brcs	.+30     	; 0x182c <malloc+0x124>
    180e:	ac 01       	movw	r20, r24
    1810:	4e 5f       	subi	r20, 0xFE	; 254
    1812:	5f 4f       	sbci	r21, 0xFF	; 255
    1814:	24 17       	cp	r18, r20
    1816:	35 07       	cpc	r19, r21
    1818:	48 f0       	brcs	.+18     	; 0x182c <malloc+0x124>
    181a:	4e 0f       	add	r20, r30
    181c:	5f 1f       	adc	r21, r31
    181e:	50 93 5b 01 	sts	0x015B, r21
    1822:	40 93 5a 01 	sts	0x015A, r20
    1826:	81 93       	st	Z+, r24
    1828:	91 93       	st	Z+, r25
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <malloc+0x128>
    182c:	e0 e0       	ldi	r30, 0x00	; 0
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	cf 01       	movw	r24, r30
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	08 95       	ret

00001838 <free>:
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	09 f4       	brne	.+2      	; 0x1842 <free+0xa>
    1840:	87 c0       	rjmp	.+270    	; 0x1950 <free+0x118>
    1842:	fc 01       	movw	r30, r24
    1844:	32 97       	sbiw	r30, 0x02	; 2
    1846:	13 82       	std	Z+3, r1	; 0x03
    1848:	12 82       	std	Z+2, r1	; 0x02
    184a:	c0 91 5c 01 	lds	r28, 0x015C
    184e:	d0 91 5d 01 	lds	r29, 0x015D
    1852:	20 97       	sbiw	r28, 0x00	; 0
    1854:	81 f4       	brne	.+32     	; 0x1876 <free+0x3e>
    1856:	20 81       	ld	r18, Z
    1858:	31 81       	ldd	r19, Z+1	; 0x01
    185a:	28 0f       	add	r18, r24
    185c:	39 1f       	adc	r19, r25
    185e:	80 91 5a 01 	lds	r24, 0x015A
    1862:	90 91 5b 01 	lds	r25, 0x015B
    1866:	82 17       	cp	r24, r18
    1868:	93 07       	cpc	r25, r19
    186a:	79 f5       	brne	.+94     	; 0x18ca <free+0x92>
    186c:	f0 93 5b 01 	sts	0x015B, r31
    1870:	e0 93 5a 01 	sts	0x015A, r30
    1874:	6d c0       	rjmp	.+218    	; 0x1950 <free+0x118>
    1876:	de 01       	movw	r26, r28
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	ae 17       	cp	r26, r30
    187e:	bf 07       	cpc	r27, r31
    1880:	50 f4       	brcc	.+20     	; 0x1896 <free+0x5e>
    1882:	12 96       	adiw	r26, 0x02	; 2
    1884:	4d 91       	ld	r20, X+
    1886:	5c 91       	ld	r21, X
    1888:	13 97       	sbiw	r26, 0x03	; 3
    188a:	9d 01       	movw	r18, r26
    188c:	41 15       	cp	r20, r1
    188e:	51 05       	cpc	r21, r1
    1890:	09 f1       	breq	.+66     	; 0x18d4 <free+0x9c>
    1892:	da 01       	movw	r26, r20
    1894:	f3 cf       	rjmp	.-26     	; 0x187c <free+0x44>
    1896:	b3 83       	std	Z+3, r27	; 0x03
    1898:	a2 83       	std	Z+2, r26	; 0x02
    189a:	40 81       	ld	r20, Z
    189c:	51 81       	ldd	r21, Z+1	; 0x01
    189e:	84 0f       	add	r24, r20
    18a0:	95 1f       	adc	r25, r21
    18a2:	8a 17       	cp	r24, r26
    18a4:	9b 07       	cpc	r25, r27
    18a6:	71 f4       	brne	.+28     	; 0x18c4 <free+0x8c>
    18a8:	8d 91       	ld	r24, X+
    18aa:	9c 91       	ld	r25, X
    18ac:	11 97       	sbiw	r26, 0x01	; 1
    18ae:	84 0f       	add	r24, r20
    18b0:	95 1f       	adc	r25, r21
    18b2:	02 96       	adiw	r24, 0x02	; 2
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	80 83       	st	Z, r24
    18b8:	12 96       	adiw	r26, 0x02	; 2
    18ba:	8d 91       	ld	r24, X+
    18bc:	9c 91       	ld	r25, X
    18be:	13 97       	sbiw	r26, 0x03	; 3
    18c0:	93 83       	std	Z+3, r25	; 0x03
    18c2:	82 83       	std	Z+2, r24	; 0x02
    18c4:	21 15       	cp	r18, r1
    18c6:	31 05       	cpc	r19, r1
    18c8:	29 f4       	brne	.+10     	; 0x18d4 <free+0x9c>
    18ca:	f0 93 5d 01 	sts	0x015D, r31
    18ce:	e0 93 5c 01 	sts	0x015C, r30
    18d2:	3e c0       	rjmp	.+124    	; 0x1950 <free+0x118>
    18d4:	d9 01       	movw	r26, r18
    18d6:	13 96       	adiw	r26, 0x03	; 3
    18d8:	fc 93       	st	X, r31
    18da:	ee 93       	st	-X, r30
    18dc:	12 97       	sbiw	r26, 0x02	; 2
    18de:	4d 91       	ld	r20, X+
    18e0:	5d 91       	ld	r21, X+
    18e2:	a4 0f       	add	r26, r20
    18e4:	b5 1f       	adc	r27, r21
    18e6:	ea 17       	cp	r30, r26
    18e8:	fb 07       	cpc	r31, r27
    18ea:	79 f4       	brne	.+30     	; 0x190a <free+0xd2>
    18ec:	80 81       	ld	r24, Z
    18ee:	91 81       	ldd	r25, Z+1	; 0x01
    18f0:	84 0f       	add	r24, r20
    18f2:	95 1f       	adc	r25, r21
    18f4:	02 96       	adiw	r24, 0x02	; 2
    18f6:	d9 01       	movw	r26, r18
    18f8:	11 96       	adiw	r26, 0x01	; 1
    18fa:	9c 93       	st	X, r25
    18fc:	8e 93       	st	-X, r24
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	13 96       	adiw	r26, 0x03	; 3
    1904:	9c 93       	st	X, r25
    1906:	8e 93       	st	-X, r24
    1908:	12 97       	sbiw	r26, 0x02	; 2
    190a:	e0 e0       	ldi	r30, 0x00	; 0
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	9b 81       	ldd	r25, Y+3	; 0x03
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	19 f0       	breq	.+6      	; 0x191c <free+0xe4>
    1916:	fe 01       	movw	r30, r28
    1918:	ec 01       	movw	r28, r24
    191a:	f9 cf       	rjmp	.-14     	; 0x190e <free+0xd6>
    191c:	ce 01       	movw	r24, r28
    191e:	02 96       	adiw	r24, 0x02	; 2
    1920:	28 81       	ld	r18, Y
    1922:	39 81       	ldd	r19, Y+1	; 0x01
    1924:	82 0f       	add	r24, r18
    1926:	93 1f       	adc	r25, r19
    1928:	20 91 5a 01 	lds	r18, 0x015A
    192c:	30 91 5b 01 	lds	r19, 0x015B
    1930:	28 17       	cp	r18, r24
    1932:	39 07       	cpc	r19, r25
    1934:	69 f4       	brne	.+26     	; 0x1950 <free+0x118>
    1936:	30 97       	sbiw	r30, 0x00	; 0
    1938:	29 f4       	brne	.+10     	; 0x1944 <free+0x10c>
    193a:	10 92 5d 01 	sts	0x015D, r1
    193e:	10 92 5c 01 	sts	0x015C, r1
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <free+0x110>
    1944:	13 82       	std	Z+3, r1	; 0x03
    1946:	12 82       	std	Z+2, r1	; 0x02
    1948:	d0 93 5b 01 	sts	0x015B, r29
    194c:	c0 93 5a 01 	sts	0x015A, r28
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	08 95       	ret

00001956 <strnlen_P>:
    1956:	fc 01       	movw	r30, r24
    1958:	05 90       	lpm	r0, Z+
    195a:	61 50       	subi	r22, 0x01	; 1
    195c:	70 40       	sbci	r23, 0x00	; 0
    195e:	01 10       	cpse	r0, r1
    1960:	d8 f7       	brcc	.-10     	; 0x1958 <strnlen_P+0x2>
    1962:	80 95       	com	r24
    1964:	90 95       	com	r25
    1966:	8e 0f       	add	r24, r30
    1968:	9f 1f       	adc	r25, r31
    196a:	08 95       	ret

0000196c <memset>:
    196c:	dc 01       	movw	r26, r24
    196e:	01 c0       	rjmp	.+2      	; 0x1972 <memset+0x6>
    1970:	6d 93       	st	X+, r22
    1972:	41 50       	subi	r20, 0x01	; 1
    1974:	50 40       	sbci	r21, 0x00	; 0
    1976:	e0 f7       	brcc	.-8      	; 0x1970 <memset+0x4>
    1978:	08 95       	ret

0000197a <strnlen>:
    197a:	fc 01       	movw	r30, r24
    197c:	61 50       	subi	r22, 0x01	; 1
    197e:	70 40       	sbci	r23, 0x00	; 0
    1980:	01 90       	ld	r0, Z+
    1982:	01 10       	cpse	r0, r1
    1984:	d8 f7       	brcc	.-10     	; 0x197c <strnlen+0x2>
    1986:	80 95       	com	r24
    1988:	90 95       	com	r25
    198a:	8e 0f       	add	r24, r30
    198c:	9f 1f       	adc	r25, r31
    198e:	08 95       	ret

00001990 <fputc>:
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	18 2f       	mov	r17, r24
    199a:	09 2f       	mov	r16, r25
    199c:	eb 01       	movw	r28, r22
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	81 fd       	sbrc	r24, 1
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <fputc+0x1a>
    19a4:	8f ef       	ldi	r24, 0xFF	; 255
    19a6:	9f ef       	ldi	r25, 0xFF	; 255
    19a8:	20 c0       	rjmp	.+64     	; 0x19ea <fputc+0x5a>
    19aa:	82 ff       	sbrs	r24, 2
    19ac:	10 c0       	rjmp	.+32     	; 0x19ce <fputc+0x3e>
    19ae:	4e 81       	ldd	r20, Y+6	; 0x06
    19b0:	5f 81       	ldd	r21, Y+7	; 0x07
    19b2:	2c 81       	ldd	r18, Y+4	; 0x04
    19b4:	3d 81       	ldd	r19, Y+5	; 0x05
    19b6:	42 17       	cp	r20, r18
    19b8:	53 07       	cpc	r21, r19
    19ba:	7c f4       	brge	.+30     	; 0x19da <fputc+0x4a>
    19bc:	e8 81       	ld	r30, Y
    19be:	f9 81       	ldd	r31, Y+1	; 0x01
    19c0:	9f 01       	movw	r18, r30
    19c2:	2f 5f       	subi	r18, 0xFF	; 255
    19c4:	3f 4f       	sbci	r19, 0xFF	; 255
    19c6:	39 83       	std	Y+1, r19	; 0x01
    19c8:	28 83       	st	Y, r18
    19ca:	10 83       	st	Z, r17
    19cc:	06 c0       	rjmp	.+12     	; 0x19da <fputc+0x4a>
    19ce:	e8 85       	ldd	r30, Y+8	; 0x08
    19d0:	f9 85       	ldd	r31, Y+9	; 0x09
    19d2:	81 2f       	mov	r24, r17
    19d4:	09 95       	icall
    19d6:	89 2b       	or	r24, r25
    19d8:	29 f7       	brne	.-54     	; 0x19a4 <fputc+0x14>
    19da:	2e 81       	ldd	r18, Y+6	; 0x06
    19dc:	3f 81       	ldd	r19, Y+7	; 0x07
    19de:	2f 5f       	subi	r18, 0xFF	; 255
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	3f 83       	std	Y+7, r19	; 0x07
    19e4:	2e 83       	std	Y+6, r18	; 0x06
    19e6:	81 2f       	mov	r24, r17
    19e8:	90 2f       	mov	r25, r16
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	08 95       	ret

000019f4 <__ultoa_invert>:
    19f4:	fa 01       	movw	r30, r20
    19f6:	aa 27       	eor	r26, r26
    19f8:	28 30       	cpi	r18, 0x08	; 8
    19fa:	51 f1       	breq	.+84     	; 0x1a50 <__ultoa_invert+0x5c>
    19fc:	20 31       	cpi	r18, 0x10	; 16
    19fe:	81 f1       	breq	.+96     	; 0x1a60 <__ultoa_invert+0x6c>
    1a00:	e8 94       	clt
    1a02:	6f 93       	push	r22
    1a04:	6e 7f       	andi	r22, 0xFE	; 254
    1a06:	6e 5f       	subi	r22, 0xFE	; 254
    1a08:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0e:	af 4f       	sbci	r26, 0xFF	; 255
    1a10:	b1 e0       	ldi	r27, 0x01	; 1
    1a12:	3e d0       	rcall	.+124    	; 0x1a90 <__ultoa_invert+0x9c>
    1a14:	b4 e0       	ldi	r27, 0x04	; 4
    1a16:	3c d0       	rcall	.+120    	; 0x1a90 <__ultoa_invert+0x9c>
    1a18:	67 0f       	add	r22, r23
    1a1a:	78 1f       	adc	r23, r24
    1a1c:	89 1f       	adc	r24, r25
    1a1e:	9a 1f       	adc	r25, r26
    1a20:	a1 1d       	adc	r26, r1
    1a22:	68 0f       	add	r22, r24
    1a24:	79 1f       	adc	r23, r25
    1a26:	8a 1f       	adc	r24, r26
    1a28:	91 1d       	adc	r25, r1
    1a2a:	a1 1d       	adc	r26, r1
    1a2c:	6a 0f       	add	r22, r26
    1a2e:	71 1d       	adc	r23, r1
    1a30:	81 1d       	adc	r24, r1
    1a32:	91 1d       	adc	r25, r1
    1a34:	a1 1d       	adc	r26, r1
    1a36:	20 d0       	rcall	.+64     	; 0x1a78 <__ultoa_invert+0x84>
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <__ultoa_invert+0x48>
    1a3a:	68 94       	set
    1a3c:	3f 91       	pop	r19
    1a3e:	2a e0       	ldi	r18, 0x0A	; 10
    1a40:	26 9f       	mul	r18, r22
    1a42:	11 24       	eor	r1, r1
    1a44:	30 19       	sub	r19, r0
    1a46:	30 5d       	subi	r19, 0xD0	; 208
    1a48:	31 93       	st	Z+, r19
    1a4a:	de f6       	brtc	.-74     	; 0x1a02 <__ultoa_invert+0xe>
    1a4c:	cf 01       	movw	r24, r30
    1a4e:	08 95       	ret
    1a50:	46 2f       	mov	r20, r22
    1a52:	47 70       	andi	r20, 0x07	; 7
    1a54:	40 5d       	subi	r20, 0xD0	; 208
    1a56:	41 93       	st	Z+, r20
    1a58:	b3 e0       	ldi	r27, 0x03	; 3
    1a5a:	0f d0       	rcall	.+30     	; 0x1a7a <__ultoa_invert+0x86>
    1a5c:	c9 f7       	brne	.-14     	; 0x1a50 <__ultoa_invert+0x5c>
    1a5e:	f6 cf       	rjmp	.-20     	; 0x1a4c <__ultoa_invert+0x58>
    1a60:	46 2f       	mov	r20, r22
    1a62:	4f 70       	andi	r20, 0x0F	; 15
    1a64:	40 5d       	subi	r20, 0xD0	; 208
    1a66:	4a 33       	cpi	r20, 0x3A	; 58
    1a68:	18 f0       	brcs	.+6      	; 0x1a70 <__ultoa_invert+0x7c>
    1a6a:	49 5d       	subi	r20, 0xD9	; 217
    1a6c:	31 fd       	sbrc	r19, 1
    1a6e:	40 52       	subi	r20, 0x20	; 32
    1a70:	41 93       	st	Z+, r20
    1a72:	02 d0       	rcall	.+4      	; 0x1a78 <__ultoa_invert+0x84>
    1a74:	a9 f7       	brne	.-22     	; 0x1a60 <__ultoa_invert+0x6c>
    1a76:	ea cf       	rjmp	.-44     	; 0x1a4c <__ultoa_invert+0x58>
    1a78:	b4 e0       	ldi	r27, 0x04	; 4
    1a7a:	a6 95       	lsr	r26
    1a7c:	97 95       	ror	r25
    1a7e:	87 95       	ror	r24
    1a80:	77 95       	ror	r23
    1a82:	67 95       	ror	r22
    1a84:	ba 95       	dec	r27
    1a86:	c9 f7       	brne	.-14     	; 0x1a7a <__ultoa_invert+0x86>
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	61 05       	cpc	r22, r1
    1a8c:	71 05       	cpc	r23, r1
    1a8e:	08 95       	ret
    1a90:	9b 01       	movw	r18, r22
    1a92:	ac 01       	movw	r20, r24
    1a94:	0a 2e       	mov	r0, r26
    1a96:	06 94       	lsr	r0
    1a98:	57 95       	ror	r21
    1a9a:	47 95       	ror	r20
    1a9c:	37 95       	ror	r19
    1a9e:	27 95       	ror	r18
    1aa0:	ba 95       	dec	r27
    1aa2:	c9 f7       	brne	.-14     	; 0x1a96 <__ultoa_invert+0xa2>
    1aa4:	62 0f       	add	r22, r18
    1aa6:	73 1f       	adc	r23, r19
    1aa8:	84 1f       	adc	r24, r20
    1aaa:	95 1f       	adc	r25, r21
    1aac:	a0 1d       	adc	r26, r0
    1aae:	08 95       	ret

00001ab0 <__prologue_saves__>:
    1ab0:	2f 92       	push	r2
    1ab2:	3f 92       	push	r3
    1ab4:	4f 92       	push	r4
    1ab6:	5f 92       	push	r5
    1ab8:	6f 92       	push	r6
    1aba:	7f 92       	push	r7
    1abc:	8f 92       	push	r8
    1abe:	9f 92       	push	r9
    1ac0:	af 92       	push	r10
    1ac2:	bf 92       	push	r11
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	ca 1b       	sub	r28, r26
    1ada:	db 0b       	sbc	r29, r27
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	09 94       	ijmp

00001ae8 <__epilogue_restores__>:
    1ae8:	2a 88       	ldd	r2, Y+18	; 0x12
    1aea:	39 88       	ldd	r3, Y+17	; 0x11
    1aec:	48 88       	ldd	r4, Y+16	; 0x10
    1aee:	5f 84       	ldd	r5, Y+15	; 0x0f
    1af0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1af2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1af4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1af6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1af8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1afa:	b9 84       	ldd	r11, Y+9	; 0x09
    1afc:	c8 84       	ldd	r12, Y+8	; 0x08
    1afe:	df 80       	ldd	r13, Y+7	; 0x07
    1b00:	ee 80       	ldd	r14, Y+6	; 0x06
    1b02:	fd 80       	ldd	r15, Y+5	; 0x05
    1b04:	0c 81       	ldd	r16, Y+4	; 0x04
    1b06:	1b 81       	ldd	r17, Y+3	; 0x03
    1b08:	aa 81       	ldd	r26, Y+2	; 0x02
    1b0a:	b9 81       	ldd	r27, Y+1	; 0x01
    1b0c:	ce 0f       	add	r28, r30
    1b0e:	d1 1d       	adc	r29, r1
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	ed 01       	movw	r28, r26
    1b1c:	08 95       	ret

00001b1e <_exit>:
    1b1e:	f8 94       	cli

00001b20 <__stop_program>:
    1b20:	ff cf       	rjmp	.-2      	; 0x1b20 <__stop_program>
