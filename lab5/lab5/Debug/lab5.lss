
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000cce  00000d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800126  00800126  00000d88  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a1f  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dac  00000000  00000000  00002a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ecf  00000000  00000000  0000381b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000480  00000000  00000000  000046ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000081c  00000000  00000000  00004b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d7d  00000000  00000000  00005388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00006105  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee ec       	ldi	r30, 0xCE	; 206
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 32       	cpi	r26, 0x26	; 38
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e2       	ldi	r26, 0x26	; 38
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 33       	cpi	r26, 0x32	; 50
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 a4 01 	call	0x348	; 0x348 <main>
  a6:	0c 94 65 06 	jmp	0xcca	; 0xcca <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <btn_init>:
  ae:	b8 98       	cbi	0x17, 0	; 23
  b0:	b9 98       	cbi	0x17, 1	; 23
  b2:	08 95       	ret

000000b4 <INTERRUPT_init>:
volatile int ADC_INTERRUPT_READY = 0;
//volatile int SPI_TRANSMISSION_COMPLETE = 0;

void INTERRUPT_init() {
	// Enable global interrupts (set SREG register)
	sei();
  b4:	78 94       	sei
	
	// Enable that a falling edge generates an interrupt request for INT0
	MCUCR |= (1 << ISC01);
  b6:	85 b7       	in	r24, 0x35	; 53
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	8e 7f       	andi	r24, 0xFE	; 254
  c0:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC11);
	MCUCR |= (1 << ISC10);	
	*/
	
	// Enable interrupt on INT0 (ADC) and INT1 (MCP)
	GICR |= (1 << INT0);
  c2:	8b b7       	in	r24, 0x3b	; 59
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	8b bf       	out	0x3b, r24	; 59
  c8:	08 95       	ret

000000ca <__vector_1>:
//	GICR |= (1 << INT1); 
}

// Interrupt for ADC
ISR(INT0_vect) {
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	// Disable global interrupts while executing an ISR (?)
	//cli();
	ADC_INTERRUPT_READY = 1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
  e0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
	// Reset interrupt flag
	//GIFR &= ~(1 << INTF0);
	//GIFR |= (1 << INTF0);
	//printf("routine finished\n\r");
	//sei();
}
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <MCP_reset>:
#include "spi.h"
#include <avr/io.h>

void MCP_init(void) {
	SPI_MasterInit();
	MCP_reset();
  f2:	c4 98       	cbi	0x18, 4	; 24
  f4:	80 ec       	ldi	r24, 0xC0	; 192
  f6:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_transmit>
  fa:	c4 9a       	sbi	0x18, 4	; 24
  fc:	08 95       	ret

000000fe <MCP_read>:
	// End data transmission
	PORTB |= (1 << PB4);
}


uint8_t MCP_read(uint8_t address) {
  fe:	cf 93       	push	r28
 100:	c8 2f       	mov	r28, r24
	uint8_t data;
	
	// Select CAN controller
	PORTB &= ~(1 << PB4);
 102:	c4 98       	cbi	0x18, 4	; 24
	
	// Send READ instruction
	SPI_transmit(MCP_READ);
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_transmit>
	
	// Send address
	SPI_transmit(address);
 10a:	8c 2f       	mov	r24, r28
 10c:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_transmit>
	
	// Read from address specified over
	data = SPI_read();
 110:	0e 94 71 01 	call	0x2e2	; 0x2e2 <SPI_read>
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
 114:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;
	
}
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <MCP_write>:

void MCP_write(uint8_t address, uint8_t data) {
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	d8 2f       	mov	r29, r24
 120:	c6 2f       	mov	r28, r22
	// Select CAN controller
	PORTB &= ~(1 << PB4);
 122:	c4 98       	cbi	0x18, 4	; 24
	
	// Send WRITE instruction
	SPI_transmit(MCP_WRITE);
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_transmit>
	
	// Send address
	SPI_transmit(address);
 12a:	8d 2f       	mov	r24, r29
 12c:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_transmit>
	
	// Send data
	SPI_transmit(data);
 130:	8c 2f       	mov	r24, r28
 132:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_transmit>
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
 136:	c4 9a       	sbi	0x18, 4	; 24
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <OLED_init>:
	uint16_t index = 0x800 + page*128 + x;
	uint8_t value = XMEM_read(index);
	value &= ~(1 << height);
	XMEM_write(value, index);
	}
}
 13e:	6e ea       	ldi	r22, 0xAE	; 174
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	8e ea       	ldi	r24, 0xAE	; 174
 144:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 148:	61 ea       	ldi	r22, 0xA1	; 161
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	81 ea       	ldi	r24, 0xA1	; 161
 14e:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 152:	6a ed       	ldi	r22, 0xDA	; 218
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	8a ed       	ldi	r24, 0xDA	; 218
 158:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 15c:	62 e1       	ldi	r22, 0x12	; 18
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	82 e1       	ldi	r24, 0x12	; 18
 162:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 166:	68 ec       	ldi	r22, 0xC8	; 200
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	88 ec       	ldi	r24, 0xC8	; 200
 16c:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 170:	68 ea       	ldi	r22, 0xA8	; 168
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	88 ea       	ldi	r24, 0xA8	; 168
 176:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 17a:	6f e3       	ldi	r22, 0x3F	; 63
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 184:	65 ed       	ldi	r22, 0xD5	; 213
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	85 ed       	ldi	r24, 0xD5	; 213
 18a:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 18e:	60 e8       	ldi	r22, 0x80	; 128
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 198:	61 e8       	ldi	r22, 0x81	; 129
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	81 e8       	ldi	r24, 0x81	; 129
 19e:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 1a2:	60 e5       	ldi	r22, 0x50	; 80
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	80 e5       	ldi	r24, 0x50	; 80
 1a8:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 1ac:	69 ed       	ldi	r22, 0xD9	; 217
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	89 ed       	ldi	r24, 0xD9	; 217
 1b2:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 1b6:	61 e2       	ldi	r22, 0x21	; 33
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	81 e2       	ldi	r24, 0x21	; 33
 1bc:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 1c0:	60 e2       	ldi	r22, 0x20	; 32
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	80 e2       	ldi	r24, 0x20	; 32
 1c6:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 1d4:	6b ed       	ldi	r22, 0xDB	; 219
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	8b ed       	ldi	r24, 0xDB	; 219
 1da:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 1de:	60 e3       	ldi	r22, 0x30	; 48
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	80 e3       	ldi	r24, 0x30	; 48
 1e4:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 1e8:	6d ea       	ldi	r22, 0xAD	; 173
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	8d ea       	ldi	r24, 0xAD	; 173
 1ee:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 1fc:	64 ea       	ldi	r22, 0xA4	; 164
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	84 ea       	ldi	r24, 0xA4	; 164
 202:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 206:	66 ea       	ldi	r22, 0xA6	; 166
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	86 ea       	ldi	r24, 0xA6	; 166
 20c:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 210:	63 ed       	ldi	r22, 0xD3	; 211
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	83 ed       	ldi	r24, 0xD3	; 211
 216:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 224:	6f ea       	ldi	r22, 0xAF	; 175
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	8f ea       	ldi	r24, 0xAF	; 175
 22a:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 22e:	08 95       	ret

00000230 <OLED_refresh>:


void OLED_refresh(void){
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	c0 e0       	ldi	r28, 0x00	; 0
 23e:	d8 e0       	ldi	r29, 0x08	; 8
 240:	0f 2e       	mov	r0, r31
 242:	f0 eb       	ldi	r31, 0xB0	; 176
 244:	ef 2e       	mov	r14, r31
 246:	f1 2c       	mov	r15, r1
 248:	f0 2d       	mov	r31, r0
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
 24a:	b7 01       	movw	r22, r14
 24c:	8e 2d       	mov	r24, r14
 24e:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
		XMEM_write(0, 0);		// Set lower column start address
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
		XMEM_write(0x10, 0x10);  // Set data register
 25c:	60 e1       	ldi	r22, 0x10	; 16
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	80 e1       	ldi	r24, 0x10	; 16
 262:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 266:	8e 01       	movw	r16, r28
 268:	00 58       	subi	r16, 0x80	; 128
 26a:	1f 4f       	sbci	r17, 0xFF	; 255
		for (int column = 0; column < 128; column++){
			uint8_t SRAMvalue = XMEM_read(0x800 + page*128 + column);
 26c:	ce 01       	movw	r24, r28
 26e:	0e 94 9c 01 	call	0x338	; 0x338 <XMEM_read>
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
 272:	68 2f       	mov	r22, r24
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	7e 5f       	subi	r23, 0xFE	; 254
 278:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
 27c:	21 96       	adiw	r28, 0x01	; 1
void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
		XMEM_write(0, 0);		// Set lower column start address
		XMEM_write(0x10, 0x10);  // Set data register
		for (int column = 0; column < 128; column++){
 27e:	c0 17       	cp	r28, r16
 280:	d1 07       	cpc	r29, r17
 282:	a1 f7       	brne	.-24     	; 0x26c <OLED_refresh+0x3c>
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	e8 1a       	sub	r14, r24
 288:	f8 0a       	sbc	r15, r24
 28a:	e8 01       	movw	r28, r16
	}
}


void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
 28c:	01 15       	cp	r16, r1
 28e:	1c 40       	sbci	r17, 0x0C	; 12
 290:	e1 f6       	brne	.-72     	; 0x24a <OLED_refresh+0x1a>
		for (int column = 0; column < 128; column++){
			uint8_t SRAMvalue = XMEM_read(0x800 + page*128 + column);
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
		}
	}
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	ff 90       	pop	r15
 29c:	ef 90       	pop	r14
 29e:	08 95       	ret

000002a0 <OLED_clearAll>:


void OLED_clearAll(void) {
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
	for (uint16_t index = 0x800; index < 0x800 + 1024; index++){
 2a4:	c0 e0       	ldi	r28, 0x00	; 0
 2a6:	d8 e0       	ldi	r29, 0x08	; 8
		XMEM_write(0, index);
 2a8:	be 01       	movw	r22, r28
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 a0 01 	call	0x340	; 0x340 <XMEM_write>
	}
}


void OLED_clearAll(void) {
	for (uint16_t index = 0x800; index < 0x800 + 1024; index++){
 2b0:	21 96       	adiw	r28, 0x01	; 1
 2b2:	c1 15       	cp	r28, r1
 2b4:	8c e0       	ldi	r24, 0x0C	; 12
 2b6:	d8 07       	cpc	r29, r24
 2b8:	b9 f7       	brne	.-18     	; 0x2a8 <OLED_clearAll+0x8>
		XMEM_write(0, index);
	}
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <SPI_MasterInit>:
#include "interrupt.h"
#include <avr/io.h>

void SPI_MasterInit(void) {
	// Set PB4 (/SS), PB5 (MOSI) and PB7 (SCK) as output
	DDRB |= (1 << DDB4) | (1 << DDB5) | (1 << DDB7);
 2c0:	87 b3       	in	r24, 0x17	; 23
 2c2:	80 6b       	ori	r24, 0xB0	; 176
 2c4:	87 bb       	out	0x17, r24	; 23
	// Set PB6 (MISO) as input
	DDRB &= ~(1 << DDB6);
 2c6:	be 98       	cbi	0x17, 6	; 23
	
	// Select Master SPI mode, SPI enable, SPI interrupt enable (Global interrupts must be enabled)
	SPCR |= (1 << MSTR) | (1 << SPE); //| (1 << SPIE);
 2c8:	8d b1       	in	r24, 0x0d	; 13
 2ca:	80 65       	ori	r24, 0x50	; 80
 2cc:	8d b9       	out	0x0d, r24	; 13
		Alternatively, the SPIF bit is cleared by first reading the
		SPI Status Register with SPIF set, then accessing the SPI Data Register (SPDR).
	*/
	
	// Transmit MSB of the data word first
	SPCR &= ~(1 << DORD);
 2ce:	6d 98       	cbi	0x0d, 5	; 13
	
	// Configure clock polarity (SCK is low when idle)
	SPCR &= ~(1 << CPOL);
 2d0:	6b 98       	cbi	0x0d, 3	; 13
	
	// Configure clock phase (data is sampled on leading edge)
	SPCR &= ~(1 << CPHA);
 2d2:	6a 98       	cbi	0x0d, 2	; 13
	
	// Configure SCK rate (f_osc/4)
	SPCR &= ~(1 << SPR0);
 2d4:	68 98       	cbi	0x0d, 0	; 13
	SPCR &= ~(1 << SPR1);
 2d6:	69 98       	cbi	0x0d, 1	; 13
 2d8:	08 95       	ret

000002da <SPI_transmit>:
}

void SPI_transmit(uint8_t data) {
	// Initiate data transmission
	SPDR = data;
 2da:	8f b9       	out	0x0f, r24	; 15
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
 2dc:	77 9b       	sbis	0x0e, 7	; 14
 2de:	fe cf       	rjmp	.-4      	; 0x2dc <SPI_transmit+0x2>
	// Wait for ISR to be handled (meaning: wait for the transmission to complete)
	while (!SPI_TRANSMISSION_COMPLETE);
	
	SPI_TRANSMISSION_COMPLETE = 0;
	*/
}	
 2e0:	08 95       	ret

000002e2 <SPI_read>:

uint8_t SPI_read(void) {
	SPDR = 0xFF; // Send dummy byte
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	8f b9       	out	0x0f, r24	; 15
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
 2e6:	77 9b       	sbis	0x0e, 7	; 14
 2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <SPI_read+0x4>
	while (!SPI_TRANSMISSION_COMPLETE);
	
	SPI_TRANSMISSION_COMPLETE = 0;
	*/
	
	return SPDR;
 2ea:	8f b1       	in	r24, 0x0f	; 15
	// SPIF bit in SPSR register is reset when accessing SPDR
}
 2ec:	08 95       	ret

000002ee <timer_8bit256divisionCheckOnlyinit>:
#define F_CPU 4915200

void timer_8bit256divisionCheckOnlyinit(void) {

	// start the timer
	TCCR0 = 0b00000101;
 2ee:	85 e0       	ldi	r24, 0x05	; 5
 2f0:	83 bf       	out	0x33, r24	; 51
	// set prescaler to 256 and start the timer
	TIMSK &= ~(1 << OCIE0 | 1 << TOIE0);
 2f2:	89 b7       	in	r24, 0x39	; 57
 2f4:	8c 7f       	andi	r24, 0xFC	; 252
 2f6:	89 bf       	out	0x39, r24	; 57
 2f8:	08 95       	ret

000002fa <UART_transmit>:
#include <util/delay.h>
#include "uart.h"

void UART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while ( ! (UCSR0A & (1<<UDRE0))) {
 2fa:	5d 9b       	sbis	0x0b, 5	; 11
 2fc:	fe cf       	rjmp	.-4      	; 0x2fa <UART_transmit>
		// waiting...
	}
	// Put data into buffer, sends the data
	UDR0 = data;
 2fe:	8c b9       	out	0x0c, r24	; 12
 300:	08 95       	ret

00000302 <UART_receive>:
}

unsigned char UART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1 << RXC0))) {
 302:	5f 9b       	sbis	0x0b, 7	; 11
 304:	fe cf       	rjmp	.-4      	; 0x302 <UART_receive>
		// wait...
	}
	return UDR0;
 306:	8c b1       	in	r24, 0x0c	; 12
	
}
 308:	08 95       	ret

0000030a <UART_init>:

void UART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = ubrr>>8;
 30a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = ubrr;
 30c:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 30e:	88 e1       	ldi	r24, 0x18	; 24
 310:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 312:	8e e8       	ldi	r24, 0x8E	; 142
 314:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(UART_transmit, UART_receive);
 316:	61 e8       	ldi	r22, 0x81	; 129
 318:	71 e0       	ldi	r23, 0x01	; 1
 31a:	8d e7       	ldi	r24, 0x7D	; 125
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <fdevopen>
 322:	08 95       	ret

00000324 <XMEM_init>:
#include "uart.h"
#define BASE_ADDRESS 0x1000

void XMEM_init(void) {
	// Enable XMEM
	MCUCR |= (1 << SRE);
 324:	85 b7       	in	r24, 0x35	; 53
 326:	80 68       	ori	r24, 0x80	; 128
 328:	85 bf       	out	0x35, r24	; 53
	
	// SFIOR = XX100XXX
	// We use PC7-PC4 for JTAG, NOT for XMEM address
	SFIOR |= (1 << XMM2);
 32a:	80 b7       	in	r24, 0x30	; 48
 32c:	80 62       	ori	r24, 0x20	; 32
 32e:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~((1 << XMM1) | (1 << XMM0));
 330:	80 b7       	in	r24, 0x30	; 48
 332:	87 7e       	andi	r24, 0xE7	; 231
 334:	80 bf       	out	0x30, r24	; 48
 336:	08 95       	ret

00000338 <XMEM_read>:
}

uint8_t XMEM_read(uint16_t address) {
	volatile uint8_t *ext_mem = (uint8_t*) BASE_ADDRESS;
	return ext_mem[address];
 338:	90 5f       	subi	r25, 0xF0	; 240
 33a:	fc 01       	movw	r30, r24
 33c:	80 81       	ld	r24, Z
}
 33e:	08 95       	ret

00000340 <XMEM_write>:

void XMEM_write(uint8_t data, uint16_t address) {
	volatile uint8_t *ext_mem = (uint8_t *) BASE_ADDRESS;
	ext_mem[address] = data;
 340:	fb 01       	movw	r30, r22
 342:	f0 5f       	subi	r31, 0xF0	; 240
 344:	80 83       	st	Z, r24
 346:	08 95       	ret

00000348 <main>:
#define MYUBRR 31


int main(void)
{
	UART_init(MYUBRR);
 348:	8f e1       	ldi	r24, 0x1F	; 31
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 85 01 	call	0x30a	; 0x30a <UART_init>
	XMEM_init();
 350:	0e 94 92 01 	call	0x324	; 0x324 <XMEM_init>
	INTERRUPT_init();
 354:	0e 94 5a 00 	call	0xb4	; 0xb4 <INTERRUPT_init>
	btn_init();
 358:	0e 94 57 00 	call	0xae	; 0xae <btn_init>
	printf("Starting.... \n\r");
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	9f 93       	push	r25
 362:	8f 93       	push	r24
 364:	0e 94 43 02 	call	0x486	; 0x486 <printf>
	timer_8bit256divisionCheckOnlyinit();
 368:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer_8bit256divisionCheckOnlyinit>
	SPI_MasterInit();
 36c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <SPI_MasterInit>

	
	
	OLED_init();
 370:	0e 94 9f 00 	call	0x13e	; 0x13e <OLED_init>
	OLED_clearAll();
 374:	0e 94 50 01 	call	0x2a0	; 0x2a0 <OLED_clearAll>
	OLED_refresh();
 378:	0e 94 18 01 	call	0x230	; 0x230 <OLED_refresh>
 37c:	0f 90       	pop	r0
 37e:	0f 90       	pop	r0
		*/
		
		// Testing CAN controller
		MCP_write(MCP_RXF0SIDH, 171);
		_delay_ms(10);
		printf("MCP_read = %d\n\r", MCP_read(MCP_RXF0SIDH));
 380:	c6 e1       	ldi	r28, 0x16	; 22
 382:	d1 e0       	ldi	r29, 0x01	; 1
		SPI_transmit(0x55);
		_delay_ms(500);
		*/
		
		// Testing CAN controller
		MCP_write(MCP_RXF0SIDH, 171);
 384:	6b ea       	ldi	r22, 0xAB	; 171
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 8d 00 	call	0x11a	; 0x11a <MCP_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	9f e2       	ldi	r25, 0x2F	; 47
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <main+0x48>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x4e>
 396:	00 00       	nop
		_delay_ms(10);
		printf("MCP_read = %d\n\r", MCP_read(MCP_RXF0SIDH));
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 7f 00 	call	0xfe	; 0xfe <MCP_read>
 39e:	1f 92       	push	r1
 3a0:	8f 93       	push	r24
 3a2:	df 93       	push	r29
 3a4:	cf 93       	push	r28
 3a6:	0e 94 43 02 	call	0x486	; 0x486 <printf>
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	9f e2       	ldi	r25, 0x2F	; 47
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <main+0x66>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0x6c>
 3b4:	00 00       	nop
		_delay_ms(10);
		MCP_reset();
 3b6:	0e 94 79 00 	call	0xf2	; 0xf2 <MCP_reset>
		printf("MCP_read = %d\n\r", MCP_read(MCP_RXF0SIDH));
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 7f 00 	call	0xfe	; 0xfe <MCP_read>
 3c0:	1f 92       	push	r1
 3c2:	8f 93       	push	r24
 3c4:	df 93       	push	r29
 3c6:	cf 93       	push	r28
 3c8:	0e 94 43 02 	call	0x486	; 0x486 <printf>
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	9f e7       	ldi	r25, 0x7F	; 127
 3d0:	27 e0       	ldi	r18, 0x07	; 7
 3d2:	81 50       	subi	r24, 0x01	; 1
 3d4:	90 40       	sbci	r25, 0x00	; 0
 3d6:	20 40       	sbci	r18, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0x8a>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0x94>
 3dc:	00 00       	nop
 3de:	8d b7       	in	r24, 0x3d	; 61
 3e0:	9e b7       	in	r25, 0x3e	; 62
 3e2:	08 96       	adiw	r24, 0x08	; 8
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	9e bf       	out	0x3e, r25	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	8d bf       	out	0x3d, r24	; 61
 3ee:	ca cf       	rjmp	.-108    	; 0x384 <main+0x3c>

000003f0 <fdevopen>:
 3f0:	0f 93       	push	r16
 3f2:	1f 93       	push	r17
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	00 97       	sbiw	r24, 0x00	; 0
 3fa:	31 f4       	brne	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fc:	61 15       	cp	r22, r1
 3fe:	71 05       	cpc	r23, r1
 400:	19 f4       	brne	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	3a c0       	rjmp	.+116    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 408:	8b 01       	movw	r16, r22
 40a:	ec 01       	movw	r28, r24
 40c:	6e e0       	ldi	r22, 0x0E	; 14
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 3a 04 	call	0x874	; 0x874 <calloc>
 418:	fc 01       	movw	r30, r24
 41a:	89 2b       	or	r24, r25
 41c:	91 f3       	breq	.-28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 41e:	80 e8       	ldi	r24, 0x80	; 128
 420:	83 83       	std	Z+3, r24	; 0x03
 422:	01 15       	cp	r16, r1
 424:	11 05       	cpc	r17, r1
 426:	71 f0       	breq	.+28     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 428:	13 87       	std	Z+11, r17	; 0x0b
 42a:	02 87       	std	Z+10, r16	; 0x0a
 42c:	81 e8       	ldi	r24, 0x81	; 129
 42e:	83 83       	std	Z+3, r24	; 0x03
 430:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__iob>
 434:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__iob+0x1>
 438:	89 2b       	or	r24, r25
 43a:	21 f4       	brne	.+8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43c:	f0 93 29 01 	sts	0x0129, r31	; 0x800129 <__iob+0x1>
 440:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <__iob>
 444:	20 97       	sbiw	r28, 0x00	; 0
 446:	c9 f0       	breq	.+50     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 448:	d1 87       	std	Z+9, r29	; 0x09
 44a:	c0 87       	std	Z+8, r28	; 0x08
 44c:	83 81       	ldd	r24, Z+3	; 0x03
 44e:	82 60       	ori	r24, 0x02	; 2
 450:	83 83       	std	Z+3, r24	; 0x03
 452:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__iob+0x2>
 456:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__iob+0x3>
 45a:	89 2b       	or	r24, r25
 45c:	71 f4       	brne	.+28     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 45e:	f0 93 2b 01 	sts	0x012B, r31	; 0x80012b <__iob+0x3>
 462:	e0 93 2a 01 	sts	0x012A, r30	; 0x80012a <__iob+0x2>
 466:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__iob+0x4>
 46a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <__iob+0x5>
 46e:	89 2b       	or	r24, r25
 470:	21 f4       	brne	.+8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 472:	f0 93 2d 01 	sts	0x012D, r31	; 0x80012d <__iob+0x5>
 476:	e0 93 2c 01 	sts	0x012C, r30	; 0x80012c <__iob+0x4>
 47a:	cf 01       	movw	r24, r30
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	08 95       	ret

00000486 <printf>:
 486:	a0 e0       	ldi	r26, 0x00	; 0
 488:	b0 e0       	ldi	r27, 0x00	; 0
 48a:	e9 e4       	ldi	r30, 0x49	; 73
 48c:	f2 e0       	ldi	r31, 0x02	; 2
 48e:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__prologue_saves__+0x20>
 492:	ae 01       	movw	r20, r28
 494:	4b 5f       	subi	r20, 0xFB	; 251
 496:	5f 4f       	sbci	r21, 0xFF	; 255
 498:	fa 01       	movw	r30, r20
 49a:	61 91       	ld	r22, Z+
 49c:	71 91       	ld	r23, Z+
 49e:	af 01       	movw	r20, r30
 4a0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__iob+0x2>
 4a4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__iob+0x3>
 4a8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <vfprintf>
 4ac:	e2 e0       	ldi	r30, 0x02	; 2
 4ae:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__epilogue_restores__+0x20>

000004b2 <vfprintf>:
 4b2:	ab e0       	ldi	r26, 0x0B	; 11
 4b4:	b0 e0       	ldi	r27, 0x00	; 0
 4b6:	ef e5       	ldi	r30, 0x5F	; 95
 4b8:	f2 e0       	ldi	r31, 0x02	; 2
 4ba:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__prologue_saves__>
 4be:	6c 01       	movw	r12, r24
 4c0:	7b 01       	movw	r14, r22
 4c2:	8a 01       	movw	r16, r20
 4c4:	fc 01       	movw	r30, r24
 4c6:	17 82       	std	Z+7, r1	; 0x07
 4c8:	16 82       	std	Z+6, r1	; 0x06
 4ca:	83 81       	ldd	r24, Z+3	; 0x03
 4cc:	81 ff       	sbrs	r24, 1
 4ce:	cc c1       	rjmp	.+920    	; 0x868 <__stack+0x369>
 4d0:	ce 01       	movw	r24, r28
 4d2:	01 96       	adiw	r24, 0x01	; 1
 4d4:	3c 01       	movw	r6, r24
 4d6:	f6 01       	movw	r30, r12
 4d8:	93 81       	ldd	r25, Z+3	; 0x03
 4da:	f7 01       	movw	r30, r14
 4dc:	93 fd       	sbrc	r25, 3
 4de:	85 91       	lpm	r24, Z+
 4e0:	93 ff       	sbrs	r25, 3
 4e2:	81 91       	ld	r24, Z+
 4e4:	7f 01       	movw	r14, r30
 4e6:	88 23       	and	r24, r24
 4e8:	09 f4       	brne	.+2      	; 0x4ec <vfprintf+0x3a>
 4ea:	ba c1       	rjmp	.+884    	; 0x860 <__stack+0x361>
 4ec:	85 32       	cpi	r24, 0x25	; 37
 4ee:	39 f4       	brne	.+14     	; 0x4fe <vfprintf+0x4c>
 4f0:	93 fd       	sbrc	r25, 3
 4f2:	85 91       	lpm	r24, Z+
 4f4:	93 ff       	sbrs	r25, 3
 4f6:	81 91       	ld	r24, Z+
 4f8:	7f 01       	movw	r14, r30
 4fa:	85 32       	cpi	r24, 0x25	; 37
 4fc:	29 f4       	brne	.+10     	; 0x508 <__stack+0x9>
 4fe:	b6 01       	movw	r22, r12
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 94 05 	call	0xb28	; 0xb28 <fputc>
 506:	e7 cf       	rjmp	.-50     	; 0x4d6 <vfprintf+0x24>
 508:	91 2c       	mov	r9, r1
 50a:	21 2c       	mov	r2, r1
 50c:	31 2c       	mov	r3, r1
 50e:	ff e1       	ldi	r31, 0x1F	; 31
 510:	f3 15       	cp	r31, r3
 512:	d8 f0       	brcs	.+54     	; 0x54a <__stack+0x4b>
 514:	8b 32       	cpi	r24, 0x2B	; 43
 516:	79 f0       	breq	.+30     	; 0x536 <__stack+0x37>
 518:	38 f4       	brcc	.+14     	; 0x528 <__stack+0x29>
 51a:	80 32       	cpi	r24, 0x20	; 32
 51c:	79 f0       	breq	.+30     	; 0x53c <__stack+0x3d>
 51e:	83 32       	cpi	r24, 0x23	; 35
 520:	a1 f4       	brne	.+40     	; 0x54a <__stack+0x4b>
 522:	23 2d       	mov	r18, r3
 524:	20 61       	ori	r18, 0x10	; 16
 526:	1d c0       	rjmp	.+58     	; 0x562 <__stack+0x63>
 528:	8d 32       	cpi	r24, 0x2D	; 45
 52a:	61 f0       	breq	.+24     	; 0x544 <__stack+0x45>
 52c:	80 33       	cpi	r24, 0x30	; 48
 52e:	69 f4       	brne	.+26     	; 0x54a <__stack+0x4b>
 530:	23 2d       	mov	r18, r3
 532:	21 60       	ori	r18, 0x01	; 1
 534:	16 c0       	rjmp	.+44     	; 0x562 <__stack+0x63>
 536:	83 2d       	mov	r24, r3
 538:	82 60       	ori	r24, 0x02	; 2
 53a:	38 2e       	mov	r3, r24
 53c:	e3 2d       	mov	r30, r3
 53e:	e4 60       	ori	r30, 0x04	; 4
 540:	3e 2e       	mov	r3, r30
 542:	2a c0       	rjmp	.+84     	; 0x598 <__stack+0x99>
 544:	f3 2d       	mov	r31, r3
 546:	f8 60       	ori	r31, 0x08	; 8
 548:	1d c0       	rjmp	.+58     	; 0x584 <__stack+0x85>
 54a:	37 fc       	sbrc	r3, 7
 54c:	2d c0       	rjmp	.+90     	; 0x5a8 <__stack+0xa9>
 54e:	20 ed       	ldi	r18, 0xD0	; 208
 550:	28 0f       	add	r18, r24
 552:	2a 30       	cpi	r18, 0x0A	; 10
 554:	40 f0       	brcs	.+16     	; 0x566 <__stack+0x67>
 556:	8e 32       	cpi	r24, 0x2E	; 46
 558:	b9 f4       	brne	.+46     	; 0x588 <__stack+0x89>
 55a:	36 fc       	sbrc	r3, 6
 55c:	81 c1       	rjmp	.+770    	; 0x860 <__stack+0x361>
 55e:	23 2d       	mov	r18, r3
 560:	20 64       	ori	r18, 0x40	; 64
 562:	32 2e       	mov	r3, r18
 564:	19 c0       	rjmp	.+50     	; 0x598 <__stack+0x99>
 566:	36 fe       	sbrs	r3, 6
 568:	06 c0       	rjmp	.+12     	; 0x576 <__stack+0x77>
 56a:	8a e0       	ldi	r24, 0x0A	; 10
 56c:	98 9e       	mul	r9, r24
 56e:	20 0d       	add	r18, r0
 570:	11 24       	eor	r1, r1
 572:	92 2e       	mov	r9, r18
 574:	11 c0       	rjmp	.+34     	; 0x598 <__stack+0x99>
 576:	ea e0       	ldi	r30, 0x0A	; 10
 578:	2e 9e       	mul	r2, r30
 57a:	20 0d       	add	r18, r0
 57c:	11 24       	eor	r1, r1
 57e:	22 2e       	mov	r2, r18
 580:	f3 2d       	mov	r31, r3
 582:	f0 62       	ori	r31, 0x20	; 32
 584:	3f 2e       	mov	r3, r31
 586:	08 c0       	rjmp	.+16     	; 0x598 <__stack+0x99>
 588:	8c 36       	cpi	r24, 0x6C	; 108
 58a:	21 f4       	brne	.+8      	; 0x594 <__stack+0x95>
 58c:	83 2d       	mov	r24, r3
 58e:	80 68       	ori	r24, 0x80	; 128
 590:	38 2e       	mov	r3, r24
 592:	02 c0       	rjmp	.+4      	; 0x598 <__stack+0x99>
 594:	88 36       	cpi	r24, 0x68	; 104
 596:	41 f4       	brne	.+16     	; 0x5a8 <__stack+0xa9>
 598:	f7 01       	movw	r30, r14
 59a:	93 fd       	sbrc	r25, 3
 59c:	85 91       	lpm	r24, Z+
 59e:	93 ff       	sbrs	r25, 3
 5a0:	81 91       	ld	r24, Z+
 5a2:	7f 01       	movw	r14, r30
 5a4:	81 11       	cpse	r24, r1
 5a6:	b3 cf       	rjmp	.-154    	; 0x50e <__stack+0xf>
 5a8:	98 2f       	mov	r25, r24
 5aa:	9f 7d       	andi	r25, 0xDF	; 223
 5ac:	95 54       	subi	r25, 0x45	; 69
 5ae:	93 30       	cpi	r25, 0x03	; 3
 5b0:	28 f4       	brcc	.+10     	; 0x5bc <__stack+0xbd>
 5b2:	0c 5f       	subi	r16, 0xFC	; 252
 5b4:	1f 4f       	sbci	r17, 0xFF	; 255
 5b6:	9f e3       	ldi	r25, 0x3F	; 63
 5b8:	99 83       	std	Y+1, r25	; 0x01
 5ba:	0d c0       	rjmp	.+26     	; 0x5d6 <__stack+0xd7>
 5bc:	83 36       	cpi	r24, 0x63	; 99
 5be:	31 f0       	breq	.+12     	; 0x5cc <__stack+0xcd>
 5c0:	83 37       	cpi	r24, 0x73	; 115
 5c2:	71 f0       	breq	.+28     	; 0x5e0 <__stack+0xe1>
 5c4:	83 35       	cpi	r24, 0x53	; 83
 5c6:	09 f0       	breq	.+2      	; 0x5ca <__stack+0xcb>
 5c8:	59 c0       	rjmp	.+178    	; 0x67c <__stack+0x17d>
 5ca:	21 c0       	rjmp	.+66     	; 0x60e <__stack+0x10f>
 5cc:	f8 01       	movw	r30, r16
 5ce:	80 81       	ld	r24, Z
 5d0:	89 83       	std	Y+1, r24	; 0x01
 5d2:	0e 5f       	subi	r16, 0xFE	; 254
 5d4:	1f 4f       	sbci	r17, 0xFF	; 255
 5d6:	88 24       	eor	r8, r8
 5d8:	83 94       	inc	r8
 5da:	91 2c       	mov	r9, r1
 5dc:	53 01       	movw	r10, r6
 5de:	13 c0       	rjmp	.+38     	; 0x606 <__stack+0x107>
 5e0:	28 01       	movw	r4, r16
 5e2:	f2 e0       	ldi	r31, 0x02	; 2
 5e4:	4f 0e       	add	r4, r31
 5e6:	51 1c       	adc	r5, r1
 5e8:	f8 01       	movw	r30, r16
 5ea:	a0 80       	ld	r10, Z
 5ec:	b1 80       	ldd	r11, Z+1	; 0x01
 5ee:	36 fe       	sbrs	r3, 6
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <__stack+0xf9>
 5f2:	69 2d       	mov	r22, r9
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <__stack+0xfd>
 5f8:	6f ef       	ldi	r22, 0xFF	; 255
 5fa:	7f ef       	ldi	r23, 0xFF	; 255
 5fc:	c5 01       	movw	r24, r10
 5fe:	0e 94 89 05 	call	0xb12	; 0xb12 <strnlen>
 602:	4c 01       	movw	r8, r24
 604:	82 01       	movw	r16, r4
 606:	f3 2d       	mov	r31, r3
 608:	ff 77       	andi	r31, 0x7F	; 127
 60a:	3f 2e       	mov	r3, r31
 60c:	16 c0       	rjmp	.+44     	; 0x63a <__stack+0x13b>
 60e:	28 01       	movw	r4, r16
 610:	22 e0       	ldi	r18, 0x02	; 2
 612:	42 0e       	add	r4, r18
 614:	51 1c       	adc	r5, r1
 616:	f8 01       	movw	r30, r16
 618:	a0 80       	ld	r10, Z
 61a:	b1 80       	ldd	r11, Z+1	; 0x01
 61c:	36 fe       	sbrs	r3, 6
 61e:	03 c0       	rjmp	.+6      	; 0x626 <__stack+0x127>
 620:	69 2d       	mov	r22, r9
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <__stack+0x12b>
 626:	6f ef       	ldi	r22, 0xFF	; 255
 628:	7f ef       	ldi	r23, 0xFF	; 255
 62a:	c5 01       	movw	r24, r10
 62c:	0e 94 77 05 	call	0xaee	; 0xaee <strnlen_P>
 630:	4c 01       	movw	r8, r24
 632:	f3 2d       	mov	r31, r3
 634:	f0 68       	ori	r31, 0x80	; 128
 636:	3f 2e       	mov	r3, r31
 638:	82 01       	movw	r16, r4
 63a:	33 fc       	sbrc	r3, 3
 63c:	1b c0       	rjmp	.+54     	; 0x674 <__stack+0x175>
 63e:	82 2d       	mov	r24, r2
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	88 16       	cp	r8, r24
 644:	99 06       	cpc	r9, r25
 646:	b0 f4       	brcc	.+44     	; 0x674 <__stack+0x175>
 648:	b6 01       	movw	r22, r12
 64a:	80 e2       	ldi	r24, 0x20	; 32
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 94 05 	call	0xb28	; 0xb28 <fputc>
 652:	2a 94       	dec	r2
 654:	f4 cf       	rjmp	.-24     	; 0x63e <__stack+0x13f>
 656:	f5 01       	movw	r30, r10
 658:	37 fc       	sbrc	r3, 7
 65a:	85 91       	lpm	r24, Z+
 65c:	37 fe       	sbrs	r3, 7
 65e:	81 91       	ld	r24, Z+
 660:	5f 01       	movw	r10, r30
 662:	b6 01       	movw	r22, r12
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 94 05 	call	0xb28	; 0xb28 <fputc>
 66a:	21 10       	cpse	r2, r1
 66c:	2a 94       	dec	r2
 66e:	21 e0       	ldi	r18, 0x01	; 1
 670:	82 1a       	sub	r8, r18
 672:	91 08       	sbc	r9, r1
 674:	81 14       	cp	r8, r1
 676:	91 04       	cpc	r9, r1
 678:	71 f7       	brne	.-36     	; 0x656 <__stack+0x157>
 67a:	e8 c0       	rjmp	.+464    	; 0x84c <__stack+0x34d>
 67c:	84 36       	cpi	r24, 0x64	; 100
 67e:	11 f0       	breq	.+4      	; 0x684 <__stack+0x185>
 680:	89 36       	cpi	r24, 0x69	; 105
 682:	41 f5       	brne	.+80     	; 0x6d4 <__stack+0x1d5>
 684:	f8 01       	movw	r30, r16
 686:	37 fe       	sbrs	r3, 7
 688:	07 c0       	rjmp	.+14     	; 0x698 <__stack+0x199>
 68a:	60 81       	ld	r22, Z
 68c:	71 81       	ldd	r23, Z+1	; 0x01
 68e:	82 81       	ldd	r24, Z+2	; 0x02
 690:	93 81       	ldd	r25, Z+3	; 0x03
 692:	0c 5f       	subi	r16, 0xFC	; 252
 694:	1f 4f       	sbci	r17, 0xFF	; 255
 696:	08 c0       	rjmp	.+16     	; 0x6a8 <__stack+0x1a9>
 698:	60 81       	ld	r22, Z
 69a:	71 81       	ldd	r23, Z+1	; 0x01
 69c:	07 2e       	mov	r0, r23
 69e:	00 0c       	add	r0, r0
 6a0:	88 0b       	sbc	r24, r24
 6a2:	99 0b       	sbc	r25, r25
 6a4:	0e 5f       	subi	r16, 0xFE	; 254
 6a6:	1f 4f       	sbci	r17, 0xFF	; 255
 6a8:	f3 2d       	mov	r31, r3
 6aa:	ff 76       	andi	r31, 0x6F	; 111
 6ac:	3f 2e       	mov	r3, r31
 6ae:	97 ff       	sbrs	r25, 7
 6b0:	09 c0       	rjmp	.+18     	; 0x6c4 <__stack+0x1c5>
 6b2:	90 95       	com	r25
 6b4:	80 95       	com	r24
 6b6:	70 95       	com	r23
 6b8:	61 95       	neg	r22
 6ba:	7f 4f       	sbci	r23, 0xFF	; 255
 6bc:	8f 4f       	sbci	r24, 0xFF	; 255
 6be:	9f 4f       	sbci	r25, 0xFF	; 255
 6c0:	f0 68       	ori	r31, 0x80	; 128
 6c2:	3f 2e       	mov	r3, r31
 6c4:	2a e0       	ldi	r18, 0x0A	; 10
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	a3 01       	movw	r20, r6
 6ca:	0e 94 d0 05 	call	0xba0	; 0xba0 <__ultoa_invert>
 6ce:	88 2e       	mov	r8, r24
 6d0:	86 18       	sub	r8, r6
 6d2:	45 c0       	rjmp	.+138    	; 0x75e <__stack+0x25f>
 6d4:	85 37       	cpi	r24, 0x75	; 117
 6d6:	31 f4       	brne	.+12     	; 0x6e4 <__stack+0x1e5>
 6d8:	23 2d       	mov	r18, r3
 6da:	2f 7e       	andi	r18, 0xEF	; 239
 6dc:	b2 2e       	mov	r11, r18
 6de:	2a e0       	ldi	r18, 0x0A	; 10
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	25 c0       	rjmp	.+74     	; 0x72e <__stack+0x22f>
 6e4:	93 2d       	mov	r25, r3
 6e6:	99 7f       	andi	r25, 0xF9	; 249
 6e8:	b9 2e       	mov	r11, r25
 6ea:	8f 36       	cpi	r24, 0x6F	; 111
 6ec:	c1 f0       	breq	.+48     	; 0x71e <__stack+0x21f>
 6ee:	18 f4       	brcc	.+6      	; 0x6f6 <__stack+0x1f7>
 6f0:	88 35       	cpi	r24, 0x58	; 88
 6f2:	79 f0       	breq	.+30     	; 0x712 <__stack+0x213>
 6f4:	b5 c0       	rjmp	.+362    	; 0x860 <__stack+0x361>
 6f6:	80 37       	cpi	r24, 0x70	; 112
 6f8:	19 f0       	breq	.+6      	; 0x700 <__stack+0x201>
 6fa:	88 37       	cpi	r24, 0x78	; 120
 6fc:	21 f0       	breq	.+8      	; 0x706 <__stack+0x207>
 6fe:	b0 c0       	rjmp	.+352    	; 0x860 <__stack+0x361>
 700:	e9 2f       	mov	r30, r25
 702:	e0 61       	ori	r30, 0x10	; 16
 704:	be 2e       	mov	r11, r30
 706:	b4 fe       	sbrs	r11, 4
 708:	0d c0       	rjmp	.+26     	; 0x724 <__stack+0x225>
 70a:	fb 2d       	mov	r31, r11
 70c:	f4 60       	ori	r31, 0x04	; 4
 70e:	bf 2e       	mov	r11, r31
 710:	09 c0       	rjmp	.+18     	; 0x724 <__stack+0x225>
 712:	34 fe       	sbrs	r3, 4
 714:	0a c0       	rjmp	.+20     	; 0x72a <__stack+0x22b>
 716:	29 2f       	mov	r18, r25
 718:	26 60       	ori	r18, 0x06	; 6
 71a:	b2 2e       	mov	r11, r18
 71c:	06 c0       	rjmp	.+12     	; 0x72a <__stack+0x22b>
 71e:	28 e0       	ldi	r18, 0x08	; 8
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	05 c0       	rjmp	.+10     	; 0x72e <__stack+0x22f>
 724:	20 e1       	ldi	r18, 0x10	; 16
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	02 c0       	rjmp	.+4      	; 0x72e <__stack+0x22f>
 72a:	20 e1       	ldi	r18, 0x10	; 16
 72c:	32 e0       	ldi	r19, 0x02	; 2
 72e:	f8 01       	movw	r30, r16
 730:	b7 fe       	sbrs	r11, 7
 732:	07 c0       	rjmp	.+14     	; 0x742 <__stack+0x243>
 734:	60 81       	ld	r22, Z
 736:	71 81       	ldd	r23, Z+1	; 0x01
 738:	82 81       	ldd	r24, Z+2	; 0x02
 73a:	93 81       	ldd	r25, Z+3	; 0x03
 73c:	0c 5f       	subi	r16, 0xFC	; 252
 73e:	1f 4f       	sbci	r17, 0xFF	; 255
 740:	06 c0       	rjmp	.+12     	; 0x74e <__stack+0x24f>
 742:	60 81       	ld	r22, Z
 744:	71 81       	ldd	r23, Z+1	; 0x01
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 5f       	subi	r16, 0xFE	; 254
 74c:	1f 4f       	sbci	r17, 0xFF	; 255
 74e:	a3 01       	movw	r20, r6
 750:	0e 94 d0 05 	call	0xba0	; 0xba0 <__ultoa_invert>
 754:	88 2e       	mov	r8, r24
 756:	86 18       	sub	r8, r6
 758:	fb 2d       	mov	r31, r11
 75a:	ff 77       	andi	r31, 0x7F	; 127
 75c:	3f 2e       	mov	r3, r31
 75e:	36 fe       	sbrs	r3, 6
 760:	0d c0       	rjmp	.+26     	; 0x77c <__stack+0x27d>
 762:	23 2d       	mov	r18, r3
 764:	2e 7f       	andi	r18, 0xFE	; 254
 766:	a2 2e       	mov	r10, r18
 768:	89 14       	cp	r8, r9
 76a:	58 f4       	brcc	.+22     	; 0x782 <__stack+0x283>
 76c:	34 fe       	sbrs	r3, 4
 76e:	0b c0       	rjmp	.+22     	; 0x786 <__stack+0x287>
 770:	32 fc       	sbrc	r3, 2
 772:	09 c0       	rjmp	.+18     	; 0x786 <__stack+0x287>
 774:	83 2d       	mov	r24, r3
 776:	8e 7e       	andi	r24, 0xEE	; 238
 778:	a8 2e       	mov	r10, r24
 77a:	05 c0       	rjmp	.+10     	; 0x786 <__stack+0x287>
 77c:	b8 2c       	mov	r11, r8
 77e:	a3 2c       	mov	r10, r3
 780:	03 c0       	rjmp	.+6      	; 0x788 <__stack+0x289>
 782:	b8 2c       	mov	r11, r8
 784:	01 c0       	rjmp	.+2      	; 0x788 <__stack+0x289>
 786:	b9 2c       	mov	r11, r9
 788:	a4 fe       	sbrs	r10, 4
 78a:	0f c0       	rjmp	.+30     	; 0x7aa <__stack+0x2ab>
 78c:	fe 01       	movw	r30, r28
 78e:	e8 0d       	add	r30, r8
 790:	f1 1d       	adc	r31, r1
 792:	80 81       	ld	r24, Z
 794:	80 33       	cpi	r24, 0x30	; 48
 796:	21 f4       	brne	.+8      	; 0x7a0 <__stack+0x2a1>
 798:	9a 2d       	mov	r25, r10
 79a:	99 7e       	andi	r25, 0xE9	; 233
 79c:	a9 2e       	mov	r10, r25
 79e:	09 c0       	rjmp	.+18     	; 0x7b2 <__stack+0x2b3>
 7a0:	a2 fe       	sbrs	r10, 2
 7a2:	06 c0       	rjmp	.+12     	; 0x7b0 <__stack+0x2b1>
 7a4:	b3 94       	inc	r11
 7a6:	b3 94       	inc	r11
 7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <__stack+0x2b3>
 7aa:	8a 2d       	mov	r24, r10
 7ac:	86 78       	andi	r24, 0x86	; 134
 7ae:	09 f0       	breq	.+2      	; 0x7b2 <__stack+0x2b3>
 7b0:	b3 94       	inc	r11
 7b2:	a3 fc       	sbrc	r10, 3
 7b4:	11 c0       	rjmp	.+34     	; 0x7d8 <__stack+0x2d9>
 7b6:	a0 fe       	sbrs	r10, 0
 7b8:	06 c0       	rjmp	.+12     	; 0x7c6 <__stack+0x2c7>
 7ba:	b2 14       	cp	r11, r2
 7bc:	88 f4       	brcc	.+34     	; 0x7e0 <__stack+0x2e1>
 7be:	28 0c       	add	r2, r8
 7c0:	92 2c       	mov	r9, r2
 7c2:	9b 18       	sub	r9, r11
 7c4:	0e c0       	rjmp	.+28     	; 0x7e2 <__stack+0x2e3>
 7c6:	b2 14       	cp	r11, r2
 7c8:	60 f4       	brcc	.+24     	; 0x7e2 <__stack+0x2e3>
 7ca:	b6 01       	movw	r22, r12
 7cc:	80 e2       	ldi	r24, 0x20	; 32
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0e 94 94 05 	call	0xb28	; 0xb28 <fputc>
 7d4:	b3 94       	inc	r11
 7d6:	f7 cf       	rjmp	.-18     	; 0x7c6 <__stack+0x2c7>
 7d8:	b2 14       	cp	r11, r2
 7da:	18 f4       	brcc	.+6      	; 0x7e2 <__stack+0x2e3>
 7dc:	2b 18       	sub	r2, r11
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <__stack+0x2e5>
 7e0:	98 2c       	mov	r9, r8
 7e2:	21 2c       	mov	r2, r1
 7e4:	a4 fe       	sbrs	r10, 4
 7e6:	10 c0       	rjmp	.+32     	; 0x808 <__stack+0x309>
 7e8:	b6 01       	movw	r22, r12
 7ea:	80 e3       	ldi	r24, 0x30	; 48
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	0e 94 94 05 	call	0xb28	; 0xb28 <fputc>
 7f2:	a2 fe       	sbrs	r10, 2
 7f4:	17 c0       	rjmp	.+46     	; 0x824 <__stack+0x325>
 7f6:	a1 fc       	sbrc	r10, 1
 7f8:	03 c0       	rjmp	.+6      	; 0x800 <__stack+0x301>
 7fa:	88 e7       	ldi	r24, 0x78	; 120
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <__stack+0x305>
 800:	88 e5       	ldi	r24, 0x58	; 88
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	b6 01       	movw	r22, r12
 806:	0c c0       	rjmp	.+24     	; 0x820 <__stack+0x321>
 808:	8a 2d       	mov	r24, r10
 80a:	86 78       	andi	r24, 0x86	; 134
 80c:	59 f0       	breq	.+22     	; 0x824 <__stack+0x325>
 80e:	a1 fe       	sbrs	r10, 1
 810:	02 c0       	rjmp	.+4      	; 0x816 <__stack+0x317>
 812:	8b e2       	ldi	r24, 0x2B	; 43
 814:	01 c0       	rjmp	.+2      	; 0x818 <__stack+0x319>
 816:	80 e2       	ldi	r24, 0x20	; 32
 818:	a7 fc       	sbrc	r10, 7
 81a:	8d e2       	ldi	r24, 0x2D	; 45
 81c:	b6 01       	movw	r22, r12
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 94 05 	call	0xb28	; 0xb28 <fputc>
 824:	89 14       	cp	r8, r9
 826:	38 f4       	brcc	.+14     	; 0x836 <__stack+0x337>
 828:	b6 01       	movw	r22, r12
 82a:	80 e3       	ldi	r24, 0x30	; 48
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 94 05 	call	0xb28	; 0xb28 <fputc>
 832:	9a 94       	dec	r9
 834:	f7 cf       	rjmp	.-18     	; 0x824 <__stack+0x325>
 836:	8a 94       	dec	r8
 838:	f3 01       	movw	r30, r6
 83a:	e8 0d       	add	r30, r8
 83c:	f1 1d       	adc	r31, r1
 83e:	80 81       	ld	r24, Z
 840:	b6 01       	movw	r22, r12
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0e 94 94 05 	call	0xb28	; 0xb28 <fputc>
 848:	81 10       	cpse	r8, r1
 84a:	f5 cf       	rjmp	.-22     	; 0x836 <__stack+0x337>
 84c:	22 20       	and	r2, r2
 84e:	09 f4       	brne	.+2      	; 0x852 <__stack+0x353>
 850:	42 ce       	rjmp	.-892    	; 0x4d6 <vfprintf+0x24>
 852:	b6 01       	movw	r22, r12
 854:	80 e2       	ldi	r24, 0x20	; 32
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 94 05 	call	0xb28	; 0xb28 <fputc>
 85c:	2a 94       	dec	r2
 85e:	f6 cf       	rjmp	.-20     	; 0x84c <__stack+0x34d>
 860:	f6 01       	movw	r30, r12
 862:	86 81       	ldd	r24, Z+6	; 0x06
 864:	97 81       	ldd	r25, Z+7	; 0x07
 866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0x36d>
 868:	8f ef       	ldi	r24, 0xFF	; 255
 86a:	9f ef       	ldi	r25, 0xFF	; 255
 86c:	2b 96       	adiw	r28, 0x0b	; 11
 86e:	e2 e1       	ldi	r30, 0x12	; 18
 870:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__epilogue_restores__>

00000874 <calloc>:
 874:	0f 93       	push	r16
 876:	1f 93       	push	r17
 878:	cf 93       	push	r28
 87a:	df 93       	push	r29
 87c:	86 9f       	mul	r24, r22
 87e:	80 01       	movw	r16, r0
 880:	87 9f       	mul	r24, r23
 882:	10 0d       	add	r17, r0
 884:	96 9f       	mul	r25, r22
 886:	10 0d       	add	r17, r0
 888:	11 24       	eor	r1, r1
 88a:	c8 01       	movw	r24, r16
 88c:	0e 94 56 04 	call	0x8ac	; 0x8ac <malloc>
 890:	ec 01       	movw	r28, r24
 892:	00 97       	sbiw	r24, 0x00	; 0
 894:	29 f0       	breq	.+10     	; 0x8a0 <calloc+0x2c>
 896:	a8 01       	movw	r20, r16
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	0e 94 82 05 	call	0xb04	; 0xb04 <memset>
 8a0:	ce 01       	movw	r24, r28
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	1f 91       	pop	r17
 8a8:	0f 91       	pop	r16
 8aa:	08 95       	ret

000008ac <malloc>:
 8ac:	0f 93       	push	r16
 8ae:	1f 93       	push	r17
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	82 30       	cpi	r24, 0x02	; 2
 8b6:	91 05       	cpc	r25, r1
 8b8:	10 f4       	brcc	.+4      	; 0x8be <malloc+0x12>
 8ba:	82 e0       	ldi	r24, 0x02	; 2
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <__flp>
 8c2:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <__flp+0x1>
 8c6:	20 e0       	ldi	r18, 0x00	; 0
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	a0 e0       	ldi	r26, 0x00	; 0
 8cc:	b0 e0       	ldi	r27, 0x00	; 0
 8ce:	30 97       	sbiw	r30, 0x00	; 0
 8d0:	19 f1       	breq	.+70     	; 0x918 <malloc+0x6c>
 8d2:	40 81       	ld	r20, Z
 8d4:	51 81       	ldd	r21, Z+1	; 0x01
 8d6:	02 81       	ldd	r16, Z+2	; 0x02
 8d8:	13 81       	ldd	r17, Z+3	; 0x03
 8da:	48 17       	cp	r20, r24
 8dc:	59 07       	cpc	r21, r25
 8de:	c8 f0       	brcs	.+50     	; 0x912 <malloc+0x66>
 8e0:	84 17       	cp	r24, r20
 8e2:	95 07       	cpc	r25, r21
 8e4:	69 f4       	brne	.+26     	; 0x900 <malloc+0x54>
 8e6:	10 97       	sbiw	r26, 0x00	; 0
 8e8:	31 f0       	breq	.+12     	; 0x8f6 <malloc+0x4a>
 8ea:	12 96       	adiw	r26, 0x02	; 2
 8ec:	0c 93       	st	X, r16
 8ee:	12 97       	sbiw	r26, 0x02	; 2
 8f0:	13 96       	adiw	r26, 0x03	; 3
 8f2:	1c 93       	st	X, r17
 8f4:	27 c0       	rjmp	.+78     	; 0x944 <malloc+0x98>
 8f6:	00 93 30 01 	sts	0x0130, r16	; 0x800130 <__flp>
 8fa:	10 93 31 01 	sts	0x0131, r17	; 0x800131 <__flp+0x1>
 8fe:	22 c0       	rjmp	.+68     	; 0x944 <malloc+0x98>
 900:	21 15       	cp	r18, r1
 902:	31 05       	cpc	r19, r1
 904:	19 f0       	breq	.+6      	; 0x90c <malloc+0x60>
 906:	42 17       	cp	r20, r18
 908:	53 07       	cpc	r21, r19
 90a:	18 f4       	brcc	.+6      	; 0x912 <malloc+0x66>
 90c:	9a 01       	movw	r18, r20
 90e:	bd 01       	movw	r22, r26
 910:	ef 01       	movw	r28, r30
 912:	df 01       	movw	r26, r30
 914:	f8 01       	movw	r30, r16
 916:	db cf       	rjmp	.-74     	; 0x8ce <malloc+0x22>
 918:	21 15       	cp	r18, r1
 91a:	31 05       	cpc	r19, r1
 91c:	f9 f0       	breq	.+62     	; 0x95c <malloc+0xb0>
 91e:	28 1b       	sub	r18, r24
 920:	39 0b       	sbc	r19, r25
 922:	24 30       	cpi	r18, 0x04	; 4
 924:	31 05       	cpc	r19, r1
 926:	80 f4       	brcc	.+32     	; 0x948 <malloc+0x9c>
 928:	8a 81       	ldd	r24, Y+2	; 0x02
 92a:	9b 81       	ldd	r25, Y+3	; 0x03
 92c:	61 15       	cp	r22, r1
 92e:	71 05       	cpc	r23, r1
 930:	21 f0       	breq	.+8      	; 0x93a <malloc+0x8e>
 932:	fb 01       	movw	r30, r22
 934:	93 83       	std	Z+3, r25	; 0x03
 936:	82 83       	std	Z+2, r24	; 0x02
 938:	04 c0       	rjmp	.+8      	; 0x942 <malloc+0x96>
 93a:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__flp+0x1>
 93e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__flp>
 942:	fe 01       	movw	r30, r28
 944:	32 96       	adiw	r30, 0x02	; 2
 946:	44 c0       	rjmp	.+136    	; 0x9d0 <malloc+0x124>
 948:	fe 01       	movw	r30, r28
 94a:	e2 0f       	add	r30, r18
 94c:	f3 1f       	adc	r31, r19
 94e:	81 93       	st	Z+, r24
 950:	91 93       	st	Z+, r25
 952:	22 50       	subi	r18, 0x02	; 2
 954:	31 09       	sbc	r19, r1
 956:	39 83       	std	Y+1, r19	; 0x01
 958:	28 83       	st	Y, r18
 95a:	3a c0       	rjmp	.+116    	; 0x9d0 <malloc+0x124>
 95c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__brkval>
 960:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <__brkval+0x1>
 964:	23 2b       	or	r18, r19
 966:	41 f4       	brne	.+16     	; 0x978 <malloc+0xcc>
 968:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 96c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 970:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <__brkval+0x1>
 974:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <__brkval>
 978:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 97c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 980:	21 15       	cp	r18, r1
 982:	31 05       	cpc	r19, r1
 984:	41 f4       	brne	.+16     	; 0x996 <malloc+0xea>
 986:	2d b7       	in	r18, 0x3d	; 61
 988:	3e b7       	in	r19, 0x3e	; 62
 98a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 98e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 992:	24 1b       	sub	r18, r20
 994:	35 0b       	sbc	r19, r21
 996:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <__brkval>
 99a:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <__brkval+0x1>
 99e:	e2 17       	cp	r30, r18
 9a0:	f3 07       	cpc	r31, r19
 9a2:	a0 f4       	brcc	.+40     	; 0x9cc <malloc+0x120>
 9a4:	2e 1b       	sub	r18, r30
 9a6:	3f 0b       	sbc	r19, r31
 9a8:	28 17       	cp	r18, r24
 9aa:	39 07       	cpc	r19, r25
 9ac:	78 f0       	brcs	.+30     	; 0x9cc <malloc+0x120>
 9ae:	ac 01       	movw	r20, r24
 9b0:	4e 5f       	subi	r20, 0xFE	; 254
 9b2:	5f 4f       	sbci	r21, 0xFF	; 255
 9b4:	24 17       	cp	r18, r20
 9b6:	35 07       	cpc	r19, r21
 9b8:	48 f0       	brcs	.+18     	; 0x9cc <malloc+0x120>
 9ba:	4e 0f       	add	r20, r30
 9bc:	5f 1f       	adc	r21, r31
 9be:	50 93 2f 01 	sts	0x012F, r21	; 0x80012f <__brkval+0x1>
 9c2:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <__brkval>
 9c6:	81 93       	st	Z+, r24
 9c8:	91 93       	st	Z+, r25
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <malloc+0x124>
 9cc:	e0 e0       	ldi	r30, 0x00	; 0
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	cf 01       	movw	r24, r30
 9d2:	df 91       	pop	r29
 9d4:	cf 91       	pop	r28
 9d6:	1f 91       	pop	r17
 9d8:	0f 91       	pop	r16
 9da:	08 95       	ret

000009dc <free>:
 9dc:	cf 93       	push	r28
 9de:	df 93       	push	r29
 9e0:	00 97       	sbiw	r24, 0x00	; 0
 9e2:	09 f4       	brne	.+2      	; 0x9e6 <free+0xa>
 9e4:	81 c0       	rjmp	.+258    	; 0xae8 <free+0x10c>
 9e6:	fc 01       	movw	r30, r24
 9e8:	32 97       	sbiw	r30, 0x02	; 2
 9ea:	13 82       	std	Z+3, r1	; 0x03
 9ec:	12 82       	std	Z+2, r1	; 0x02
 9ee:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <__flp>
 9f2:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <__flp+0x1>
 9f6:	10 97       	sbiw	r26, 0x00	; 0
 9f8:	81 f4       	brne	.+32     	; 0xa1a <free+0x3e>
 9fa:	20 81       	ld	r18, Z
 9fc:	31 81       	ldd	r19, Z+1	; 0x01
 9fe:	82 0f       	add	r24, r18
 a00:	93 1f       	adc	r25, r19
 a02:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__brkval>
 a06:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <__brkval+0x1>
 a0a:	28 17       	cp	r18, r24
 a0c:	39 07       	cpc	r19, r25
 a0e:	51 f5       	brne	.+84     	; 0xa64 <free+0x88>
 a10:	f0 93 2f 01 	sts	0x012F, r31	; 0x80012f <__brkval+0x1>
 a14:	e0 93 2e 01 	sts	0x012E, r30	; 0x80012e <__brkval>
 a18:	67 c0       	rjmp	.+206    	; 0xae8 <free+0x10c>
 a1a:	ed 01       	movw	r28, r26
 a1c:	20 e0       	ldi	r18, 0x00	; 0
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	ce 17       	cp	r28, r30
 a22:	df 07       	cpc	r29, r31
 a24:	40 f4       	brcc	.+16     	; 0xa36 <free+0x5a>
 a26:	4a 81       	ldd	r20, Y+2	; 0x02
 a28:	5b 81       	ldd	r21, Y+3	; 0x03
 a2a:	9e 01       	movw	r18, r28
 a2c:	41 15       	cp	r20, r1
 a2e:	51 05       	cpc	r21, r1
 a30:	f1 f0       	breq	.+60     	; 0xa6e <free+0x92>
 a32:	ea 01       	movw	r28, r20
 a34:	f5 cf       	rjmp	.-22     	; 0xa20 <free+0x44>
 a36:	d3 83       	std	Z+3, r29	; 0x03
 a38:	c2 83       	std	Z+2, r28	; 0x02
 a3a:	40 81       	ld	r20, Z
 a3c:	51 81       	ldd	r21, Z+1	; 0x01
 a3e:	84 0f       	add	r24, r20
 a40:	95 1f       	adc	r25, r21
 a42:	c8 17       	cp	r28, r24
 a44:	d9 07       	cpc	r29, r25
 a46:	59 f4       	brne	.+22     	; 0xa5e <free+0x82>
 a48:	88 81       	ld	r24, Y
 a4a:	99 81       	ldd	r25, Y+1	; 0x01
 a4c:	84 0f       	add	r24, r20
 a4e:	95 1f       	adc	r25, r21
 a50:	02 96       	adiw	r24, 0x02	; 2
 a52:	91 83       	std	Z+1, r25	; 0x01
 a54:	80 83       	st	Z, r24
 a56:	8a 81       	ldd	r24, Y+2	; 0x02
 a58:	9b 81       	ldd	r25, Y+3	; 0x03
 a5a:	93 83       	std	Z+3, r25	; 0x03
 a5c:	82 83       	std	Z+2, r24	; 0x02
 a5e:	21 15       	cp	r18, r1
 a60:	31 05       	cpc	r19, r1
 a62:	29 f4       	brne	.+10     	; 0xa6e <free+0x92>
 a64:	f0 93 31 01 	sts	0x0131, r31	; 0x800131 <__flp+0x1>
 a68:	e0 93 30 01 	sts	0x0130, r30	; 0x800130 <__flp>
 a6c:	3d c0       	rjmp	.+122    	; 0xae8 <free+0x10c>
 a6e:	e9 01       	movw	r28, r18
 a70:	fb 83       	std	Y+3, r31	; 0x03
 a72:	ea 83       	std	Y+2, r30	; 0x02
 a74:	49 91       	ld	r20, Y+
 a76:	59 91       	ld	r21, Y+
 a78:	c4 0f       	add	r28, r20
 a7a:	d5 1f       	adc	r29, r21
 a7c:	ec 17       	cp	r30, r28
 a7e:	fd 07       	cpc	r31, r29
 a80:	61 f4       	brne	.+24     	; 0xa9a <free+0xbe>
 a82:	80 81       	ld	r24, Z
 a84:	91 81       	ldd	r25, Z+1	; 0x01
 a86:	84 0f       	add	r24, r20
 a88:	95 1f       	adc	r25, r21
 a8a:	02 96       	adiw	r24, 0x02	; 2
 a8c:	e9 01       	movw	r28, r18
 a8e:	99 83       	std	Y+1, r25	; 0x01
 a90:	88 83       	st	Y, r24
 a92:	82 81       	ldd	r24, Z+2	; 0x02
 a94:	93 81       	ldd	r25, Z+3	; 0x03
 a96:	9b 83       	std	Y+3, r25	; 0x03
 a98:	8a 83       	std	Y+2, r24	; 0x02
 a9a:	e0 e0       	ldi	r30, 0x00	; 0
 a9c:	f0 e0       	ldi	r31, 0x00	; 0
 a9e:	12 96       	adiw	r26, 0x02	; 2
 aa0:	8d 91       	ld	r24, X+
 aa2:	9c 91       	ld	r25, X
 aa4:	13 97       	sbiw	r26, 0x03	; 3
 aa6:	00 97       	sbiw	r24, 0x00	; 0
 aa8:	19 f0       	breq	.+6      	; 0xab0 <free+0xd4>
 aaa:	fd 01       	movw	r30, r26
 aac:	dc 01       	movw	r26, r24
 aae:	f7 cf       	rjmp	.-18     	; 0xa9e <free+0xc2>
 ab0:	8d 91       	ld	r24, X+
 ab2:	9c 91       	ld	r25, X
 ab4:	11 97       	sbiw	r26, 0x01	; 1
 ab6:	9d 01       	movw	r18, r26
 ab8:	2e 5f       	subi	r18, 0xFE	; 254
 aba:	3f 4f       	sbci	r19, 0xFF	; 255
 abc:	82 0f       	add	r24, r18
 abe:	93 1f       	adc	r25, r19
 ac0:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__brkval>
 ac4:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <__brkval+0x1>
 ac8:	28 17       	cp	r18, r24
 aca:	39 07       	cpc	r19, r25
 acc:	69 f4       	brne	.+26     	; 0xae8 <free+0x10c>
 ace:	30 97       	sbiw	r30, 0x00	; 0
 ad0:	29 f4       	brne	.+10     	; 0xadc <free+0x100>
 ad2:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <__flp+0x1>
 ad6:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__flp>
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <free+0x104>
 adc:	13 82       	std	Z+3, r1	; 0x03
 ade:	12 82       	std	Z+2, r1	; 0x02
 ae0:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <__brkval+0x1>
 ae4:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <__brkval>
 ae8:	df 91       	pop	r29
 aea:	cf 91       	pop	r28
 aec:	08 95       	ret

00000aee <strnlen_P>:
 aee:	fc 01       	movw	r30, r24
 af0:	05 90       	lpm	r0, Z+
 af2:	61 50       	subi	r22, 0x01	; 1
 af4:	70 40       	sbci	r23, 0x00	; 0
 af6:	01 10       	cpse	r0, r1
 af8:	d8 f7       	brcc	.-10     	; 0xaf0 <strnlen_P+0x2>
 afa:	80 95       	com	r24
 afc:	90 95       	com	r25
 afe:	8e 0f       	add	r24, r30
 b00:	9f 1f       	adc	r25, r31
 b02:	08 95       	ret

00000b04 <memset>:
 b04:	dc 01       	movw	r26, r24
 b06:	01 c0       	rjmp	.+2      	; 0xb0a <memset+0x6>
 b08:	6d 93       	st	X+, r22
 b0a:	41 50       	subi	r20, 0x01	; 1
 b0c:	50 40       	sbci	r21, 0x00	; 0
 b0e:	e0 f7       	brcc	.-8      	; 0xb08 <memset+0x4>
 b10:	08 95       	ret

00000b12 <strnlen>:
 b12:	fc 01       	movw	r30, r24
 b14:	61 50       	subi	r22, 0x01	; 1
 b16:	70 40       	sbci	r23, 0x00	; 0
 b18:	01 90       	ld	r0, Z+
 b1a:	01 10       	cpse	r0, r1
 b1c:	d8 f7       	brcc	.-10     	; 0xb14 <strnlen+0x2>
 b1e:	80 95       	com	r24
 b20:	90 95       	com	r25
 b22:	8e 0f       	add	r24, r30
 b24:	9f 1f       	adc	r25, r31
 b26:	08 95       	ret

00000b28 <fputc>:
 b28:	0f 93       	push	r16
 b2a:	1f 93       	push	r17
 b2c:	cf 93       	push	r28
 b2e:	df 93       	push	r29
 b30:	fb 01       	movw	r30, r22
 b32:	23 81       	ldd	r18, Z+3	; 0x03
 b34:	21 fd       	sbrc	r18, 1
 b36:	03 c0       	rjmp	.+6      	; 0xb3e <fputc+0x16>
 b38:	8f ef       	ldi	r24, 0xFF	; 255
 b3a:	9f ef       	ldi	r25, 0xFF	; 255
 b3c:	2c c0       	rjmp	.+88     	; 0xb96 <fputc+0x6e>
 b3e:	22 ff       	sbrs	r18, 2
 b40:	16 c0       	rjmp	.+44     	; 0xb6e <fputc+0x46>
 b42:	46 81       	ldd	r20, Z+6	; 0x06
 b44:	57 81       	ldd	r21, Z+7	; 0x07
 b46:	24 81       	ldd	r18, Z+4	; 0x04
 b48:	35 81       	ldd	r19, Z+5	; 0x05
 b4a:	42 17       	cp	r20, r18
 b4c:	53 07       	cpc	r21, r19
 b4e:	44 f4       	brge	.+16     	; 0xb60 <fputc+0x38>
 b50:	a0 81       	ld	r26, Z
 b52:	b1 81       	ldd	r27, Z+1	; 0x01
 b54:	9d 01       	movw	r18, r26
 b56:	2f 5f       	subi	r18, 0xFF	; 255
 b58:	3f 4f       	sbci	r19, 0xFF	; 255
 b5a:	31 83       	std	Z+1, r19	; 0x01
 b5c:	20 83       	st	Z, r18
 b5e:	8c 93       	st	X, r24
 b60:	26 81       	ldd	r18, Z+6	; 0x06
 b62:	37 81       	ldd	r19, Z+7	; 0x07
 b64:	2f 5f       	subi	r18, 0xFF	; 255
 b66:	3f 4f       	sbci	r19, 0xFF	; 255
 b68:	37 83       	std	Z+7, r19	; 0x07
 b6a:	26 83       	std	Z+6, r18	; 0x06
 b6c:	14 c0       	rjmp	.+40     	; 0xb96 <fputc+0x6e>
 b6e:	8b 01       	movw	r16, r22
 b70:	ec 01       	movw	r28, r24
 b72:	fb 01       	movw	r30, r22
 b74:	00 84       	ldd	r0, Z+8	; 0x08
 b76:	f1 85       	ldd	r31, Z+9	; 0x09
 b78:	e0 2d       	mov	r30, r0
 b7a:	09 95       	icall
 b7c:	89 2b       	or	r24, r25
 b7e:	e1 f6       	brne	.-72     	; 0xb38 <fputc+0x10>
 b80:	d8 01       	movw	r26, r16
 b82:	16 96       	adiw	r26, 0x06	; 6
 b84:	8d 91       	ld	r24, X+
 b86:	9c 91       	ld	r25, X
 b88:	17 97       	sbiw	r26, 0x07	; 7
 b8a:	01 96       	adiw	r24, 0x01	; 1
 b8c:	17 96       	adiw	r26, 0x07	; 7
 b8e:	9c 93       	st	X, r25
 b90:	8e 93       	st	-X, r24
 b92:	16 97       	sbiw	r26, 0x06	; 6
 b94:	ce 01       	movw	r24, r28
 b96:	df 91       	pop	r29
 b98:	cf 91       	pop	r28
 b9a:	1f 91       	pop	r17
 b9c:	0f 91       	pop	r16
 b9e:	08 95       	ret

00000ba0 <__ultoa_invert>:
 ba0:	fa 01       	movw	r30, r20
 ba2:	aa 27       	eor	r26, r26
 ba4:	28 30       	cpi	r18, 0x08	; 8
 ba6:	51 f1       	breq	.+84     	; 0xbfc <__ultoa_invert+0x5c>
 ba8:	20 31       	cpi	r18, 0x10	; 16
 baa:	81 f1       	breq	.+96     	; 0xc0c <__ultoa_invert+0x6c>
 bac:	e8 94       	clt
 bae:	6f 93       	push	r22
 bb0:	6e 7f       	andi	r22, 0xFE	; 254
 bb2:	6e 5f       	subi	r22, 0xFE	; 254
 bb4:	7f 4f       	sbci	r23, 0xFF	; 255
 bb6:	8f 4f       	sbci	r24, 0xFF	; 255
 bb8:	9f 4f       	sbci	r25, 0xFF	; 255
 bba:	af 4f       	sbci	r26, 0xFF	; 255
 bbc:	b1 e0       	ldi	r27, 0x01	; 1
 bbe:	3e d0       	rcall	.+124    	; 0xc3c <__ultoa_invert+0x9c>
 bc0:	b4 e0       	ldi	r27, 0x04	; 4
 bc2:	3c d0       	rcall	.+120    	; 0xc3c <__ultoa_invert+0x9c>
 bc4:	67 0f       	add	r22, r23
 bc6:	78 1f       	adc	r23, r24
 bc8:	89 1f       	adc	r24, r25
 bca:	9a 1f       	adc	r25, r26
 bcc:	a1 1d       	adc	r26, r1
 bce:	68 0f       	add	r22, r24
 bd0:	79 1f       	adc	r23, r25
 bd2:	8a 1f       	adc	r24, r26
 bd4:	91 1d       	adc	r25, r1
 bd6:	a1 1d       	adc	r26, r1
 bd8:	6a 0f       	add	r22, r26
 bda:	71 1d       	adc	r23, r1
 bdc:	81 1d       	adc	r24, r1
 bde:	91 1d       	adc	r25, r1
 be0:	a1 1d       	adc	r26, r1
 be2:	20 d0       	rcall	.+64     	; 0xc24 <__ultoa_invert+0x84>
 be4:	09 f4       	brne	.+2      	; 0xbe8 <__ultoa_invert+0x48>
 be6:	68 94       	set
 be8:	3f 91       	pop	r19
 bea:	2a e0       	ldi	r18, 0x0A	; 10
 bec:	26 9f       	mul	r18, r22
 bee:	11 24       	eor	r1, r1
 bf0:	30 19       	sub	r19, r0
 bf2:	30 5d       	subi	r19, 0xD0	; 208
 bf4:	31 93       	st	Z+, r19
 bf6:	de f6       	brtc	.-74     	; 0xbae <__ultoa_invert+0xe>
 bf8:	cf 01       	movw	r24, r30
 bfa:	08 95       	ret
 bfc:	46 2f       	mov	r20, r22
 bfe:	47 70       	andi	r20, 0x07	; 7
 c00:	40 5d       	subi	r20, 0xD0	; 208
 c02:	41 93       	st	Z+, r20
 c04:	b3 e0       	ldi	r27, 0x03	; 3
 c06:	0f d0       	rcall	.+30     	; 0xc26 <__ultoa_invert+0x86>
 c08:	c9 f7       	brne	.-14     	; 0xbfc <__ultoa_invert+0x5c>
 c0a:	f6 cf       	rjmp	.-20     	; 0xbf8 <__ultoa_invert+0x58>
 c0c:	46 2f       	mov	r20, r22
 c0e:	4f 70       	andi	r20, 0x0F	; 15
 c10:	40 5d       	subi	r20, 0xD0	; 208
 c12:	4a 33       	cpi	r20, 0x3A	; 58
 c14:	18 f0       	brcs	.+6      	; 0xc1c <__ultoa_invert+0x7c>
 c16:	49 5d       	subi	r20, 0xD9	; 217
 c18:	31 fd       	sbrc	r19, 1
 c1a:	40 52       	subi	r20, 0x20	; 32
 c1c:	41 93       	st	Z+, r20
 c1e:	02 d0       	rcall	.+4      	; 0xc24 <__ultoa_invert+0x84>
 c20:	a9 f7       	brne	.-22     	; 0xc0c <__ultoa_invert+0x6c>
 c22:	ea cf       	rjmp	.-44     	; 0xbf8 <__ultoa_invert+0x58>
 c24:	b4 e0       	ldi	r27, 0x04	; 4
 c26:	a6 95       	lsr	r26
 c28:	97 95       	ror	r25
 c2a:	87 95       	ror	r24
 c2c:	77 95       	ror	r23
 c2e:	67 95       	ror	r22
 c30:	ba 95       	dec	r27
 c32:	c9 f7       	brne	.-14     	; 0xc26 <__ultoa_invert+0x86>
 c34:	00 97       	sbiw	r24, 0x00	; 0
 c36:	61 05       	cpc	r22, r1
 c38:	71 05       	cpc	r23, r1
 c3a:	08 95       	ret
 c3c:	9b 01       	movw	r18, r22
 c3e:	ac 01       	movw	r20, r24
 c40:	0a 2e       	mov	r0, r26
 c42:	06 94       	lsr	r0
 c44:	57 95       	ror	r21
 c46:	47 95       	ror	r20
 c48:	37 95       	ror	r19
 c4a:	27 95       	ror	r18
 c4c:	ba 95       	dec	r27
 c4e:	c9 f7       	brne	.-14     	; 0xc42 <__ultoa_invert+0xa2>
 c50:	62 0f       	add	r22, r18
 c52:	73 1f       	adc	r23, r19
 c54:	84 1f       	adc	r24, r20
 c56:	95 1f       	adc	r25, r21
 c58:	a0 1d       	adc	r26, r0
 c5a:	08 95       	ret

00000c5c <__prologue_saves__>:
 c5c:	2f 92       	push	r2
 c5e:	3f 92       	push	r3
 c60:	4f 92       	push	r4
 c62:	5f 92       	push	r5
 c64:	6f 92       	push	r6
 c66:	7f 92       	push	r7
 c68:	8f 92       	push	r8
 c6a:	9f 92       	push	r9
 c6c:	af 92       	push	r10
 c6e:	bf 92       	push	r11
 c70:	cf 92       	push	r12
 c72:	df 92       	push	r13
 c74:	ef 92       	push	r14
 c76:	ff 92       	push	r15
 c78:	0f 93       	push	r16
 c7a:	1f 93       	push	r17
 c7c:	cf 93       	push	r28
 c7e:	df 93       	push	r29
 c80:	cd b7       	in	r28, 0x3d	; 61
 c82:	de b7       	in	r29, 0x3e	; 62
 c84:	ca 1b       	sub	r28, r26
 c86:	db 0b       	sbc	r29, r27
 c88:	0f b6       	in	r0, 0x3f	; 63
 c8a:	f8 94       	cli
 c8c:	de bf       	out	0x3e, r29	; 62
 c8e:	0f be       	out	0x3f, r0	; 63
 c90:	cd bf       	out	0x3d, r28	; 61
 c92:	09 94       	ijmp

00000c94 <__epilogue_restores__>:
 c94:	2a 88       	ldd	r2, Y+18	; 0x12
 c96:	39 88       	ldd	r3, Y+17	; 0x11
 c98:	48 88       	ldd	r4, Y+16	; 0x10
 c9a:	5f 84       	ldd	r5, Y+15	; 0x0f
 c9c:	6e 84       	ldd	r6, Y+14	; 0x0e
 c9e:	7d 84       	ldd	r7, Y+13	; 0x0d
 ca0:	8c 84       	ldd	r8, Y+12	; 0x0c
 ca2:	9b 84       	ldd	r9, Y+11	; 0x0b
 ca4:	aa 84       	ldd	r10, Y+10	; 0x0a
 ca6:	b9 84       	ldd	r11, Y+9	; 0x09
 ca8:	c8 84       	ldd	r12, Y+8	; 0x08
 caa:	df 80       	ldd	r13, Y+7	; 0x07
 cac:	ee 80       	ldd	r14, Y+6	; 0x06
 cae:	fd 80       	ldd	r15, Y+5	; 0x05
 cb0:	0c 81       	ldd	r16, Y+4	; 0x04
 cb2:	1b 81       	ldd	r17, Y+3	; 0x03
 cb4:	aa 81       	ldd	r26, Y+2	; 0x02
 cb6:	b9 81       	ldd	r27, Y+1	; 0x01
 cb8:	ce 0f       	add	r28, r30
 cba:	d1 1d       	adc	r29, r1
 cbc:	0f b6       	in	r0, 0x3f	; 63
 cbe:	f8 94       	cli
 cc0:	de bf       	out	0x3e, r29	; 62
 cc2:	0f be       	out	0x3f, r0	; 63
 cc4:	cd bf       	out	0x3d, r28	; 61
 cc6:	ed 01       	movw	r28, r26
 cc8:	08 95       	ret

00000cca <_exit>:
 cca:	f8 94       	cli

00000ccc <__stop_program>:
 ccc:	ff cf       	rjmp	.-2      	; 0xccc <__stop_program>
