
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00001d5c  00001df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800162  00800162  00001e52  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e52  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  00001eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002072  00000000  00000000  000020a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ad6  00000000  00000000  00004118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b21  00000000  00000000  00004bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000488  00000000  00000000  00005710  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000704  00000000  00000000  00005b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011c4  00000000  00000000  0000629c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  00007460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <MENU_pong+0x3f6>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec e5       	ldi	r30, 0x5C	; 92
     37c:	fd e1       	ldi	r31, 0x1D	; 29
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 36       	cpi	r26, 0x62	; 98
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	a2 e6       	ldi	r26, 0x62	; 98
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 36       	cpi	r26, 0x6E	; 110
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <main>
     39e:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_read_x>:



uint8_t ADC_read_x(void) {
	// Setup to read from channel 1
	XMEM_write(0b0100, 0b010000000100);
     3a6:	64 e0       	ldi	r22, 0x04	; 4
     3a8:	74 e0       	ldi	r23, 0x04	; 4
     3aa:	84 e0       	ldi	r24, 0x04	; 4
     3ac:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	while (!ADC_INTERRUPT_READY) {
     3b0:	80 91 62 01 	lds	r24, 0x0162
     3b4:	90 91 63 01 	lds	r25, 0x0163
     3b8:	89 2b       	or	r24, r25
     3ba:	d1 f3       	breq	.-12     	; 0x3b0 <ADC_read_x+0xa>
		// wait for interrupt from ADC
		//printf("waiting for interrupt\n\r");
	}
	ADC_INTERRUPT_READY = 0;
     3bc:	10 92 63 01 	sts	0x0163, r1
     3c0:	10 92 62 01 	sts	0x0162, r1
	uint8_t x = XMEM_read(0b010000000000);
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	94 e0       	ldi	r25, 0x04	; 4
     3c8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <XMEM_read>
	//printf("read_x = %d \n\r", x);
	return x;
}
     3cc:	08 95       	ret

000003ce <ADC_read_y>:

uint8_t ADC_read_y(void) {
	// Setup to read from channel 2
	XMEM_write(0b0101, 0b010000000101);
     3ce:	65 e0       	ldi	r22, 0x05	; 5
     3d0:	74 e0       	ldi	r23, 0x04	; 4
     3d2:	85 e0       	ldi	r24, 0x05	; 5
     3d4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	while (!ADC_INTERRUPT_READY) {
     3d8:	80 91 62 01 	lds	r24, 0x0162
     3dc:	90 91 63 01 	lds	r25, 0x0163
     3e0:	89 2b       	or	r24, r25
     3e2:	d1 f3       	breq	.-12     	; 0x3d8 <ADC_read_y+0xa>
		// wait for interrupt from ADC
	}
	ADC_INTERRUPT_READY = 0;
     3e4:	10 92 63 01 	sts	0x0163, r1
     3e8:	10 92 62 01 	sts	0x0162, r1
	uint8_t y = XMEM_read(0b010000000000);
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	94 e0       	ldi	r25, 0x04	; 4
     3f0:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <XMEM_read>
	//printf("read_y = %d \n\r", y);
	return y;
}
     3f4:	08 95       	ret

000003f6 <ADC_slider_left>:

uint8_t ADC_slider_left(void) {
	// Setup to read from channel 2
	XMEM_write(0b0110, 0b010000000110);
     3f6:	66 e0       	ldi	r22, 0x06	; 6
     3f8:	74 e0       	ldi	r23, 0x04	; 4
     3fa:	86 e0       	ldi	r24, 0x06	; 6
     3fc:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	while (!ADC_INTERRUPT_READY) {
     400:	80 91 62 01 	lds	r24, 0x0162
     404:	90 91 63 01 	lds	r25, 0x0163
     408:	89 2b       	or	r24, r25
     40a:	d1 f3       	breq	.-12     	; 0x400 <ADC_slider_left+0xa>
		// wait for interrupt from ADC
	}
	ADC_INTERRUPT_READY = 0;
     40c:	10 92 63 01 	sts	0x0163, r1
     410:	10 92 62 01 	sts	0x0162, r1
	return XMEM_read(0b010000000000);
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	94 e0       	ldi	r25, 0x04	; 4
     418:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <XMEM_read>
}
     41c:	08 95       	ret

0000041e <ADC_slider_right>:

uint8_t ADC_slider_right(void) {
	// Setup to read from channel 2
	XMEM_write(0b0111, 0b010000000111);
     41e:	67 e0       	ldi	r22, 0x07	; 7
     420:	74 e0       	ldi	r23, 0x04	; 4
     422:	87 e0       	ldi	r24, 0x07	; 7
     424:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	while (!ADC_INTERRUPT_READY) {
     428:	80 91 62 01 	lds	r24, 0x0162
     42c:	90 91 63 01 	lds	r25, 0x0163
     430:	89 2b       	or	r24, r25
     432:	d1 f3       	breq	.-12     	; 0x428 <ADC_slider_right+0xa>
		// wait for interrupt from ADC
	}
	ADC_INTERRUPT_READY = 0;
     434:	10 92 63 01 	sts	0x0163, r1
     438:	10 92 62 01 	sts	0x0162, r1
	return XMEM_read(0b010000000000);
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	94 e0       	ldi	r25, 0x04	; 4
     440:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <XMEM_read>
}
     444:	08 95       	ret

00000446 <joystick_pos>:
#include "controls.h"
#include "adc.h"
#include <avr/io.h>


pos_t joystick_pos(void) {
     446:	cf 93       	push	r28
	int8_t x_pos = (ADC_read_x()*100/131)-100;
     448:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_read_x>
     44c:	c8 2f       	mov	r28, r24
	int8_t y_pos = (ADC_read_y()*100/131)-100;
     44e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ADC_read_y>
     452:	f8 2f       	mov	r31, r24
#include "adc.h"
#include <avr/io.h>


pos_t joystick_pos(void) {
	int8_t x_pos = (ADC_read_x()*100/131)-100;
     454:	e4 e6       	ldi	r30, 0x64	; 100
     456:	ec 9f       	mul	r30, r28
     458:	c0 01       	movw	r24, r0
     45a:	11 24       	eor	r1, r1
     45c:	23 e8       	ldi	r18, 0x83	; 131
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	b9 01       	movw	r22, r18
     462:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__divmodhi4>
     466:	46 2f       	mov	r20, r22
	int8_t y_pos = (ADC_read_y()*100/131)-100;
     468:	ef 9f       	mul	r30, r31
     46a:	c0 01       	movw	r24, r0
     46c:	11 24       	eor	r1, r1
     46e:	b9 01       	movw	r22, r18
     470:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__divmodhi4>
	pos_t pos = {x_pos, y_pos};
	return pos;
}
     474:	8c e9       	ldi	r24, 0x9C	; 156
     476:	84 0f       	add	r24, r20
     478:	9c e9       	ldi	r25, 0x9C	; 156
     47a:	96 0f       	add	r25, r22
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <joystick_dir>:

dir_t joystick_dir(void) {
	pos_t pos = joystick_pos();
     480:	0e 94 23 02 	call	0x446	; 0x446 <joystick_pos>
     484:	69 2f       	mov	r22, r25
     486:	98 2f       	mov	r25, r24
     488:	76 2f       	mov	r23, r22
	if (pos.x <= -10 && pos.x*pos.x > pos.y*pos.y){
     48a:	87 3f       	cpi	r24, 0xF7	; 247
     48c:	4c f4       	brge	.+18     	; 0x4a0 <joystick_dir+0x20>
     48e:	88 02       	muls	r24, r24
     490:	a0 01       	movw	r20, r0
     492:	11 24       	eor	r1, r1
     494:	66 02       	muls	r22, r22
     496:	90 01       	movw	r18, r0
     498:	11 24       	eor	r1, r1
     49a:	24 17       	cp	r18, r20
     49c:	35 07       	cpc	r19, r21
     49e:	1c f1       	brlt	.+70     	; 0x4e6 <joystick_dir+0x66>
		return LEFT;
	}
	else if (pos.x >= 10 && pos.x*pos.x > pos.y*pos.y){
     4a0:	9a 30       	cpi	r25, 0x0A	; 10
     4a2:	4c f0       	brlt	.+18     	; 0x4b6 <joystick_dir+0x36>
     4a4:	88 02       	muls	r24, r24
     4a6:	a0 01       	movw	r20, r0
     4a8:	11 24       	eor	r1, r1
     4aa:	66 02       	muls	r22, r22
     4ac:	90 01       	movw	r18, r0
     4ae:	11 24       	eor	r1, r1
     4b0:	24 17       	cp	r18, r20
     4b2:	35 07       	cpc	r19, r21
     4b4:	d4 f0       	brlt	.+52     	; 0x4ea <joystick_dir+0x6a>
		return RIGHT;
	}
	else if (pos.y <= -10 && pos.x*pos.x < pos.y*pos.y){
     4b6:	77 3f       	cpi	r23, 0xF7	; 247
     4b8:	4c f4       	brge	.+18     	; 0x4cc <joystick_dir+0x4c>
     4ba:	88 02       	muls	r24, r24
     4bc:	a0 01       	movw	r20, r0
     4be:	11 24       	eor	r1, r1
     4c0:	66 02       	muls	r22, r22
     4c2:	90 01       	movw	r18, r0
     4c4:	11 24       	eor	r1, r1
     4c6:	42 17       	cp	r20, r18
     4c8:	53 07       	cpc	r21, r19
     4ca:	8c f0       	brlt	.+34     	; 0x4ee <joystick_dir+0x6e>
		return DOWN;
	}
	else if (pos.y >= 10 && pos.x*pos.x < pos.y*pos.y){
     4cc:	7a 30       	cpi	r23, 0x0A	; 10
     4ce:	8c f0       	brlt	.+34     	; 0x4f2 <joystick_dir+0x72>
     4d0:	88 02       	muls	r24, r24
     4d2:	c0 01       	movw	r24, r0
     4d4:	11 24       	eor	r1, r1
     4d6:	66 02       	muls	r22, r22
     4d8:	90 01       	movw	r18, r0
     4da:	11 24       	eor	r1, r1
     4dc:	82 17       	cp	r24, r18
     4de:	93 07       	cpc	r25, r19
     4e0:	54 f0       	brlt	.+20     	; 0x4f6 <joystick_dir+0x76>
		return UP;
	}
	return NEUTRAL;
     4e2:	84 e0       	ldi	r24, 0x04	; 4
     4e4:	08 95       	ret
}

dir_t joystick_dir(void) {
	pos_t pos = joystick_pos();
	if (pos.x <= -10 && pos.x*pos.x > pos.y*pos.y){
		return LEFT;
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	08 95       	ret
	}
	else if (pos.x >= 10 && pos.x*pos.x > pos.y*pos.y){
		return RIGHT;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	08 95       	ret
	}
	else if (pos.y <= -10 && pos.x*pos.x < pos.y*pos.y){
		return DOWN;
     4ee:	83 e0       	ldi	r24, 0x03	; 3
     4f0:	08 95       	ret
	}
	else if (pos.y >= 10 && pos.x*pos.x < pos.y*pos.y){
		return UP;
	}
	return NEUTRAL;
     4f2:	84 e0       	ldi	r24, 0x04	; 4
     4f4:	08 95       	ret
	}
	else if (pos.y <= -10 && pos.x*pos.x < pos.y*pos.y){
		return DOWN;
	}
	else if (pos.y >= 10 && pos.x*pos.x < pos.y*pos.y){
		return UP;
     4f6:	82 e0       	ldi	r24, 0x02	; 2
	}
	return NEUTRAL;
}
     4f8:	08 95       	ret

000004fa <btn_init>:

void btn_init(void) {
	DDRB &= ~(1 << PB0);
     4fa:	b8 98       	cbi	0x17, 0	; 23
	DDRB &= ~(1 << PB1);
     4fc:	b9 98       	cbi	0x17, 1	; 23
     4fe:	08 95       	ret

00000500 <INTERRUPT_init>:
volatile int ADC_INTERRUPT_READY = 0;
//volatile int SPI_TRANSMISSION_COMPLETE = 0;

void INTERRUPT_init() {
	// Enable global interrupts (set SREG register)
	sei();
     500:	78 94       	sei
	
	// Enable that a falling edge generates an interrupt request for INT0
	MCUCR |= (1 << ISC01);
     502:	85 b7       	in	r24, 0x35	; 53
     504:	82 60       	ori	r24, 0x02	; 2
     506:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
     508:	85 b7       	in	r24, 0x35	; 53
     50a:	8e 7f       	andi	r24, 0xFE	; 254
     50c:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC11);
	MCUCR |= (1 << ISC10);	
	*/
	
	// Enable interrupt on INT0 (ADC) and INT1 (MCU)
	GICR |= (1 << INT0);
     50e:	8b b7       	in	r24, 0x3b	; 59
     510:	80 64       	ori	r24, 0x40	; 64
     512:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1); 
     514:	8b b7       	in	r24, 0x3b	; 59
     516:	80 68       	ori	r24, 0x80	; 128
     518:	8b bf       	out	0x3b, r24	; 59
     51a:	08 95       	ret

0000051c <__vector_1>:
}

// Interrupt for ADC
ISR(INT0_vect) {
     51c:	1f 92       	push	r1
     51e:	0f 92       	push	r0
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	0f 92       	push	r0
     524:	11 24       	eor	r1, r1
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
	// Disable global interrupts while executing an ISR (?)
	//cli();
	ADC_INTERRUPT_READY = 1;
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	90 93 63 01 	sts	0x0163, r25
     532:	80 93 62 01 	sts	0x0162, r24
	// Reset interrupt flag
	//GIFR &= ~(1 << INTF0);
	//GIFR |= (1 << INTF0);
	//printf("routine finished\n\r");
	//sei();
}
     536:	9f 91       	pop	r25
     538:	8f 91       	pop	r24
     53a:	0f 90       	pop	r0
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	0f 90       	pop	r0
     540:	1f 90       	pop	r1
     542:	18 95       	reti

00000544 <MENU_print_children>:
#include <math.h>
#define F_CPU 4915200
#include <util/delay.h>


void MENU_print_children(menu_ptr item) {
     544:	8f 92       	push	r8
     546:	9f 92       	push	r9
     548:	af 92       	push	r10
     54a:	bf 92       	push	r11
     54c:	cf 92       	push	r12
     54e:	df 92       	push	r13
     550:	ef 92       	push	r14
     552:	ff 92       	push	r15
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	6c 01       	movw	r12, r24
	for (int i = 0; i<item->num_children; i++) {
     55e:	dc 01       	movw	r26, r24
     560:	12 96       	adiw	r26, 0x02	; 2
     562:	8d 91       	ld	r24, X+
     564:	9c 91       	ld	r25, X
     566:	13 97       	sbiw	r26, 0x03	; 3
     568:	18 16       	cp	r1, r24
     56a:	19 06       	cpc	r1, r25
     56c:	0c f0       	brlt	.+2      	; 0x570 <MENU_print_children+0x2c>
     56e:	3f c0       	rjmp	.+126    	; 0x5ee <MENU_print_children+0xaa>
     570:	86 01       	movw	r16, r12
     572:	e1 2c       	mov	r14, r1
     574:	f1 2c       	mov	r15, r1
     576:	c0 e0       	ldi	r28, 0x00	; 0
     578:	d0 e0       	ldi	r29, 0x00	; 0
		if (item->selectedChild == i) {
     57a:	f6 01       	movw	r30, r12
     57c:	a6 88       	ldd	r10, Z+22	; 0x16
     57e:	b7 88       	ldd	r11, Z+23	; 0x17
     580:	ac 16       	cp	r10, r28
     582:	bd 06       	cpc	r11, r29
     584:	f1 f4       	brne	.+60     	; 0x5c2 <MENU_print_children+0x7e>
			OLED_print_string("-", i*128);
     586:	45 01       	movw	r8, r10
     588:	96 94       	lsr	r9
     58a:	98 2c       	mov	r9, r8
     58c:	88 24       	eor	r8, r8
     58e:	97 94       	ror	r9
     590:	87 94       	ror	r8
     592:	b4 01       	movw	r22, r8
     594:	86 e0       	ldi	r24, 0x06	; 6
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 ca 06 	call	0xd94	; 0xd94 <OLED_print_string>
			OLED_print_string(item->children[i]->name, i*128 + 8);
     59c:	b4 01       	movw	r22, r8
     59e:	68 5f       	subi	r22, 0xF8	; 248
     5a0:	7f 4f       	sbci	r23, 0xFF	; 255
     5a2:	f2 e0       	ldi	r31, 0x02	; 2
     5a4:	af 0e       	add	r10, r31
     5a6:	b1 1c       	adc	r11, r1
     5a8:	f5 01       	movw	r30, r10
     5aa:	ee 0f       	add	r30, r30
     5ac:	ff 1f       	adc	r31, r31
     5ae:	ec 0d       	add	r30, r12
     5b0:	fd 1d       	adc	r31, r13
     5b2:	01 90       	ld	r0, Z+
     5b4:	f0 81       	ld	r31, Z
     5b6:	e0 2d       	mov	r30, r0
     5b8:	80 8d       	ldd	r24, Z+24	; 0x18
     5ba:	91 8d       	ldd	r25, Z+25	; 0x19
     5bc:	0e 94 ca 06 	call	0xd94	; 0xd94 <OLED_print_string>
     5c0:	0a c0       	rjmp	.+20     	; 0x5d6 <MENU_print_children+0x92>
		}
		else{
			OLED_print_string(item->children[i]->name, i*128);
     5c2:	d8 01       	movw	r26, r16
     5c4:	14 96       	adiw	r26, 0x04	; 4
     5c6:	ed 91       	ld	r30, X+
     5c8:	fc 91       	ld	r31, X
     5ca:	15 97       	sbiw	r26, 0x05	; 5
     5cc:	b7 01       	movw	r22, r14
     5ce:	80 8d       	ldd	r24, Z+24	; 0x18
     5d0:	91 8d       	ldd	r25, Z+25	; 0x19
     5d2:	0e 94 ca 06 	call	0xd94	; 0xd94 <OLED_print_string>
#define F_CPU 4915200
#include <util/delay.h>


void MENU_print_children(menu_ptr item) {
	for (int i = 0; i<item->num_children; i++) {
     5d6:	21 96       	adiw	r28, 0x01	; 1
     5d8:	0e 5f       	subi	r16, 0xFE	; 254
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
     5dc:	b0 e8       	ldi	r27, 0x80	; 128
     5de:	eb 0e       	add	r14, r27
     5e0:	f1 1c       	adc	r15, r1
     5e2:	f6 01       	movw	r30, r12
     5e4:	82 81       	ldd	r24, Z+2	; 0x02
     5e6:	93 81       	ldd	r25, Z+3	; 0x03
     5e8:	c8 17       	cp	r28, r24
     5ea:	d9 07       	cpc	r29, r25
     5ec:	34 f2       	brlt	.-116    	; 0x57a <MENU_print_children+0x36>
		}
		else{
			OLED_print_string(item->children[i]->name, i*128);
		}
	}
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	bf 90       	pop	r11
     600:	af 90       	pop	r10
     602:	9f 90       	pop	r9
     604:	8f 90       	pop	r8
     606:	08 95       	ret

00000608 <MENU_navigate>:

void MENU_navigate(menu_ptr item) {
     608:	ec 01       	movw	r28, r24
	menu_ptr currentMenu = item;
	while(1){
		if (joystick_dir() != NEUTRAL) {
     60a:	0e 94 40 02 	call	0x480	; 0x480 <joystick_dir>
     60e:	84 30       	cpi	r24, 0x04	; 4
     610:	09 f4       	brne	.+2      	; 0x614 <MENU_navigate+0xc>
     612:	52 c0       	rjmp	.+164    	; 0x6b8 <MENU_navigate+0xb0>
			switch(joystick_dir()) {
     614:	0e 94 40 02 	call	0x480	; 0x480 <joystick_dir>
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	19 f1       	breq	.+70     	; 0x662 <MENU_navigate+0x5a>
     61c:	08 f4       	brcc	.+2      	; 0x620 <MENU_navigate+0x18>
     61e:	40 c0       	rjmp	.+128    	; 0x6a0 <MENU_navigate+0x98>
     620:	82 30       	cpi	r24, 0x02	; 2
     622:	89 f0       	breq	.+34     	; 0x646 <MENU_navigate+0x3e>
     624:	83 30       	cpi	r24, 0x03	; 3
     626:	09 f0       	breq	.+2      	; 0x62a <MENU_navigate+0x22>
     628:	43 c0       	rjmp	.+134    	; 0x6b0 <MENU_navigate+0xa8>
				case DOWN:
					if (currentMenu->num_children == currentMenu->selectedChild + 1){
     62a:	8e 89       	ldd	r24, Y+22	; 0x16
     62c:	9f 89       	ldd	r25, Y+23	; 0x17
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	2a 81       	ldd	r18, Y+2	; 0x02
     632:	3b 81       	ldd	r19, Y+3	; 0x03
     634:	28 17       	cp	r18, r24
     636:	39 07       	cpc	r19, r25
     638:	19 f4       	brne	.+6      	; 0x640 <MENU_navigate+0x38>
						currentMenu->selectedChild = 0;
     63a:	1f 8a       	std	Y+23, r1	; 0x17
     63c:	1e 8a       	std	Y+22, r1	; 0x16
     63e:	38 c0       	rjmp	.+112    	; 0x6b0 <MENU_navigate+0xa8>
					}
					else{
						currentMenu->selectedChild += 1;
     640:	9f 8b       	std	Y+23, r25	; 0x17
     642:	8e 8b       	std	Y+22, r24	; 0x16
     644:	35 c0       	rjmp	.+106    	; 0x6b0 <MENU_navigate+0xa8>
					}
					break;
				case UP:
					if (currentMenu->selectedChild == 0){
     646:	8e 89       	ldd	r24, Y+22	; 0x16
     648:	9f 89       	ldd	r25, Y+23	; 0x17
     64a:	00 97       	sbiw	r24, 0x00	; 0
     64c:	31 f4       	brne	.+12     	; 0x65a <MENU_navigate+0x52>
						currentMenu->selectedChild = currentMenu->num_children - 1;
     64e:	8a 81       	ldd	r24, Y+2	; 0x02
     650:	9b 81       	ldd	r25, Y+3	; 0x03
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	9f 8b       	std	Y+23, r25	; 0x17
     656:	8e 8b       	std	Y+22, r24	; 0x16
     658:	2b c0       	rjmp	.+86     	; 0x6b0 <MENU_navigate+0xa8>
					}
					else{
						currentMenu->selectedChild -= 1;
     65a:	01 97       	sbiw	r24, 0x01	; 1
     65c:	9f 8b       	std	Y+23, r25	; 0x17
     65e:	8e 8b       	std	Y+22, r24	; 0x16
     660:	27 c0       	rjmp	.+78     	; 0x6b0 <MENU_navigate+0xa8>
					}
					break;
				case RIGHT:
					if (currentMenu->children[currentMenu->selectedChild]->num_children == 0){
     662:	ee 89       	ldd	r30, Y+22	; 0x16
     664:	ff 89       	ldd	r31, Y+23	; 0x17
     666:	32 96       	adiw	r30, 0x02	; 2
     668:	ee 0f       	add	r30, r30
     66a:	ff 1f       	adc	r31, r31
     66c:	ec 0f       	add	r30, r28
     66e:	fd 1f       	adc	r31, r29
     670:	01 90       	ld	r0, Z+
     672:	f0 81       	ld	r31, Z
     674:	e0 2d       	mov	r30, r0
     676:	82 81       	ldd	r24, Z+2	; 0x02
     678:	93 81       	ldd	r25, Z+3	; 0x03
     67a:	89 2b       	or	r24, r25
     67c:	b1 f4       	brne	.+44     	; 0x6aa <MENU_navigate+0xa2>
						OLED_clearAll();
     67e:	0e 94 96 07 	call	0xf2c	; 0xf2c <OLED_clearAll>
						currentMenu->children[currentMenu->selectedChild]->fun_ptr();
     682:	ee 89       	ldd	r30, Y+22	; 0x16
     684:	ff 89       	ldd	r31, Y+23	; 0x17
     686:	32 96       	adiw	r30, 0x02	; 2
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	ec 0f       	add	r30, r28
     68e:	fd 1f       	adc	r31, r29
     690:	01 90       	ld	r0, Z+
     692:	f0 81       	ld	r31, Z
     694:	e0 2d       	mov	r30, r0
     696:	01 90       	ld	r0, Z+
     698:	f0 81       	ld	r31, Z
     69a:	e0 2d       	mov	r30, r0
     69c:	09 95       	icall
     69e:	08 c0       	rjmp	.+16     	; 0x6b0 <MENU_navigate+0xa8>
					else{
						currentMenu = currentMenu->children[currentMenu->selectedChild];
					}
					break;
				case LEFT:
					if (currentMenu->parent != NULL){
     6a0:	8c 89       	ldd	r24, Y+20	; 0x14
     6a2:	9d 89       	ldd	r25, Y+21	; 0x15
     6a4:	00 97       	sbiw	r24, 0x00	; 0
     6a6:	19 f4       	brne	.+6      	; 0x6ae <MENU_navigate+0xa6>
     6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <MENU_navigate+0xa8>
					if (currentMenu->children[currentMenu->selectedChild]->num_children == 0){
						OLED_clearAll();
						currentMenu->children[currentMenu->selectedChild]->fun_ptr();
					}
					else{
						currentMenu = currentMenu->children[currentMenu->selectedChild];
     6aa:	ef 01       	movw	r28, r30
     6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <MENU_navigate+0xa8>
					}
					break;
				case LEFT:
					if (currentMenu->parent != NULL){
						currentMenu = currentMenu->parent;
     6ae:	ec 01       	movw	r28, r24
					}
					break;
			}
			while (joystick_dir() != NEUTRAL);
     6b0:	0e 94 40 02 	call	0x480	; 0x480 <joystick_dir>
     6b4:	84 30       	cpi	r24, 0x04	; 4
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <MENU_navigate+0xa8>
		}
		OLED_clearAll();
     6b8:	0e 94 96 07 	call	0xf2c	; 0xf2c <OLED_clearAll>
		MENU_print_children(currentMenu);
     6bc:	ce 01       	movw	r24, r28
     6be:	0e 94 a2 02 	call	0x544	; 0x544 <MENU_print_children>
		OLED_refresh();
     6c2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <OLED_refresh>
	}
     6c6:	a1 cf       	rjmp	.-190    	; 0x60a <MENU_navigate+0x2>

000006c8 <MENU_veryFunInvertingFunction>:
}

void MENU_veryFunInvertingFunction(){
	OLED_clearAll();
     6c8:	0e 94 96 07 	call	0xf2c	; 0xf2c <OLED_clearAll>
	OLED_refresh();
     6cc:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <OLED_refresh>
	while(1){
		if (joystick_dir() == DOWN){
     6d0:	0e 94 40 02 	call	0x480	; 0x480 <joystick_dir>
     6d4:	83 30       	cpi	r24, 0x03	; 3
     6d6:	39 f4       	brne	.+14     	; 0x6e6 <MENU_veryFunInvertingFunction+0x1e>
			XMEM_write(0xA7, 0xA7);
     6d8:	67 ea       	ldi	r22, 0xA7	; 167
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	87 ea       	ldi	r24, 0xA7	; 167
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
     6e4:	f5 cf       	rjmp	.-22     	; 0x6d0 <MENU_veryFunInvertingFunction+0x8>
		}
		else{
			XMEM_write(0xA6, 0xA6);
     6e6:	66 ea       	ldi	r22, 0xA6	; 166
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	86 ea       	ldi	r24, 0xA6	; 166
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
     6f2:	ee cf       	rjmp	.-36     	; 0x6d0 <MENU_veryFunInvertingFunction+0x8>

000006f4 <MENU_animation>:
	int y = 10;
	int x_vel = 3;
	int y_vel = 2;
	while (1) {
		x += x_vel;
		y += y_vel;
     6f4:	0c e0       	ldi	r16, 0x0C	; 12
     6f6:	10 e0       	ldi	r17, 0x00	; 0
	int x = 20;
	int y = 10;
	int x_vel = 3;
	int y_vel = 2;
	while (1) {
		x += x_vel;
     6f8:	c7 e1       	ldi	r28, 0x17	; 23
     6fa:	d0 e0       	ldi	r29, 0x00	; 0

void MENU_animation() {
	int x = 20;
	int y = 10;
	int x_vel = 3;
	int y_vel = 2;
     6fc:	68 94       	set
     6fe:	cc 24       	eor	r12, r12
     700:	c1 f8       	bld	r12, 1
     702:	d1 2c       	mov	r13, r1
}

void MENU_animation() {
	int x = 20;
	int y = 10;
	int x_vel = 3;
     704:	0f 2e       	mov	r0, r31
     706:	f3 e0       	ldi	r31, 0x03	; 3
     708:	ef 2e       	mov	r14, r31
     70a:	f1 2c       	mov	r15, r1
     70c:	f0 2d       	mov	r31, r0
     70e:	03 c0       	rjmp	.+6      	; 0x716 <MENU_animation+0x22>
	int y_vel = 2;
	while (1) {
		x += x_vel;
		y += y_vel;
		if (x <= 0 || x >= 127) {
			x_vel *= -1;
     710:	f1 94       	neg	r15
     712:	e1 94       	neg	r14
     714:	f1 08       	sbc	r15, r1
		}
		if (y <= 0 || y >= 63) {
     716:	c8 01       	movw	r24, r16
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	ce 97       	sbiw	r24, 0x3e	; 62
     71c:	18 f0       	brcs	.+6      	; 0x724 <MENU_animation+0x30>
			y_vel *= -1;
     71e:	d1 94       	neg	r13
     720:	c1 94       	neg	r12
     722:	d1 08       	sbc	r13, r1
		}
		OLED_set_pixel(x, y);
     724:	b8 01       	movw	r22, r16
     726:	ce 01       	movw	r24, r28
     728:	0e 94 e5 06 	call	0xdca	; 0xdca <OLED_set_pixel>
		OLED_refresh();
     72c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <OLED_refresh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 ef       	ldi	r25, 0xF0	; 240
     734:	01 97       	sbiw	r24, 0x01	; 1
     736:	f1 f7       	brne	.-4      	; 0x734 <MENU_animation+0x40>
	int x = 20;
	int y = 10;
	int x_vel = 3;
	int y_vel = 2;
	while (1) {
		x += x_vel;
     738:	ce 0d       	add	r28, r14
     73a:	df 1d       	adc	r29, r15
		y += y_vel;
     73c:	0c 0d       	add	r16, r12
     73e:	1d 1d       	adc	r17, r13
		if (x <= 0 || x >= 127) {
     740:	ce 01       	movw	r24, r28
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	8e 37       	cpi	r24, 0x7E	; 126
     746:	91 05       	cpc	r25, r1
     748:	18 f7       	brcc	.-58     	; 0x710 <MENU_animation+0x1c>
     74a:	e5 cf       	rjmp	.-54     	; 0x716 <MENU_animation+0x22>

0000074c <MENU_pong>:
		}
	}
}
*/

void MENU_pong() {
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	66 97       	sbiw	r28, 0x16	; 22
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61

	int rightPoints = 0;
	int leftPoints = 0;
	float difference = 0;

	OLED_clearAll();
     760:	0e 94 96 07 	call	0xf2c	; 0xf2c <OLED_clearAll>
	OLED_refresh();
     764:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <OLED_refresh>
	uint8_t rightPaddleY = 31;
	uint8_t lowerColRightPaddle = 124 & 0x0F;	//left paddle
	uint8_t upperColRightPaddle = 124 >> 4;

	int rightPoints = 0;
	int leftPoints = 0;
     768:	1c 8a       	std	Y+20, r1	; 0x14
     76a:	1b 8a       	std	Y+19, r1	; 0x13
	uint8_t rightPaddleX = 124;
	uint8_t rightPaddleY = 31;
	uint8_t lowerColRightPaddle = 124 & 0x0F;	//left paddle
	uint8_t upperColRightPaddle = 124 >> 4;

	int rightPoints = 0;
     76c:	1e 8a       	std	Y+22, r1	; 0x16
     76e:	1d 8a       	std	Y+21, r1	; 0x15
	OLED_clearAll();
	OLED_refresh();

	while (1) {
		float x = 63;
		float y = 31;
     770:	1b 82       	std	Y+3, r1	; 0x03
     772:	1c 82       	std	Y+4, r1	; 0x04
     774:	28 ef       	ldi	r18, 0xF8	; 248
     776:	2d 83       	std	Y+5, r18	; 0x05
     778:	81 e4       	ldi	r24, 0x41	; 65
     77a:	8e 83       	std	Y+6, r24	; 0x06

	OLED_clearAll();
	OLED_refresh();

	while (1) {
		float x = 63;
     77c:	31 2c       	mov	r3, r1
     77e:	21 2c       	mov	r2, r1
     780:	9c e7       	ldi	r25, 0x7C	; 124
     782:	99 83       	std	Y+1, r25	; 0x01
     784:	a2 e4       	ldi	r26, 0x42	; 66
     786:	aa 83       	std	Y+2, r26	; 0x02
		float y = 31;
		x_vel = 1;
		y_vel = 0;
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	a0 e0       	ldi	r26, 0x00	; 0
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	8b 87       	std	Y+11, r24	; 0x0b
     792:	9c 87       	std	Y+12, r25	; 0x0c
     794:	ad 87       	std	Y+13, r26	; 0x0d
     796:	be 87       	std	Y+14, r27	; 0x0e
	OLED_refresh();

	while (1) {
		float x = 63;
		float y = 31;
		x_vel = 1;
     798:	1f 86       	std	Y+15, r1	; 0x0f
     79a:	18 8a       	std	Y+16, r1	; 0x10
     79c:	b0 e8       	ldi	r27, 0x80	; 128
     79e:	b9 8b       	std	Y+17, r27	; 0x11
     7a0:	ef e3       	ldi	r30, 0x3F	; 63
     7a2:	ea 8b       	std	Y+18, r30	; 0x12
		y_vel = 0;
		while (1) {
			TIM8_WriteTCNT0(0);
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	0e 94 ac 07 	call	0xf58	; 0xf58 <TIM8_WriteTCNT0>
			rightPaddleY = (ADC_slider_right()) / 4;
     7aa:	0e 94 0f 02 	call	0x41e	; 0x41e <ADC_slider_right>
     7ae:	98 2e       	mov	r9, r24
     7b0:	96 94       	lsr	r9
     7b2:	96 94       	lsr	r9
			leftPaddleY = (ADC_slider_left()) / 4;
     7b4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ADC_slider_left>
     7b8:	b8 2e       	mov	r11, r24
     7ba:	b6 94       	lsr	r11
     7bc:	b6 94       	lsr	r11
			xPrev = x;
			yPrev = y;
			
			OLED_reset_pixel((int)xPrev, (int)yPrev);	//clears last ball location
     7be:	6b 81       	ldd	r22, Y+3	; 0x03
     7c0:	7c 81       	ldd	r23, Y+4	; 0x04
     7c2:	8d 81       	ldd	r24, Y+5	; 0x05
     7c4:	9e 81       	ldd	r25, Y+6	; 0x06
     7c6:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__fixsfsi>
     7ca:	6b 01       	movw	r12, r22
     7cc:	7c 01       	movw	r14, r24
     7ce:	63 2d       	mov	r22, r3
     7d0:	72 2d       	mov	r23, r2
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	9a 81       	ldd	r25, Y+2	; 0x02
     7d6:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__fixsfsi>
     7da:	2b 01       	movw	r4, r22
     7dc:	3c 01       	movw	r6, r24
     7de:	b6 01       	movw	r22, r12
     7e0:	c2 01       	movw	r24, r4
     7e2:	0e 94 1f 07 	call	0xe3e	; 0xe3e <OLED_reset_pixel>
			
			XMEM_write(0xB0 + (int)yPrev/8, 0xB0 + (int)yPrev/8);	//set page to ball-page
     7e6:	c6 01       	movw	r24, r12
     7e8:	dd 20       	and	r13, r13
     7ea:	0c f4       	brge	.+2      	; 0x7ee <MENU_pong+0xa2>
     7ec:	07 96       	adiw	r24, 0x07	; 7
     7ee:	8c 01       	movw	r16, r24
     7f0:	15 95       	asr	r17
     7f2:	07 95       	ror	r16
     7f4:	15 95       	asr	r17
     7f6:	07 95       	ror	r16
     7f8:	15 95       	asr	r17
     7fa:	07 95       	ror	r16
     7fc:	c8 01       	movw	r24, r16
     7fe:	80 55       	subi	r24, 0x50	; 80
     800:	9f 4f       	sbci	r25, 0xFF	; 255
     802:	bc 01       	movw	r22, r24
     804:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
			XMEM_write((int)xPrev & 0x0F, (int)xPrev & 0x0F);		// Set lower column start address
     808:	c2 01       	movw	r24, r4
     80a:	8f 70       	andi	r24, 0x0F	; 15
     80c:	99 27       	eor	r25, r25
     80e:	bc 01       	movw	r22, r24
     810:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
			XMEM_write(0x10 + ((int)xPrev >> 4), 0x10 + ((int)xPrev >> 4));  // Set upper column address
     814:	c2 01       	movw	r24, r4
     816:	95 95       	asr	r25
     818:	87 95       	ror	r24
     81a:	95 95       	asr	r25
     81c:	87 95       	ror	r24
     81e:	95 95       	asr	r25
     820:	87 95       	ror	r24
     822:	95 95       	asr	r25
     824:	87 95       	ror	r24
     826:	40 96       	adiw	r24, 0x10	; 16
     828:	bc 01       	movw	r22, r24
     82a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
			
			SRAMvalue = XMEM_read(0x800 + (int)yPrev/8 * 128 + (int)xPrev);	//remove old ball
     82e:	00 5f       	subi	r16, 0xF0	; 240
     830:	1f 4f       	sbci	r17, 0xFF	; 255
     832:	c8 01       	movw	r24, r16
     834:	96 95       	lsr	r25
     836:	98 2f       	mov	r25, r24
     838:	88 27       	eor	r24, r24
     83a:	97 95       	ror	r25
     83c:	87 95       	ror	r24
     83e:	84 0d       	add	r24, r4
     840:	95 1d       	adc	r25, r5
     842:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <XMEM_read>
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
     846:	99 27       	eor	r25, r25
     848:	bc 01       	movw	r22, r24
     84a:	7e 5f       	subi	r23, 0xFE	; 254
     84c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
			
			x += x_vel;
     850:	2f 85       	ldd	r18, Y+15	; 0x0f
     852:	38 89       	ldd	r19, Y+16	; 0x10
     854:	49 89       	ldd	r20, Y+17	; 0x11
     856:	5a 89       	ldd	r21, Y+18	; 0x12
     858:	63 2d       	mov	r22, r3
     85a:	72 2d       	mov	r23, r2
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	9a 81       	ldd	r25, Y+2	; 0x02
     860:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__addsf3>
     864:	36 2e       	mov	r3, r22
     866:	27 2e       	mov	r2, r23
     868:	89 83       	std	Y+1, r24	; 0x01
     86a:	9a 83       	std	Y+2, r25	; 0x02
			y += y_vel;
     86c:	2b 85       	ldd	r18, Y+11	; 0x0b
     86e:	3c 85       	ldd	r19, Y+12	; 0x0c
     870:	4d 85       	ldd	r20, Y+13	; 0x0d
     872:	5e 85       	ldd	r21, Y+14	; 0x0e
     874:	6b 81       	ldd	r22, Y+3	; 0x03
     876:	7c 81       	ldd	r23, Y+4	; 0x04
     878:	8d 81       	ldd	r24, Y+5	; 0x05
     87a:	9e 81       	ldd	r25, Y+6	; 0x06
     87c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__addsf3>
     880:	6b 83       	std	Y+3, r22	; 0x03
     882:	7c 83       	std	Y+4, r23	; 0x04
     884:	8d 83       	std	Y+5, r24	; 0x05
     886:	9e 83       	std	Y+6, r25	; 0x06
			if (x <= 0) {
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e0       	ldi	r20, 0x00	; 0
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	63 2d       	mov	r22, r3
     892:	72 2d       	mov	r23, r2
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	9a 81       	ldd	r25, Y+2	; 0x02
     898:	0e 94 de 08 	call	0x11bc	; 0x11bc <__cmpsf2>
     89c:	18 16       	cp	r1, r24
     89e:	34 f0       	brlt	.+12     	; 0x8ac <MENU_pong+0x160>
				leftPoints += 1;
     8a0:	8b 89       	ldd	r24, Y+19	; 0x13
     8a2:	9c 89       	ldd	r25, Y+20	; 0x14
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	9c 8b       	std	Y+20, r25	; 0x14
     8a8:	8b 8b       	std	Y+19, r24	; 0x13
				break;
     8aa:	a1 c1       	rjmp	.+834    	; 0xbee <MENU_pong+0x4a2>
			}
			else if (x >= 127) {
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	4e ef       	ldi	r20, 0xFE	; 254
     8b2:	52 e4       	ldi	r21, 0x42	; 66
     8b4:	63 2d       	mov	r22, r3
     8b6:	72 2d       	mov	r23, r2
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	9a 81       	ldd	r25, Y+2	; 0x02
     8bc:	0e 94 c5 09 	call	0x138a	; 0x138a <__gesf2>
     8c0:	88 23       	and	r24, r24
     8c2:	34 f0       	brlt	.+12     	; 0x8d0 <MENU_pong+0x184>
				rightPoints += 1;
     8c4:	ad 89       	ldd	r26, Y+21	; 0x15
     8c6:	be 89       	ldd	r27, Y+22	; 0x16
     8c8:	11 96       	adiw	r26, 0x01	; 1
     8ca:	be 8b       	std	Y+22, r27	; 0x16
     8cc:	ad 8b       	std	Y+21, r26	; 0x15
				break;
     8ce:	8f c1       	rjmp	.+798    	; 0xbee <MENU_pong+0x4a2>
			}
			else if (x == leftPaddleX + 1 && y <= leftPaddleY + 4 && y >= leftPaddleY - 4) {
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e8       	ldi	r20, 0x80	; 128
     8d6:	50 e4       	ldi	r21, 0x40	; 64
     8d8:	63 2d       	mov	r22, r3
     8da:	72 2d       	mov	r23, r2
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	9a 81       	ldd	r25, Y+2	; 0x02
     8e0:	0e 94 de 08 	call	0x11bc	; 0x11bc <__cmpsf2>
     8e4:	81 11       	cpse	r24, r1
     8e6:	49 c0       	rjmp	.+146    	; 0x97a <MENU_pong+0x22e>
     8e8:	0b 2d       	mov	r16, r11
     8ea:	10 e0       	ldi	r17, 0x00	; 0
     8ec:	b8 01       	movw	r22, r16
     8ee:	6c 5f       	subi	r22, 0xFC	; 252
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	88 27       	eor	r24, r24
     8f4:	77 fd       	sbrc	r23, 7
     8f6:	80 95       	com	r24
     8f8:	98 2f       	mov	r25, r24
     8fa:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     8fe:	9b 01       	movw	r18, r22
     900:	ac 01       	movw	r20, r24
     902:	6b 81       	ldd	r22, Y+3	; 0x03
     904:	7c 81       	ldd	r23, Y+4	; 0x04
     906:	8d 81       	ldd	r24, Y+5	; 0x05
     908:	9e 81       	ldd	r25, Y+6	; 0x06
     90a:	0e 94 de 08 	call	0x11bc	; 0x11bc <__cmpsf2>
     90e:	18 16       	cp	r1, r24
     910:	0c f4       	brge	.+2      	; 0x914 <MENU_pong+0x1c8>
     912:	85 c0       	rjmp	.+266    	; 0xa1e <MENU_pong+0x2d2>
     914:	b8 01       	movw	r22, r16
     916:	64 50       	subi	r22, 0x04	; 4
     918:	71 09       	sbc	r23, r1
     91a:	88 27       	eor	r24, r24
     91c:	77 fd       	sbrc	r23, 7
     91e:	80 95       	com	r24
     920:	98 2f       	mov	r25, r24
     922:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     926:	9b 01       	movw	r18, r22
     928:	ac 01       	movw	r20, r24
     92a:	6b 81       	ldd	r22, Y+3	; 0x03
     92c:	7c 81       	ldd	r23, Y+4	; 0x04
     92e:	8d 81       	ldd	r24, Y+5	; 0x05
     930:	9e 81       	ldd	r25, Y+6	; 0x06
     932:	0e 94 c5 09 	call	0x138a	; 0x138a <__gesf2>
     936:	88 23       	and	r24, r24
     938:	0c f4       	brge	.+2      	; 0x93c <MENU_pong+0x1f0>
     93a:	71 c0       	rjmp	.+226    	; 0xa1e <MENU_pong+0x2d2>
				difference = y - leftPaddleY;
     93c:	b8 01       	movw	r22, r16
     93e:	88 27       	eor	r24, r24
     940:	77 fd       	sbrc	r23, 7
     942:	80 95       	com	r24
     944:	98 2f       	mov	r25, r24
     946:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     94a:	9b 01       	movw	r18, r22
     94c:	ac 01       	movw	r20, r24
     94e:	6b 81       	ldd	r22, Y+3	; 0x03
     950:	7c 81       	ldd	r23, Y+4	; 0x04
     952:	8d 81       	ldd	r24, Y+5	; 0x05
     954:	9e 81       	ldd	r25, Y+6	; 0x06
     956:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__subsf3>
				y_vel = difference / 8.0;
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	5e e3       	ldi	r21, 0x3E	; 62
     962:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     966:	6b 87       	std	Y+11, r22	; 0x0b
     968:	7c 87       	std	Y+12, r23	; 0x0c
     96a:	8d 87       	std	Y+13, r24	; 0x0d
     96c:	9e 87       	std	Y+14, r25	; 0x0e
				x_vel = 0.5;
     96e:	1f 86       	std	Y+15, r1	; 0x0f
     970:	18 8a       	std	Y+16, r1	; 0x10
     972:	19 8a       	std	Y+17, r1	; 0x11
     974:	bf e3       	ldi	r27, 0x3F	; 63
     976:	ba 8b       	std	Y+18, r27	; 0x12
     978:	52 c0       	rjmp	.+164    	; 0xa1e <MENU_pong+0x2d2>
			}
			else if (x == rightPaddleX - 1 && y <= rightPaddleY + 4 && y >= rightPaddleY - 4) {
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	46 ef       	ldi	r20, 0xF6	; 246
     980:	52 e4       	ldi	r21, 0x42	; 66
     982:	63 2d       	mov	r22, r3
     984:	72 2d       	mov	r23, r2
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	9a 81       	ldd	r25, Y+2	; 0x02
     98a:	0e 94 de 08 	call	0x11bc	; 0x11bc <__cmpsf2>
     98e:	81 11       	cpse	r24, r1
     990:	46 c0       	rjmp	.+140    	; 0xa1e <MENU_pong+0x2d2>
     992:	09 2d       	mov	r16, r9
     994:	10 e0       	ldi	r17, 0x00	; 0
     996:	b8 01       	movw	r22, r16
     998:	6c 5f       	subi	r22, 0xFC	; 252
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	88 27       	eor	r24, r24
     99e:	77 fd       	sbrc	r23, 7
     9a0:	80 95       	com	r24
     9a2:	98 2f       	mov	r25, r24
     9a4:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     9a8:	9b 01       	movw	r18, r22
     9aa:	ac 01       	movw	r20, r24
     9ac:	6b 81       	ldd	r22, Y+3	; 0x03
     9ae:	7c 81       	ldd	r23, Y+4	; 0x04
     9b0:	8d 81       	ldd	r24, Y+5	; 0x05
     9b2:	9e 81       	ldd	r25, Y+6	; 0x06
     9b4:	0e 94 de 08 	call	0x11bc	; 0x11bc <__cmpsf2>
     9b8:	18 16       	cp	r1, r24
     9ba:	8c f1       	brlt	.+98     	; 0xa1e <MENU_pong+0x2d2>
     9bc:	b8 01       	movw	r22, r16
     9be:	64 50       	subi	r22, 0x04	; 4
     9c0:	71 09       	sbc	r23, r1
     9c2:	88 27       	eor	r24, r24
     9c4:	77 fd       	sbrc	r23, 7
     9c6:	80 95       	com	r24
     9c8:	98 2f       	mov	r25, r24
     9ca:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     9ce:	9b 01       	movw	r18, r22
     9d0:	ac 01       	movw	r20, r24
     9d2:	6b 81       	ldd	r22, Y+3	; 0x03
     9d4:	7c 81       	ldd	r23, Y+4	; 0x04
     9d6:	8d 81       	ldd	r24, Y+5	; 0x05
     9d8:	9e 81       	ldd	r25, Y+6	; 0x06
     9da:	0e 94 c5 09 	call	0x138a	; 0x138a <__gesf2>
     9de:	88 23       	and	r24, r24
     9e0:	f4 f0       	brlt	.+60     	; 0xa1e <MENU_pong+0x2d2>
				difference = y - rightPaddleY;
     9e2:	b8 01       	movw	r22, r16
     9e4:	88 27       	eor	r24, r24
     9e6:	77 fd       	sbrc	r23, 7
     9e8:	80 95       	com	r24
     9ea:	98 2f       	mov	r25, r24
     9ec:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     9f0:	9b 01       	movw	r18, r22
     9f2:	ac 01       	movw	r20, r24
     9f4:	6b 81       	ldd	r22, Y+3	; 0x03
     9f6:	7c 81       	ldd	r23, Y+4	; 0x04
     9f8:	8d 81       	ldd	r24, Y+5	; 0x05
     9fa:	9e 81       	ldd	r25, Y+6	; 0x06
     9fc:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__subsf3>
				y_vel = difference / 8.0;
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	5e e3       	ldi	r21, 0x3E	; 62
     a08:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     a0c:	6b 87       	std	Y+11, r22	; 0x0b
     a0e:	7c 87       	std	Y+12, r23	; 0x0c
     a10:	8d 87       	std	Y+13, r24	; 0x0d
     a12:	9e 87       	std	Y+14, r25	; 0x0e
				x_vel = -0.5;
     a14:	1f 86       	std	Y+15, r1	; 0x0f
     a16:	18 8a       	std	Y+16, r1	; 0x10
     a18:	19 8a       	std	Y+17, r1	; 0x11
     a1a:	ef eb       	ldi	r30, 0xBF	; 191
     a1c:	ea 8b       	std	Y+18, r30	; 0x12
			}
			if (y <= 0 || y >= 63) {
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	6b 81       	ldd	r22, Y+3	; 0x03
     a28:	7c 81       	ldd	r23, Y+4	; 0x04
     a2a:	8d 81       	ldd	r24, Y+5	; 0x05
     a2c:	9e 81       	ldd	r25, Y+6	; 0x06
     a2e:	0e 94 de 08 	call	0x11bc	; 0x11bc <__cmpsf2>
     a32:	18 16       	cp	r1, r24
     a34:	64 f4       	brge	.+24     	; 0xa4e <MENU_pong+0x302>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	4c e7       	ldi	r20, 0x7C	; 124
     a3c:	52 e4       	ldi	r21, 0x42	; 66
     a3e:	6b 81       	ldd	r22, Y+3	; 0x03
     a40:	7c 81       	ldd	r23, Y+4	; 0x04
     a42:	8d 81       	ldd	r24, Y+5	; 0x05
     a44:	9e 81       	ldd	r25, Y+6	; 0x06
     a46:	0e 94 c5 09 	call	0x138a	; 0x138a <__gesf2>
     a4a:	88 23       	and	r24, r24
     a4c:	4c f0       	brlt	.+18     	; 0xa60 <MENU_pong+0x314>
				y_vel = -y_vel;
     a4e:	8b 85       	ldd	r24, Y+11	; 0x0b
     a50:	9c 85       	ldd	r25, Y+12	; 0x0c
     a52:	ad 85       	ldd	r26, Y+13	; 0x0d
     a54:	be 85       	ldd	r27, Y+14	; 0x0e
     a56:	b0 58       	subi	r27, 0x80	; 128
     a58:	8b 87       	std	Y+11, r24	; 0x0b
     a5a:	9c 87       	std	Y+12, r25	; 0x0c
     a5c:	ad 87       	std	Y+13, r26	; 0x0d
     a5e:	be 87       	std	Y+14, r27	; 0x0e
				x_vel = 0.5;
			}
			else if (x == rightPaddleX - 1 && y <= rightPaddleY + 4 && y >= rightPaddleY - 4) {
				difference = y - rightPaddleY;
				y_vel = difference / 8.0;
				x_vel = -0.5;
     a60:	03 e0       	ldi	r16, 0x03	; 3
     a62:	18 e0       	ldi	r17, 0x08	; 8
			if (y <= 0 || y >= 63) {
				y_vel = -y_vel;
			}

			for (int page = 0; page < 8; page++) {	//clears buffer along paddle-x-axes
				XMEM_write(0, 0x800 + page * 128 + 3);
     a64:	b8 01       	movw	r22, r16
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
     a6e:	b8 01       	movw	r22, r16
     a70:	67 58       	subi	r22, 0x87	; 135
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
				XMEM_write(0, 0x800 + page * 128 + 124);
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
     a7c:	00 58       	subi	r16, 0x80	; 128
     a7e:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if (y <= 0 || y >= 63) {
				y_vel = -y_vel;
			}

			for (int page = 0; page < 8; page++) {	//clears buffer along paddle-x-axes
     a80:	03 30       	cpi	r16, 0x03	; 3
     a82:	9c e0       	ldi	r25, 0x0C	; 12
     a84:	19 07       	cpc	r17, r25
     a86:	71 f7       	brne	.-36     	; 0xa64 <MENU_pong+0x318>
     a88:	8b 2d       	mov	r24, r11
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	8c 01       	movw	r16, r24
     a8e:	04 50       	subi	r16, 0x04	; 4
     a90:	11 09       	sbc	r17, r1
     a92:	5c 01       	movw	r10, r24
     a94:	a5 e0       	ldi	r26, 0x05	; 5
     a96:	aa 0e       	add	r10, r26
     a98:	b1 1c       	adc	r11, r1
     a9a:	29 2d       	mov	r18, r9
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	49 01       	movw	r8, r18
     aa0:	88 1a       	sub	r8, r24
     aa2:	99 0a       	sbc	r9, r25
				XMEM_write(0, 0x800 + page * 128 + 3);
				XMEM_write(0, 0x800 + page * 128 + 124);
			}

			for (int i = -4; i < 5; i++) {
				OLED_set_pixel(leftPaddleX, leftPaddleY + i);
     aa4:	b8 01       	movw	r22, r16
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 e5 06 	call	0xdca	; 0xdca <OLED_set_pixel>
     aae:	b4 01       	movw	r22, r8
     ab0:	60 0f       	add	r22, r16
     ab2:	71 1f       	adc	r23, r17
				OLED_set_pixel(rightPaddleX, rightPaddleY + i);
     ab4:	8c e7       	ldi	r24, 0x7C	; 124
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 e5 06 	call	0xdca	; 0xdca <OLED_set_pixel>
     abc:	0f 5f       	subi	r16, 0xFF	; 255
     abe:	1f 4f       	sbci	r17, 0xFF	; 255
			for (int page = 0; page < 8; page++) {	//clears buffer along paddle-x-axes
				XMEM_write(0, 0x800 + page * 128 + 3);
				XMEM_write(0, 0x800 + page * 128 + 124);
			}

			for (int i = -4; i < 5; i++) {
     ac0:	0a 15       	cp	r16, r10
     ac2:	1b 05       	cpc	r17, r11
     ac4:	79 f7       	brne	.-34     	; 0xaa4 <MENU_pong+0x358>
				OLED_set_pixel(leftPaddleX, leftPaddleY + i);
				OLED_set_pixel(rightPaddleX, rightPaddleY + i);
			}
			OLED_set_pixel((int)x, (int)y);	//sets current ball c
     ac6:	6b 81       	ldd	r22, Y+3	; 0x03
     ac8:	7c 81       	ldd	r23, Y+4	; 0x04
     aca:	8d 81       	ldd	r24, Y+5	; 0x05
     acc:	9e 81       	ldd	r25, Y+6	; 0x06
     ace:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__fixsfsi>
     ad2:	6f 83       	std	Y+7, r22	; 0x07
     ad4:	78 87       	std	Y+8, r23	; 0x08
     ad6:	89 87       	std	Y+9, r24	; 0x09
     ad8:	9a 87       	std	Y+10, r25	; 0x0a
     ada:	63 2d       	mov	r22, r3
     adc:	72 2d       	mov	r23, r2
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	9a 81       	ldd	r25, Y+2	; 0x02
     ae2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__fixsfsi>
     ae6:	4b 01       	movw	r8, r22
     ae8:	5c 01       	movw	r10, r24
     aea:	6f 81       	ldd	r22, Y+7	; 0x07
     aec:	78 85       	ldd	r23, Y+8	; 0x08
     aee:	c4 01       	movw	r24, r8
     af0:	0e 94 e5 06 	call	0xdca	; 0xdca <OLED_set_pixel>
			OLED_reset_pixel((int)xPrev, (int)yPrev);	//clears last ball location
     af4:	b6 01       	movw	r22, r12
     af6:	c2 01       	movw	r24, r4
     af8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <OLED_reset_pixel>
     afc:	03 e0       	ldi	r16, 0x03	; 3
     afe:	18 e0       	ldi	r17, 0x08	; 8
     b00:	0f 2e       	mov	r0, r31
     b02:	f0 eb       	ldi	r31, 0xB0	; 176
     b04:	ef 2e       	mov	r14, r31
     b06:	f0 2d       	mov	r31, r0
     b08:	f1 2c       	mov	r15, r1




			for (int page = 0; page < 8; page++) {	//set OLED along left paddle column
				XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
     b0a:	b7 01       	movw	r22, r14
     b0c:	c7 01       	movw	r24, r14
     b0e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>

				XMEM_write(lowerColLeftPaddle, lowerColLeftPaddle);		// Set lower column start address
     b12:	63 e0       	ldi	r22, 0x03	; 3
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
				XMEM_write(0x10 + upperColLeftPaddle, 0x10 + upperColLeftPaddle);  // Set upper column address
     b1e:	60 e1       	ldi	r22, 0x10	; 16
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	80 e1       	ldi	r24, 0x10	; 16
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>

				SRAMvalue = XMEM_read(0x800 + page * 128 + leftPaddleX);
     b2a:	c8 01       	movw	r24, r16
     b2c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <XMEM_read>
				XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
     b30:	99 27       	eor	r25, r25
     b32:	bc 01       	movw	r22, r24
     b34:	7e 5f       	subi	r23, 0xFE	; 254
     b36:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>

				XMEM_write(lowerColRightPaddle, lowerColRightPaddle);		//do the same for the right paddle
     b3a:	6c e0       	ldi	r22, 0x0C	; 12
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	8c e0       	ldi	r24, 0x0C	; 12
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
				XMEM_write(0x10 + upperColRightPaddle, 0x10 + upperColRightPaddle); 
     b46:	67 e1       	ldi	r22, 0x17	; 23
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	87 e1       	ldi	r24, 0x17	; 23
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>

				SRAMvalue = XMEM_read(0x800 + page * 128 + rightPaddleX);
     b52:	c8 01       	movw	r24, r16
     b54:	87 58       	subi	r24, 0x87	; 135
     b56:	9f 4f       	sbci	r25, 0xFF	; 255
     b58:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <XMEM_read>
				XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
     b5c:	99 27       	eor	r25, r25
     b5e:	bc 01       	movw	r22, r24
     b60:	7e 5f       	subi	r23, 0xFE	; 254
     b62:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
     b66:	bf ef       	ldi	r27, 0xFF	; 255
     b68:	eb 1a       	sub	r14, r27
     b6a:	fb 0a       	sbc	r15, r27
     b6c:	00 58       	subi	r16, 0x80	; 128
     b6e:	1f 4f       	sbci	r17, 0xFF	; 255
			OLED_reset_pixel((int)xPrev, (int)yPrev);	//clears last ball location




			for (int page = 0; page < 8; page++) {	//set OLED along left paddle column
     b70:	e8 eb       	ldi	r30, 0xB8	; 184
     b72:	ee 16       	cp	r14, r30
     b74:	f1 04       	cpc	r15, r1
     b76:	49 f6       	brne	.-110    	; 0xb0a <MENU_pong+0x3be>
				SRAMvalue = XMEM_read(0x800 + page * 128 + rightPaddleX);
				XMEM_write(SRAMvalue, 0x200 + SRAMvalue);

			}

			XMEM_write(0xB0 + (int)y/8, 0xB0 + (int)y/8);	//set page to ball-page
     b78:	8f 81       	ldd	r24, Y+7	; 0x07
     b7a:	98 85       	ldd	r25, Y+8	; 0x08
     b7c:	99 23       	and	r25, r25
     b7e:	0c f4       	brge	.+2      	; 0xb82 <MENU_pong+0x436>
     b80:	07 96       	adiw	r24, 0x07	; 7
     b82:	8c 01       	movw	r16, r24
     b84:	15 95       	asr	r17
     b86:	07 95       	ror	r16
     b88:	15 95       	asr	r17
     b8a:	07 95       	ror	r16
     b8c:	15 95       	asr	r17
     b8e:	07 95       	ror	r16
     b90:	c8 01       	movw	r24, r16
     b92:	80 55       	subi	r24, 0x50	; 80
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	bc 01       	movw	r22, r24
     b98:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
			XMEM_write((int)x & 0x0F, (int)x & 0x0F);		// Set lower column start address
     b9c:	c4 01       	movw	r24, r8
     b9e:	8f 70       	andi	r24, 0x0F	; 15
     ba0:	99 27       	eor	r25, r25
     ba2:	bc 01       	movw	r22, r24
     ba4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
			XMEM_write(0x10 + ((int)x >> 4), 0x10 + ((int)x >> 4));  // Set upper column address
     ba8:	c4 01       	movw	r24, r8
     baa:	95 95       	asr	r25
     bac:	87 95       	ror	r24
     bae:	95 95       	asr	r25
     bb0:	87 95       	ror	r24
     bb2:	95 95       	asr	r25
     bb4:	87 95       	ror	r24
     bb6:	95 95       	asr	r25
     bb8:	87 95       	ror	r24
     bba:	40 96       	adiw	r24, 0x10	; 16
     bbc:	bc 01       	movw	r22, r24
     bbe:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
			
			SRAMvalue = XMEM_read(0x800 + (int)y/8 * 128 + (int)x);	//set new ball
     bc2:	00 5f       	subi	r16, 0xF0	; 240
     bc4:	1f 4f       	sbci	r17, 0xFF	; 255
     bc6:	c8 01       	movw	r24, r16
     bc8:	96 95       	lsr	r25
     bca:	98 2f       	mov	r25, r24
     bcc:	88 27       	eor	r24, r24
     bce:	97 95       	ror	r25
     bd0:	87 95       	ror	r24
     bd2:	88 0d       	add	r24, r8
     bd4:	99 1d       	adc	r25, r9
     bd6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <XMEM_read>
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
     bda:	99 27       	eor	r25, r25
     bdc:	bc 01       	movw	r22, r24
     bde:	7e 5f       	subi	r23, 0xFE	; 254
     be0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
			
			
			while (TIM8_ReadTCNT0() < 50){
     be4:	0e 94 b2 07 	call	0xf64	; 0xf64 <TIM8_ReadTCNT0>
     be8:	c2 97       	sbiw	r24, 0x32	; 50
     bea:	e0 f3       	brcs	.-8      	; 0xbe4 <MENU_pong+0x498>
     bec:	db cd       	rjmp	.-1098   	; 0x7a4 <MENU_pong+0x58>
				
			}
		}
		
		OLED_clearAll();
     bee:	0e 94 96 07 	call	0xf2c	; 0xf2c <OLED_clearAll>
		OLED_print_char(leftPoints + 48, 128 * 3 + 50);
     bf2:	62 eb       	ldi	r22, 0xB2	; 178
     bf4:	71 e0       	ldi	r23, 0x01	; 1
     bf6:	8b 89       	ldd	r24, Y+19	; 0x13
     bf8:	80 5d       	subi	r24, 0xD0	; 208
     bfa:	0e 94 9c 06 	call	0xd38	; 0xd38 <OLED_print_char>
		printf("leftPoints = %d", leftPoints);
     bfe:	fc 89       	ldd	r31, Y+20	; 0x14
     c00:	ff 93       	push	r31
     c02:	2b 89       	ldd	r18, Y+19	; 0x13
     c04:	2f 93       	push	r18
     c06:	a8 e0       	ldi	r26, 0x08	; 8
     c08:	b1 e0       	ldi	r27, 0x01	; 1
     c0a:	bf 93       	push	r27
     c0c:	af 93       	push	r26
     c0e:	0e 94 9f 0a 	call	0x153e	; 0x153e <printf>
		OLED_print_char(rightPoints + 48, 128 * 3 + 70);
     c12:	66 ec       	ldi	r22, 0xC6	; 198
     c14:	71 e0       	ldi	r23, 0x01	; 1
     c16:	8d 89       	ldd	r24, Y+21	; 0x15
     c18:	80 5d       	subi	r24, 0xD0	; 208
     c1a:	0e 94 9c 06 	call	0xd38	; 0xd38 <OLED_print_char>
		OLED_refresh();
     c1e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <OLED_refresh>
     c22:	ff ef       	ldi	r31, 0xFF	; 255
     c24:	2f ef       	ldi	r18, 0xFF	; 255
     c26:	8d e1       	ldi	r24, 0x1D	; 29
     c28:	f1 50       	subi	r31, 0x01	; 1
     c2a:	20 40       	sbci	r18, 0x00	; 0
     c2c:	80 40       	sbci	r24, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <MENU_pong+0x4dc>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <MENU_pong+0x4e6>
     c32:	00 00       	nop
		_delay_ms(2000);
		OLED_clearAll();
     c34:	0e 94 96 07 	call	0xf2c	; 0xf2c <OLED_clearAll>
		OLED_refresh();
     c38:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <OLED_refresh>
	}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	95 cd       	rjmp	.-1238   	; 0x770 <MENU_pong+0x24>

00000c46 <OLED_init>:
#include "fonts.h"
#include <avr/io.h>


void OLED_init(void) {
	XMEM_write(0xAE, 0xAE); // display off
     c46:	6e ea       	ldi	r22, 0xAE	; 174
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	8e ea       	ldi	r24, 0xAE	; 174
     c4c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0xA1, 0xA1); // segment remap
     c50:	61 ea       	ldi	r22, 0xA1	; 161
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	81 ea       	ldi	r24, 0xA1	; 161
     c56:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0xDA, 0xDA); // common pads hardware: alternative
     c5a:	6a ed       	ldi	r22, 0xDA	; 218
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	8a ed       	ldi	r24, 0xDA	; 218
     c60:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0x12, 0x12);
     c64:	62 e1       	ldi	r22, 0x12	; 18
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	82 e1       	ldi	r24, 0x12	; 18
     c6a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0xC8, 0xC8); // common output scan direction:com63-com0
     c6e:	68 ec       	ldi	r22, 0xC8	; 200
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	88 ec       	ldi	r24, 0xC8	; 200
     c74:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0xA8, 0xA8); //multiplex ratio mode:63 
     c78:	68 ea       	ldi	r22, 0xA8	; 168
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	88 ea       	ldi	r24, 0xA8	; 168
     c7e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0x3F, 0x3F); 
     c82:	6f e3       	ldi	r22, 0x3F	; 63
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0xD5, 0xD5); // display divide ratio/osc. freq. mode
     c8c:	65 ed       	ldi	r22, 0xD5	; 213
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	85 ed       	ldi	r24, 0xD5	; 213
     c92:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0x80, 0x80);
     c96:	60 e8       	ldi	r22, 0x80	; 128
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	80 e8       	ldi	r24, 0x80	; 128
     c9c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0x81, 0x81); // contrast control
     ca0:	61 e8       	ldi	r22, 0x81	; 129
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	81 e8       	ldi	r24, 0x81	; 129
     ca6:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0x50, 0x50);
     caa:	60 e5       	ldi	r22, 0x50	; 80
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	80 e5       	ldi	r24, 0x50	; 80
     cb0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0xD9, 0xD9); // set pre-charge period
     cb4:	69 ed       	ldi	r22, 0xD9	; 217
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	89 ed       	ldi	r24, 0xD9	; 217
     cba:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0x21, 0x21); 
     cbe:	61 e2       	ldi	r22, 0x21	; 33
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	81 e2       	ldi	r24, 0x21	; 33
     cc4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0x20, 0x20); // set page addressing mode
     cc8:	60 e2       	ldi	r22, 0x20	; 32
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	80 e2       	ldi	r24, 0x20	; 32
     cce:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0x02, 0x02); 
     cd2:	62 e0       	ldi	r22, 0x02	; 2
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0xDB, 0xDB); // VCOM deselect level mode
     cdc:	6b ed       	ldi	r22, 0xDB	; 219
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	8b ed       	ldi	r24, 0xDB	; 219
     ce2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0x30, 0x30);
     ce6:	60 e3       	ldi	r22, 0x30	; 48
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	80 e3       	ldi	r24, 0x30	; 48
     cec:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0xAD, 0xAD); // master config
     cf0:	6d ea       	ldi	r22, 0xAD	; 173
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	8d ea       	ldi	r24, 0xAD	; 173
     cf6:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0x00, 0x00);
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0xA4, 0xA4); // out follows RAM content
     d04:	64 ea       	ldi	r22, 0xA4	; 164
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	84 ea       	ldi	r24, 0xA4	; 164
     d0a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0xA6, 0xA6); // set normal display
     d0e:	66 ea       	ldi	r22, 0xA6	; 166
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	86 ea       	ldi	r24, 0xA6	; 166
     d14:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0xD3, 0xD3);
     d18:	63 ed       	ldi	r22, 0xD3	; 211
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	83 ed       	ldi	r24, 0xD3	; 211
     d1e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0x00, 0x00);
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	XMEM_write(0xAF, 0xAF); // display on
     d2c:	6f ea       	ldi	r22, 0xAF	; 175
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	8f ea       	ldi	r24, 0xAF	; 175
     d32:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
     d36:	08 95       	ret

00000d38 <OLED_print_char>:
	}
}



void OLED_print_char(char c, int offset) {
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	eb 01       	movw	r28, r22
     d46:	d8 5f       	subi	r29, 0xF8	; 248
	c -= 32; // ASCII offset 
     d48:	80 52       	subi	r24, 0x20	; 32
     d4a:	e8 2e       	mov	r14, r24
     d4c:	f1 2c       	mov	r15, r1
     d4e:	ee 0c       	add	r14, r14
     d50:	ff 1c       	adc	r15, r15
     d52:	ee 0c       	add	r14, r14
     d54:	ff 1c       	adc	r15, r15
     d56:	ee 0c       	add	r14, r14
     d58:	ff 1c       	adc	r15, r15
     d5a:	c7 01       	movw	r24, r14
     d5c:	86 1b       	sub	r24, r22
     d5e:	97 0b       	sbc	r25, r23
	for (int row = 0; row < 8; row++) {
     d60:	00 e0       	ldi	r16, 0x00	; 0
     d62:	10 e0       	ldi	r17, 0x00	; 0
     d64:	9c 01       	movw	r18, r24
     d66:	20 59       	subi	r18, 0x90	; 144
     d68:	37 40       	sbci	r19, 0x07	; 7
     d6a:	79 01       	movw	r14, r18
     d6c:	f7 01       	movw	r30, r14
     d6e:	ec 0f       	add	r30, r28
     d70:	fd 1f       	adc	r31, r29
		//printf("\n\r%X0", pgm_read_byte(&font8[c][row]));
		XMEM_write(pgm_read_byte(&font8[c][row]), 0x800 + row + offset);
     d72:	84 91       	lpm	r24, Z
     d74:	be 01       	movw	r22, r28
     d76:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>



void OLED_print_char(char c, int offset) {
	c -= 32; // ASCII offset 
	for (int row = 0; row < 8; row++) {
     d7a:	0f 5f       	subi	r16, 0xFF	; 255
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	21 96       	adiw	r28, 0x01	; 1
     d80:	08 30       	cpi	r16, 0x08	; 8
     d82:	11 05       	cpc	r17, r1
     d84:	99 f7       	brne	.-26     	; 0xd6c <OLED_print_char+0x34>
		//printf("\n\r%X0", pgm_read_byte(&font8[c][row]));
		XMEM_write(pgm_read_byte(&font8[c][row]), 0x800 + row + offset);
	}
}
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	08 95       	ret

00000d94 <OLED_print_string>:

void OLED_print_string(char *c, int offset) {
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	fc 01       	movw	r30, r24
	int i = 0;
	while (c[i] != '\0') {
     d9e:	80 81       	ld	r24, Z
     da0:	88 23       	and	r24, r24
     da2:	71 f0       	breq	.+28     	; 0xdc0 <OLED_print_string+0x2c>
     da4:	c6 2f       	mov	r28, r22
     da6:	d7 2f       	mov	r29, r23
     da8:	8f 01       	movw	r16, r30
     daa:	0f 5f       	subi	r16, 0xFF	; 255
     dac:	1f 4f       	sbci	r17, 0xFF	; 255
		OLED_print_char(c[i], i*8 + offset);
     dae:	be 01       	movw	r22, r28
     db0:	0e 94 9c 06 	call	0xd38	; 0xd38 <OLED_print_char>
	}
}

void OLED_print_string(char *c, int offset) {
	int i = 0;
	while (c[i] != '\0') {
     db4:	f8 01       	movw	r30, r16
     db6:	81 91       	ld	r24, Z+
     db8:	8f 01       	movw	r16, r30
     dba:	28 96       	adiw	r28, 0x08	; 8
     dbc:	81 11       	cpse	r24, r1
     dbe:	f7 cf       	rjmp	.-18     	; 0xdae <OLED_print_string+0x1a>
		OLED_print_char(c[i], i*8 + offset);
		i++;
	}
}
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	08 95       	ret

00000dca <OLED_set_pixel>:

void OLED_set_pixel(int x, int y){
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
	if (x < 128 && x >= 0 && y < 64 && y >= 0){
     dd2:	80 38       	cpi	r24, 0x80	; 128
     dd4:	91 05       	cpc	r25, r1
     dd6:	70 f5       	brcc	.+92     	; 0xe34 <OLED_set_pixel+0x6a>
     dd8:	60 34       	cpi	r22, 0x40	; 64
     dda:	71 05       	cpc	r23, r1
     ddc:	58 f5       	brcc	.+86     	; 0xe34 <OLED_set_pixel+0x6a>
		int page = y/8;
     dde:	eb 01       	movw	r28, r22
     de0:	77 23       	and	r23, r23
     de2:	0c f4       	brge	.+2      	; 0xde6 <OLED_set_pixel+0x1c>
     de4:	27 96       	adiw	r28, 0x07	; 7
     de6:	d5 95       	asr	r29
     de8:	c7 95       	ror	r28
     dea:	d5 95       	asr	r29
     dec:	c7 95       	ror	r28
     dee:	d5 95       	asr	r29
     df0:	c7 95       	ror	r28
		int height = y - page*8;
     df2:	9e 01       	movw	r18, r28
     df4:	22 0f       	add	r18, r18
     df6:	33 1f       	adc	r19, r19
     df8:	22 0f       	add	r18, r18
     dfa:	33 1f       	adc	r19, r19
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	8b 01       	movw	r16, r22
     e02:	02 1b       	sub	r16, r18
     e04:	13 0b       	sbc	r17, r19
		uint16_t index = 0x800 + page*128 + x;
     e06:	60 96       	adiw	r28, 0x10	; 16
     e08:	d6 95       	lsr	r29
     e0a:	dc 2f       	mov	r29, r28
     e0c:	cc 27       	eor	r28, r28
     e0e:	d7 95       	ror	r29
     e10:	c7 95       	ror	r28
     e12:	c8 0f       	add	r28, r24
     e14:	d9 1f       	adc	r29, r25
		uint8_t value = XMEM_read(index);
     e16:	ce 01       	movw	r24, r28
     e18:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <XMEM_read>
		value |= (1 << height);
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	9b 01       	movw	r18, r22
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <OLED_set_pixel+0x5e>
     e24:	22 0f       	add	r18, r18
     e26:	33 1f       	adc	r19, r19
     e28:	0a 95       	dec	r16
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <OLED_set_pixel+0x5a>
		XMEM_write(value, index);
     e2c:	be 01       	movw	r22, r28
     e2e:	82 2b       	or	r24, r18
     e30:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	}
}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	08 95       	ret

00000e3e <OLED_reset_pixel>:

void OLED_reset_pixel(int x, int y){
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
	if (x < 128 && x >= 0 && y < 64 && y >= 0){
     e46:	80 38       	cpi	r24, 0x80	; 128
     e48:	91 05       	cpc	r25, r1
     e4a:	80 f5       	brcc	.+96     	; 0xeac <OLED_reset_pixel+0x6e>
     e4c:	60 34       	cpi	r22, 0x40	; 64
     e4e:	71 05       	cpc	r23, r1
     e50:	68 f5       	brcc	.+90     	; 0xeac <OLED_reset_pixel+0x6e>
	int page = y/8;
     e52:	eb 01       	movw	r28, r22
     e54:	77 23       	and	r23, r23
     e56:	0c f4       	brge	.+2      	; 0xe5a <OLED_reset_pixel+0x1c>
     e58:	27 96       	adiw	r28, 0x07	; 7
     e5a:	d5 95       	asr	r29
     e5c:	c7 95       	ror	r28
     e5e:	d5 95       	asr	r29
     e60:	c7 95       	ror	r28
     e62:	d5 95       	asr	r29
     e64:	c7 95       	ror	r28
	int height = y - page*8;
     e66:	9e 01       	movw	r18, r28
     e68:	22 0f       	add	r18, r18
     e6a:	33 1f       	adc	r19, r19
     e6c:	22 0f       	add	r18, r18
     e6e:	33 1f       	adc	r19, r19
     e70:	22 0f       	add	r18, r18
     e72:	33 1f       	adc	r19, r19
     e74:	8b 01       	movw	r16, r22
     e76:	02 1b       	sub	r16, r18
     e78:	13 0b       	sbc	r17, r19
	uint16_t index = 0x800 + page*128 + x;
     e7a:	60 96       	adiw	r28, 0x10	; 16
     e7c:	d6 95       	lsr	r29
     e7e:	dc 2f       	mov	r29, r28
     e80:	cc 27       	eor	r28, r28
     e82:	d7 95       	ror	r29
     e84:	c7 95       	ror	r28
     e86:	c8 0f       	add	r28, r24
     e88:	d9 1f       	adc	r29, r25
	uint8_t value = XMEM_read(index);
     e8a:	ce 01       	movw	r24, r28
     e8c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <XMEM_read>
	value &= ~(1 << height);
     e90:	61 e0       	ldi	r22, 0x01	; 1
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	9b 01       	movw	r18, r22
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <OLED_reset_pixel+0x5e>
     e98:	22 0f       	add	r18, r18
     e9a:	33 1f       	adc	r19, r19
     e9c:	0a 95       	dec	r16
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <OLED_reset_pixel+0x5a>
     ea0:	89 01       	movw	r16, r18
     ea2:	00 95       	com	r16
	XMEM_write(value, index);
     ea4:	be 01       	movw	r22, r28
     ea6:	80 23       	and	r24, r16
     ea8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	}
}
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	08 95       	ret

00000eb6 <OLED_refresh>:


void OLED_refresh(void){
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	00 e0       	ldi	r16, 0x00	; 0
     ec4:	18 e0       	ldi	r17, 0x08	; 8
     ec6:	0f 2e       	mov	r0, r31
     ec8:	f0 eb       	ldi	r31, 0xB0	; 176
     eca:	ef 2e       	mov	r14, r31
     ecc:	f1 2c       	mov	r15, r1
     ece:	f0 2d       	mov	r31, r0
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
     ed0:	b7 01       	movw	r22, r14
     ed2:	8e 2d       	mov	r24, r14
     ed4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
		XMEM_write(0, 0);		// Set lower column start address
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
		XMEM_write(0x10, 0x10);  // Set data register
     ee2:	60 e1       	ldi	r22, 0x10	; 16
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	80 e1       	ldi	r24, 0x10	; 16
     ee8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
		for (int column = 0; column < 128; column++){
     eec:	c0 e0       	ldi	r28, 0x00	; 0
     eee:	d0 e0       	ldi	r29, 0x00	; 0
			uint8_t SRAMvalue = XMEM_read(0x800 + page*128 + column);
     ef0:	ce 01       	movw	r24, r28
     ef2:	80 0f       	add	r24, r16
     ef4:	91 1f       	adc	r25, r17
     ef6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <XMEM_read>
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
     efa:	68 2f       	mov	r22, r24
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	7e 5f       	subi	r23, 0xFE	; 254
     f00:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
		XMEM_write(0, 0);		// Set lower column start address
		XMEM_write(0x10, 0x10);  // Set data register
		for (int column = 0; column < 128; column++){
     f04:	21 96       	adiw	r28, 0x01	; 1
     f06:	c0 38       	cpi	r28, 0x80	; 128
     f08:	d1 05       	cpc	r29, r1
     f0a:	91 f7       	brne	.-28     	; 0xef0 <OLED_refresh+0x3a>
     f0c:	8f ef       	ldi	r24, 0xFF	; 255
     f0e:	e8 1a       	sub	r14, r24
     f10:	f8 0a       	sbc	r15, r24
     f12:	00 58       	subi	r16, 0x80	; 128
     f14:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}


void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
     f16:	88 eb       	ldi	r24, 0xB8	; 184
     f18:	e8 16       	cp	r14, r24
     f1a:	f1 04       	cpc	r15, r1
     f1c:	c9 f6       	brne	.-78     	; 0xed0 <OLED_refresh+0x1a>
		for (int column = 0; column < 128; column++){
			uint8_t SRAMvalue = XMEM_read(0x800 + page*128 + column);
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
		}
	}
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	08 95       	ret

00000f2c <OLED_clearAll>:


void OLED_clearAll(void) {
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
	for (uint16_t index = 0x800; index < 0x800 + 1024; index++){
     f30:	c0 e0       	ldi	r28, 0x00	; 0
     f32:	d8 e0       	ldi	r29, 0x08	; 8
		XMEM_write(0, index);
     f34:	be 01       	movw	r22, r28
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <XMEM_write>
	}
}


void OLED_clearAll(void) {
	for (uint16_t index = 0x800; index < 0x800 + 1024; index++){
     f3c:	21 96       	adiw	r28, 0x01	; 1
     f3e:	c1 15       	cp	r28, r1
     f40:	8c e0       	ldi	r24, 0x0C	; 12
     f42:	d8 07       	cpc	r29, r24
     f44:	b9 f7       	brne	.-18     	; 0xf34 <OLED_clearAll+0x8>
		XMEM_write(0, index);
	}
}
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <timer_8bit256divisionCheckOnlyinit>:
#include <avr/interrupt.h>

void timer_8bit256divisionCheckOnlyinit(void) {

	// start the timer
	TCCR0 = 0b00000101;
     f4c:	85 e0       	ldi	r24, 0x05	; 5
     f4e:	83 bf       	out	0x33, r24	; 51
	// set prescaler to 256 and start the timer
	TIMSK &= ~(1 << OCIE0 | 1 << TOIE0);
     f50:	89 b7       	in	r24, 0x39	; 57
     f52:	8c 7f       	andi	r24, 0xFC	; 252
     f54:	89 bf       	out	0x39, r24	; 57
     f56:	08 95       	ret

00000f58 <TIM8_WriteTCNT0>:
void TIM8_WriteTCNT0(uint8_t i)
{
	unsigned char sreg;
	//uint8_t i;
	/* Save Global Interrupt Flag */
	sreg = SREG;
     f58:	9f b7       	in	r25, 0x3f	; 63
	/* Disable interrupts */
	cli();
     f5a:	f8 94       	cli
	/* Set TCNTn to i */
	TCNT0 = i;
     f5c:	82 bf       	out	0x32, r24	; 50
	/* Restore Global Interrupt Flag */
	SREG = sreg;
     f5e:	9f bf       	out	0x3f, r25	; 63
	sei();
     f60:	78 94       	sei
     f62:	08 95       	ret

00000f64 <TIM8_ReadTCNT0>:
unsigned int TIM8_ReadTCNT0(void)
{
	unsigned char sreg;
	uint8_t i;
	/* Save Global Interrupt Flag */
	sreg = SREG;
     f64:	9f b7       	in	r25, 0x3f	; 63
	/* Disable interrupts */
	cli();
     f66:	f8 94       	cli
	/* Read TCNTn into i */
	i = TCNT0;
     f68:	82 b7       	in	r24, 0x32	; 50
	/* Restore Global Interrupt Flag */
	SREG = sreg;
     f6a:	9f bf       	out	0x3f, r25	; 63
	sei();
     f6c:	78 94       	sei
	return i;
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	08 95       	ret

00000f72 <UART_transmit>:
#include <util/delay.h>
#include "uart.h"

void UART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while ( ! (UCSR0A & (1<<UDRE0))) {
     f72:	5d 9b       	sbis	0x0b, 5	; 11
     f74:	fe cf       	rjmp	.-4      	; 0xf72 <UART_transmit>
		// waiting...
	}
	// Put data into buffer, sends the data
	UDR0 = data;
     f76:	8c b9       	out	0x0c, r24	; 12
     f78:	08 95       	ret

00000f7a <UART_receive>:
}

unsigned char UART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1 << RXC0))) {
     f7a:	5f 9b       	sbis	0x0b, 7	; 11
     f7c:	fe cf       	rjmp	.-4      	; 0xf7a <UART_receive>
		// wait...
	}
	return UDR0;
     f7e:	8c b1       	in	r24, 0x0c	; 12
	
}
     f80:	08 95       	ret

00000f82 <UART_init>:

void UART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = ubrr>>8;
     f82:	90 bd       	out	0x20, r25	; 32
	UBRR0L = ubrr;
     f84:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     f86:	88 e1       	ldi	r24, 0x18	; 24
     f88:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     f8a:	8e e8       	ldi	r24, 0x8E	; 142
     f8c:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(UART_transmit, UART_receive);
     f8e:	6d eb       	ldi	r22, 0xBD	; 189
     f90:	77 e0       	ldi	r23, 0x07	; 7
     f92:	89 eb       	ldi	r24, 0xB9	; 185
     f94:	97 e0       	ldi	r25, 0x07	; 7
     f96:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <fdevopen>
     f9a:	08 95       	ret

00000f9c <XMEM_init>:
#include "uart.h"
#define BASE_ADDRESS 0x1000

void XMEM_init(void) {
	// Enable XMEM
	MCUCR |= (1 << SRE);
     f9c:	85 b7       	in	r24, 0x35	; 53
     f9e:	80 68       	ori	r24, 0x80	; 128
     fa0:	85 bf       	out	0x35, r24	; 53
	
	// SFIOR = XX100XXX
	// We use PC7-PC4 for JTAG, NOT for XMEM address
	SFIOR |= (1 << XMM2);
     fa2:	80 b7       	in	r24, 0x30	; 48
     fa4:	80 62       	ori	r24, 0x20	; 32
     fa6:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~((1 << XMM1) | (1 << XMM0));
     fa8:	80 b7       	in	r24, 0x30	; 48
     faa:	87 7e       	andi	r24, 0xE7	; 231
     fac:	80 bf       	out	0x30, r24	; 48
     fae:	08 95       	ret

00000fb0 <XMEM_read>:
}

uint8_t XMEM_read(uint16_t address) {
	volatile uint8_t *ext_mem = (uint8_t*) BASE_ADDRESS;
	return ext_mem[address];
     fb0:	90 5f       	subi	r25, 0xF0	; 240
     fb2:	fc 01       	movw	r30, r24
     fb4:	80 81       	ld	r24, Z
}
     fb6:	08 95       	ret

00000fb8 <XMEM_write>:

void XMEM_write(uint8_t data, uint16_t address) {
	volatile uint8_t *ext_mem = (uint8_t *) BASE_ADDRESS;
	ext_mem[address] = data;
     fb8:	fb 01       	movw	r30, r22
     fba:	f0 5f       	subi	r31, 0xF0	; 240
     fbc:	80 83       	st	Z, r24
     fbe:	08 95       	ret

00000fc0 <main>:
#include "Drivers/oled.h"
#define MYUBRR 31


int main(void)
{
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	c6 5b       	subi	r28, 0xB6	; 182
     fca:	d1 09       	sbc	r29, r1
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
	UART_init(MYUBRR);
     fd6:	8f e1       	ldi	r24, 0x1F	; 31
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 c1 07 	call	0xf82	; 0xf82 <UART_init>
	XMEM_init();
     fde:	0e 94 ce 07 	call	0xf9c	; 0xf9c <XMEM_init>
	INTERRUPT_init();
     fe2:	0e 94 80 02 	call	0x500	; 0x500 <INTERRUPT_init>
	btn_init();
     fe6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <btn_init>
	printf("Starting....\n\r");
     fea:	88 e1       	ldi	r24, 0x18	; 24
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	9f 93       	push	r25
     ff0:	8f 93       	push	r24
     ff2:	0e 94 9f 0a 	call	0x153e	; 0x153e <printf>
	OLED_init();
     ff6:	0e 94 23 06 	call	0xc46	; 0xc46 <OLED_init>
	timer_8bit256divisionCheckOnlyinit();
     ffa:	0e 94 a6 07 	call	0xf4c	; 0xf4c <timer_8bit256divisionCheckOnlyinit>
	
	OLED_clearAll();
     ffe:	0e 94 96 07 	call	0xf2c	; 0xf2c <OLED_clearAll>

	//MENU_init();
	OLED_refresh();
    1002:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <OLED_refresh>

	menu_t mainMenu;
	menu_ptr mainMenuPtr = &mainMenu;
	mainMenu.name = "Main menu";
    1006:	87 e2       	ldi	r24, 0x27	; 39
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	9a 8f       	std	Y+26, r25	; 0x1a
    100c:	89 8f       	std	Y+25, r24	; 0x19
	mainMenu.num_children = 3;
    100e:	23 e0       	ldi	r18, 0x03	; 3
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	3c 83       	std	Y+4, r19	; 0x04
    1014:	2b 83       	std	Y+3, r18	; 0x03
	mainMenu.selectedChild = 0;
    1016:	18 8e       	std	Y+24, r1	; 0x18
    1018:	1f 8a       	std	Y+23, r1	; 0x17

	menu_t sub_menu0;
	menu_ptr sub_menu0Ptr = &sub_menu0;
	sub_menu0.parent = mainMenuPtr;
    101a:	ce 01       	movw	r24, r28
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	98 ab       	std	Y+48, r25	; 0x30
    1020:	8f a7       	std	Y+47, r24	; 0x2f
	sub_menu0.num_children = 0;
    1022:	1e 8e       	std	Y+30, r1	; 0x1e
    1024:	1d 8e       	std	Y+29, r1	; 0x1d
	sub_menu0.name = "sub0";
    1026:	41 e3       	ldi	r20, 0x31	; 49
    1028:	51 e0       	ldi	r21, 0x01	; 1
    102a:	5c ab       	std	Y+52, r21	; 0x34
    102c:	4b ab       	std	Y+51, r20	; 0x33

	menu_t sub_menu1;
	menu_ptr sub_menu1Ptr = &sub_menu1;
	sub_menu1.parent = mainMenuPtr;
    102e:	2b 96       	adiw	r28, 0x0b	; 11
    1030:	9f af       	std	Y+63, r25	; 0x3f
    1032:	8e af       	std	Y+62, r24	; 0x3e
    1034:	2b 97       	sbiw	r28, 0x0b	; 11
	sub_menu1.num_children = 3;
    1036:	38 af       	std	Y+56, r19	; 0x38
    1038:	2f ab       	std	Y+55, r18	; 0x37
	sub_menu1.name = "Morofunksjoner";
    103a:	26 e3       	ldi	r18, 0x36	; 54
    103c:	31 e0       	ldi	r19, 0x01	; 1
    103e:	2f 96       	adiw	r28, 0x0f	; 15
    1040:	3f af       	std	Y+63, r19	; 0x3f
    1042:	2e af       	std	Y+62, r18	; 0x3e
    1044:	2f 97       	sbiw	r28, 0x0f	; 15

	menu_t sub_menu2;
	menu_ptr sub_menu2Ptr = &sub_menu2;
	sub_menu2.parent = mainMenuPtr;
    1046:	fe 01       	movw	r30, r28
    1048:	e1 5b       	subi	r30, 0xB1	; 177
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	95 8b       	std	Z+21, r25	; 0x15
    104e:	84 8b       	std	Z+20, r24	; 0x14
	sub_menu2.num_children = 0;
    1050:	13 82       	std	Z+3, r1	; 0x03
    1052:	12 82       	std	Z+2, r1	; 0x02
	sub_menu2.name = "sub2";
    1054:	25 e4       	ldi	r18, 0x45	; 69
    1056:	31 e0       	ldi	r19, 0x01	; 1
    1058:	31 8f       	std	Z+25, r19	; 0x19
    105a:	20 8f       	std	Z+24, r18	; 0x18

	mainMenu.parent = NULL;
    105c:	1e 8a       	std	Y+22, r1	; 0x16
    105e:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu.children[0] = sub_menu0Ptr;
    1060:	9e 01       	movw	r18, r28
    1062:	25 5e       	subi	r18, 0xE5	; 229
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	3e 83       	std	Y+6, r19	; 0x06
    1068:	2d 83       	std	Y+5, r18	; 0x05
	mainMenu.children[1] = sub_menu1Ptr;
    106a:	ae 01       	movw	r20, r28
    106c:	4b 5c       	subi	r20, 0xCB	; 203
    106e:	5f 4f       	sbci	r21, 0xFF	; 255
    1070:	58 87       	std	Y+8, r21	; 0x08
    1072:	4f 83       	std	Y+7, r20	; 0x07
	mainMenu.children[2] = sub_menu2Ptr;
    1074:	fa 87       	std	Y+10, r31	; 0x0a
    1076:	e9 87       	std	Y+9, r30	; 0x09

	menu_t sub_menu00;
	menu_ptr sub_menu00Ptr = &sub_menu00;
	sub_menu00.parent = sub_menu1Ptr;
    1078:	22 5b       	subi	r18, 0xB2	; 178
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	f9 01       	movw	r30, r18
    107e:	55 8b       	std	Z+21, r21	; 0x15
    1080:	44 8b       	std	Z+20, r20	; 0x14
	sub_menu00.num_children = 0;
    1082:	13 82       	std	Z+3, r1	; 0x03
    1084:	12 82       	std	Z+2, r1	; 0x02
	sub_menu00.name = "pong";
    1086:	6a e4       	ldi	r22, 0x4A	; 74
    1088:	71 e0       	ldi	r23, 0x01	; 1
    108a:	71 8f       	std	Z+25, r23	; 0x19
    108c:	60 8f       	std	Z+24, r22	; 0x18
	sub_menu00.fun_ptr = &MENU_pong;
    108e:	66 ea       	ldi	r22, 0xA6	; 166
    1090:	73 e0       	ldi	r23, 0x03	; 3
    1092:	71 83       	std	Z+1, r23	; 0x01
    1094:	60 83       	st	Z, r22

	menu_t sub_menu10;
	menu_ptr sub_menu10Ptr = &sub_menu10;
	sub_menu10.parent = sub_menu1Ptr;
    1096:	de 01       	movw	r26, r28
    1098:	ad 57       	subi	r26, 0x7D	; 125
    109a:	bf 4f       	sbci	r27, 0xFF	; 255
    109c:	55 96       	adiw	r26, 0x15	; 21
    109e:	5c 93       	st	X, r21
    10a0:	4e 93       	st	-X, r20
    10a2:	54 97       	sbiw	r26, 0x14	; 20
	sub_menu10.num_children = 0;
    10a4:	13 96       	adiw	r26, 0x03	; 3
    10a6:	1c 92       	st	X, r1
    10a8:	1e 92       	st	-X, r1
    10aa:	12 97       	sbiw	r26, 0x02	; 2
	sub_menu10.name = "Thomas' CD";
    10ac:	6f e4       	ldi	r22, 0x4F	; 79
    10ae:	71 e0       	ldi	r23, 0x01	; 1
    10b0:	59 96       	adiw	r26, 0x19	; 25
    10b2:	7c 93       	st	X, r23
    10b4:	6e 93       	st	-X, r22
    10b6:	58 97       	sbiw	r26, 0x18	; 24
	sub_menu10.fun_ptr = &MENU_animation;
    10b8:	6a e7       	ldi	r22, 0x7A	; 122
    10ba:	73 e0       	ldi	r23, 0x03	; 3
    10bc:	11 96       	adiw	r26, 0x01	; 1
    10be:	7c 93       	st	X, r23
    10c0:	6e 93       	st	-X, r22

	menu_t sub_menu20;
	menu_ptr sub_menu20Ptr = &sub_menu20;
	sub_menu20.parent = sub_menu1Ptr;
    10c2:	f4 96       	adiw	r30, 0x34	; 52
    10c4:	55 8b       	std	Z+21, r21	; 0x15
    10c6:	44 8b       	std	Z+20, r20	; 0x14
	sub_menu20.num_children = 0;
    10c8:	13 82       	std	Z+3, r1	; 0x03
    10ca:	12 82       	std	Z+2, r1	; 0x02
	sub_menu20.name = "Invers";
    10cc:	4a e5       	ldi	r20, 0x5A	; 90
    10ce:	51 e0       	ldi	r21, 0x01	; 1
    10d0:	51 8f       	std	Z+25, r21	; 0x19
    10d2:	40 8f       	std	Z+24, r20	; 0x18
	sub_menu20.fun_ptr = &MENU_veryFunInvertingFunction;
    10d4:	44 e6       	ldi	r20, 0x64	; 100
    10d6:	53 e0       	ldi	r21, 0x03	; 3
    10d8:	51 83       	std	Z+1, r21	; 0x01
    10da:	40 83       	st	Z, r20


	sub_menu1.children[0] = sub_menu00Ptr;
    10dc:	3a af       	std	Y+58, r19	; 0x3a
    10de:	29 af       	std	Y+57, r18	; 0x39
	sub_menu1.children[1] = sub_menu10Ptr;
    10e0:	bc af       	std	Y+60, r27	; 0x3c
    10e2:	ab af       	std	Y+59, r26	; 0x3b
	sub_menu1.children[2] = sub_menu20Ptr;
    10e4:	fe af       	std	Y+62, r31	; 0x3e
    10e6:	ed af       	std	Y+61, r30	; 0x3d

	MENU_navigate(mainMenuPtr);
    10e8:	0e 94 04 03 	call	0x608	; 0x608 <MENU_navigate>
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	ff cf       	rjmp	.-2      	; 0x10f0 <main+0x130>

000010f2 <__subsf3>:
    10f2:	50 58       	subi	r21, 0x80	; 128

000010f4 <__addsf3>:
    10f4:	bb 27       	eor	r27, r27
    10f6:	aa 27       	eor	r26, r26
    10f8:	0e d0       	rcall	.+28     	; 0x1116 <__addsf3x>
    10fa:	0d c1       	rjmp	.+538    	; 0x1316 <__fp_round>
    10fc:	fe d0       	rcall	.+508    	; 0x12fa <__fp_pscA>
    10fe:	30 f0       	brcs	.+12     	; 0x110c <__addsf3+0x18>
    1100:	03 d1       	rcall	.+518    	; 0x1308 <__fp_pscB>
    1102:	20 f0       	brcs	.+8      	; 0x110c <__addsf3+0x18>
    1104:	31 f4       	brne	.+12     	; 0x1112 <__addsf3+0x1e>
    1106:	9f 3f       	cpi	r25, 0xFF	; 255
    1108:	11 f4       	brne	.+4      	; 0x110e <__addsf3+0x1a>
    110a:	1e f4       	brtc	.+6      	; 0x1112 <__addsf3+0x1e>
    110c:	f3 c0       	rjmp	.+486    	; 0x12f4 <__fp_nan>
    110e:	0e f4       	brtc	.+2      	; 0x1112 <__addsf3+0x1e>
    1110:	e0 95       	com	r30
    1112:	e7 fb       	bst	r30, 7
    1114:	e9 c0       	rjmp	.+466    	; 0x12e8 <__fp_inf>

00001116 <__addsf3x>:
    1116:	e9 2f       	mov	r30, r25
    1118:	0f d1       	rcall	.+542    	; 0x1338 <__fp_split3>
    111a:	80 f3       	brcs	.-32     	; 0x10fc <__addsf3+0x8>
    111c:	ba 17       	cp	r27, r26
    111e:	62 07       	cpc	r22, r18
    1120:	73 07       	cpc	r23, r19
    1122:	84 07       	cpc	r24, r20
    1124:	95 07       	cpc	r25, r21
    1126:	18 f0       	brcs	.+6      	; 0x112e <__addsf3x+0x18>
    1128:	71 f4       	brne	.+28     	; 0x1146 <__addsf3x+0x30>
    112a:	9e f5       	brtc	.+102    	; 0x1192 <__addsf3x+0x7c>
    112c:	27 c1       	rjmp	.+590    	; 0x137c <__fp_zero>
    112e:	0e f4       	brtc	.+2      	; 0x1132 <__addsf3x+0x1c>
    1130:	e0 95       	com	r30
    1132:	0b 2e       	mov	r0, r27
    1134:	ba 2f       	mov	r27, r26
    1136:	a0 2d       	mov	r26, r0
    1138:	0b 01       	movw	r0, r22
    113a:	b9 01       	movw	r22, r18
    113c:	90 01       	movw	r18, r0
    113e:	0c 01       	movw	r0, r24
    1140:	ca 01       	movw	r24, r20
    1142:	a0 01       	movw	r20, r0
    1144:	11 24       	eor	r1, r1
    1146:	ff 27       	eor	r31, r31
    1148:	59 1b       	sub	r21, r25
    114a:	99 f0       	breq	.+38     	; 0x1172 <__addsf3x+0x5c>
    114c:	59 3f       	cpi	r21, 0xF9	; 249
    114e:	50 f4       	brcc	.+20     	; 0x1164 <__addsf3x+0x4e>
    1150:	50 3e       	cpi	r21, 0xE0	; 224
    1152:	68 f1       	brcs	.+90     	; 0x11ae <__addsf3x+0x98>
    1154:	1a 16       	cp	r1, r26
    1156:	f0 40       	sbci	r31, 0x00	; 0
    1158:	a2 2f       	mov	r26, r18
    115a:	23 2f       	mov	r18, r19
    115c:	34 2f       	mov	r19, r20
    115e:	44 27       	eor	r20, r20
    1160:	58 5f       	subi	r21, 0xF8	; 248
    1162:	f3 cf       	rjmp	.-26     	; 0x114a <__addsf3x+0x34>
    1164:	46 95       	lsr	r20
    1166:	37 95       	ror	r19
    1168:	27 95       	ror	r18
    116a:	a7 95       	ror	r26
    116c:	f0 40       	sbci	r31, 0x00	; 0
    116e:	53 95       	inc	r21
    1170:	c9 f7       	brne	.-14     	; 0x1164 <__addsf3x+0x4e>
    1172:	7e f4       	brtc	.+30     	; 0x1192 <__addsf3x+0x7c>
    1174:	1f 16       	cp	r1, r31
    1176:	ba 0b       	sbc	r27, r26
    1178:	62 0b       	sbc	r22, r18
    117a:	73 0b       	sbc	r23, r19
    117c:	84 0b       	sbc	r24, r20
    117e:	ba f0       	brmi	.+46     	; 0x11ae <__addsf3x+0x98>
    1180:	91 50       	subi	r25, 0x01	; 1
    1182:	a1 f0       	breq	.+40     	; 0x11ac <__addsf3x+0x96>
    1184:	ff 0f       	add	r31, r31
    1186:	bb 1f       	adc	r27, r27
    1188:	66 1f       	adc	r22, r22
    118a:	77 1f       	adc	r23, r23
    118c:	88 1f       	adc	r24, r24
    118e:	c2 f7       	brpl	.-16     	; 0x1180 <__addsf3x+0x6a>
    1190:	0e c0       	rjmp	.+28     	; 0x11ae <__addsf3x+0x98>
    1192:	ba 0f       	add	r27, r26
    1194:	62 1f       	adc	r22, r18
    1196:	73 1f       	adc	r23, r19
    1198:	84 1f       	adc	r24, r20
    119a:	48 f4       	brcc	.+18     	; 0x11ae <__addsf3x+0x98>
    119c:	87 95       	ror	r24
    119e:	77 95       	ror	r23
    11a0:	67 95       	ror	r22
    11a2:	b7 95       	ror	r27
    11a4:	f7 95       	ror	r31
    11a6:	9e 3f       	cpi	r25, 0xFE	; 254
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <__addsf3x+0x96>
    11aa:	b3 cf       	rjmp	.-154    	; 0x1112 <__addsf3+0x1e>
    11ac:	93 95       	inc	r25
    11ae:	88 0f       	add	r24, r24
    11b0:	08 f0       	brcs	.+2      	; 0x11b4 <__addsf3x+0x9e>
    11b2:	99 27       	eor	r25, r25
    11b4:	ee 0f       	add	r30, r30
    11b6:	97 95       	ror	r25
    11b8:	87 95       	ror	r24
    11ba:	08 95       	ret

000011bc <__cmpsf2>:
    11bc:	71 d0       	rcall	.+226    	; 0x12a0 <__fp_cmp>
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <__cmpsf2+0x6>
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	08 95       	ret

000011c4 <__fixsfsi>:
    11c4:	04 d0       	rcall	.+8      	; 0x11ce <__fixunssfsi>
    11c6:	68 94       	set
    11c8:	b1 11       	cpse	r27, r1
    11ca:	d9 c0       	rjmp	.+434    	; 0x137e <__fp_szero>
    11cc:	08 95       	ret

000011ce <__fixunssfsi>:
    11ce:	bc d0       	rcall	.+376    	; 0x1348 <__fp_splitA>
    11d0:	88 f0       	brcs	.+34     	; 0x11f4 <__fixunssfsi+0x26>
    11d2:	9f 57       	subi	r25, 0x7F	; 127
    11d4:	90 f0       	brcs	.+36     	; 0x11fa <__fixunssfsi+0x2c>
    11d6:	b9 2f       	mov	r27, r25
    11d8:	99 27       	eor	r25, r25
    11da:	b7 51       	subi	r27, 0x17	; 23
    11dc:	a0 f0       	brcs	.+40     	; 0x1206 <__fixunssfsi+0x38>
    11de:	d1 f0       	breq	.+52     	; 0x1214 <__fixunssfsi+0x46>
    11e0:	66 0f       	add	r22, r22
    11e2:	77 1f       	adc	r23, r23
    11e4:	88 1f       	adc	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	1a f0       	brmi	.+6      	; 0x11f0 <__fixunssfsi+0x22>
    11ea:	ba 95       	dec	r27
    11ec:	c9 f7       	brne	.-14     	; 0x11e0 <__fixunssfsi+0x12>
    11ee:	12 c0       	rjmp	.+36     	; 0x1214 <__fixunssfsi+0x46>
    11f0:	b1 30       	cpi	r27, 0x01	; 1
    11f2:	81 f0       	breq	.+32     	; 0x1214 <__fixunssfsi+0x46>
    11f4:	c3 d0       	rcall	.+390    	; 0x137c <__fp_zero>
    11f6:	b1 e0       	ldi	r27, 0x01	; 1
    11f8:	08 95       	ret
    11fa:	c0 c0       	rjmp	.+384    	; 0x137c <__fp_zero>
    11fc:	67 2f       	mov	r22, r23
    11fe:	78 2f       	mov	r23, r24
    1200:	88 27       	eor	r24, r24
    1202:	b8 5f       	subi	r27, 0xF8	; 248
    1204:	39 f0       	breq	.+14     	; 0x1214 <__fixunssfsi+0x46>
    1206:	b9 3f       	cpi	r27, 0xF9	; 249
    1208:	cc f3       	brlt	.-14     	; 0x11fc <__fixunssfsi+0x2e>
    120a:	86 95       	lsr	r24
    120c:	77 95       	ror	r23
    120e:	67 95       	ror	r22
    1210:	b3 95       	inc	r27
    1212:	d9 f7       	brne	.-10     	; 0x120a <__fixunssfsi+0x3c>
    1214:	3e f4       	brtc	.+14     	; 0x1224 <__fixunssfsi+0x56>
    1216:	90 95       	com	r25
    1218:	80 95       	com	r24
    121a:	70 95       	com	r23
    121c:	61 95       	neg	r22
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	8f 4f       	sbci	r24, 0xFF	; 255
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	08 95       	ret

00001226 <__floatunsisf>:
    1226:	e8 94       	clt
    1228:	09 c0       	rjmp	.+18     	; 0x123c <__floatsisf+0x12>

0000122a <__floatsisf>:
    122a:	97 fb       	bst	r25, 7
    122c:	3e f4       	brtc	.+14     	; 0x123c <__floatsisf+0x12>
    122e:	90 95       	com	r25
    1230:	80 95       	com	r24
    1232:	70 95       	com	r23
    1234:	61 95       	neg	r22
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	8f 4f       	sbci	r24, 0xFF	; 255
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	99 23       	and	r25, r25
    123e:	a9 f0       	breq	.+42     	; 0x126a <__floatsisf+0x40>
    1240:	f9 2f       	mov	r31, r25
    1242:	96 e9       	ldi	r25, 0x96	; 150
    1244:	bb 27       	eor	r27, r27
    1246:	93 95       	inc	r25
    1248:	f6 95       	lsr	r31
    124a:	87 95       	ror	r24
    124c:	77 95       	ror	r23
    124e:	67 95       	ror	r22
    1250:	b7 95       	ror	r27
    1252:	f1 11       	cpse	r31, r1
    1254:	f8 cf       	rjmp	.-16     	; 0x1246 <__floatsisf+0x1c>
    1256:	fa f4       	brpl	.+62     	; 0x1296 <__floatsisf+0x6c>
    1258:	bb 0f       	add	r27, r27
    125a:	11 f4       	brne	.+4      	; 0x1260 <__floatsisf+0x36>
    125c:	60 ff       	sbrs	r22, 0
    125e:	1b c0       	rjmp	.+54     	; 0x1296 <__floatsisf+0x6c>
    1260:	6f 5f       	subi	r22, 0xFF	; 255
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	8f 4f       	sbci	r24, 0xFF	; 255
    1266:	9f 4f       	sbci	r25, 0xFF	; 255
    1268:	16 c0       	rjmp	.+44     	; 0x1296 <__floatsisf+0x6c>
    126a:	88 23       	and	r24, r24
    126c:	11 f0       	breq	.+4      	; 0x1272 <__floatsisf+0x48>
    126e:	96 e9       	ldi	r25, 0x96	; 150
    1270:	11 c0       	rjmp	.+34     	; 0x1294 <__floatsisf+0x6a>
    1272:	77 23       	and	r23, r23
    1274:	21 f0       	breq	.+8      	; 0x127e <__floatsisf+0x54>
    1276:	9e e8       	ldi	r25, 0x8E	; 142
    1278:	87 2f       	mov	r24, r23
    127a:	76 2f       	mov	r23, r22
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <__floatsisf+0x5e>
    127e:	66 23       	and	r22, r22
    1280:	71 f0       	breq	.+28     	; 0x129e <__floatsisf+0x74>
    1282:	96 e8       	ldi	r25, 0x86	; 134
    1284:	86 2f       	mov	r24, r22
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	2a f0       	brmi	.+10     	; 0x1296 <__floatsisf+0x6c>
    128c:	9a 95       	dec	r25
    128e:	66 0f       	add	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	88 1f       	adc	r24, r24
    1294:	da f7       	brpl	.-10     	; 0x128c <__floatsisf+0x62>
    1296:	88 0f       	add	r24, r24
    1298:	96 95       	lsr	r25
    129a:	87 95       	ror	r24
    129c:	97 f9       	bld	r25, 7
    129e:	08 95       	ret

000012a0 <__fp_cmp>:
    12a0:	99 0f       	add	r25, r25
    12a2:	00 08       	sbc	r0, r0
    12a4:	55 0f       	add	r21, r21
    12a6:	aa 0b       	sbc	r26, r26
    12a8:	e0 e8       	ldi	r30, 0x80	; 128
    12aa:	fe ef       	ldi	r31, 0xFE	; 254
    12ac:	16 16       	cp	r1, r22
    12ae:	17 06       	cpc	r1, r23
    12b0:	e8 07       	cpc	r30, r24
    12b2:	f9 07       	cpc	r31, r25
    12b4:	c0 f0       	brcs	.+48     	; 0x12e6 <__fp_cmp+0x46>
    12b6:	12 16       	cp	r1, r18
    12b8:	13 06       	cpc	r1, r19
    12ba:	e4 07       	cpc	r30, r20
    12bc:	f5 07       	cpc	r31, r21
    12be:	98 f0       	brcs	.+38     	; 0x12e6 <__fp_cmp+0x46>
    12c0:	62 1b       	sub	r22, r18
    12c2:	73 0b       	sbc	r23, r19
    12c4:	84 0b       	sbc	r24, r20
    12c6:	95 0b       	sbc	r25, r21
    12c8:	39 f4       	brne	.+14     	; 0x12d8 <__fp_cmp+0x38>
    12ca:	0a 26       	eor	r0, r26
    12cc:	61 f0       	breq	.+24     	; 0x12e6 <__fp_cmp+0x46>
    12ce:	23 2b       	or	r18, r19
    12d0:	24 2b       	or	r18, r20
    12d2:	25 2b       	or	r18, r21
    12d4:	21 f4       	brne	.+8      	; 0x12de <__fp_cmp+0x3e>
    12d6:	08 95       	ret
    12d8:	0a 26       	eor	r0, r26
    12da:	09 f4       	brne	.+2      	; 0x12de <__fp_cmp+0x3e>
    12dc:	a1 40       	sbci	r26, 0x01	; 1
    12de:	a6 95       	lsr	r26
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	81 1d       	adc	r24, r1
    12e4:	81 1d       	adc	r24, r1
    12e6:	08 95       	ret

000012e8 <__fp_inf>:
    12e8:	97 f9       	bld	r25, 7
    12ea:	9f 67       	ori	r25, 0x7F	; 127
    12ec:	80 e8       	ldi	r24, 0x80	; 128
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	08 95       	ret

000012f4 <__fp_nan>:
    12f4:	9f ef       	ldi	r25, 0xFF	; 255
    12f6:	80 ec       	ldi	r24, 0xC0	; 192
    12f8:	08 95       	ret

000012fa <__fp_pscA>:
    12fa:	00 24       	eor	r0, r0
    12fc:	0a 94       	dec	r0
    12fe:	16 16       	cp	r1, r22
    1300:	17 06       	cpc	r1, r23
    1302:	18 06       	cpc	r1, r24
    1304:	09 06       	cpc	r0, r25
    1306:	08 95       	ret

00001308 <__fp_pscB>:
    1308:	00 24       	eor	r0, r0
    130a:	0a 94       	dec	r0
    130c:	12 16       	cp	r1, r18
    130e:	13 06       	cpc	r1, r19
    1310:	14 06       	cpc	r1, r20
    1312:	05 06       	cpc	r0, r21
    1314:	08 95       	ret

00001316 <__fp_round>:
    1316:	09 2e       	mov	r0, r25
    1318:	03 94       	inc	r0
    131a:	00 0c       	add	r0, r0
    131c:	11 f4       	brne	.+4      	; 0x1322 <__fp_round+0xc>
    131e:	88 23       	and	r24, r24
    1320:	52 f0       	brmi	.+20     	; 0x1336 <__fp_round+0x20>
    1322:	bb 0f       	add	r27, r27
    1324:	40 f4       	brcc	.+16     	; 0x1336 <__fp_round+0x20>
    1326:	bf 2b       	or	r27, r31
    1328:	11 f4       	brne	.+4      	; 0x132e <__fp_round+0x18>
    132a:	60 ff       	sbrs	r22, 0
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <__fp_round+0x20>
    132e:	6f 5f       	subi	r22, 0xFF	; 255
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	8f 4f       	sbci	r24, 0xFF	; 255
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	08 95       	ret

00001338 <__fp_split3>:
    1338:	57 fd       	sbrc	r21, 7
    133a:	90 58       	subi	r25, 0x80	; 128
    133c:	44 0f       	add	r20, r20
    133e:	55 1f       	adc	r21, r21
    1340:	59 f0       	breq	.+22     	; 0x1358 <__fp_splitA+0x10>
    1342:	5f 3f       	cpi	r21, 0xFF	; 255
    1344:	71 f0       	breq	.+28     	; 0x1362 <__fp_splitA+0x1a>
    1346:	47 95       	ror	r20

00001348 <__fp_splitA>:
    1348:	88 0f       	add	r24, r24
    134a:	97 fb       	bst	r25, 7
    134c:	99 1f       	adc	r25, r25
    134e:	61 f0       	breq	.+24     	; 0x1368 <__fp_splitA+0x20>
    1350:	9f 3f       	cpi	r25, 0xFF	; 255
    1352:	79 f0       	breq	.+30     	; 0x1372 <__fp_splitA+0x2a>
    1354:	87 95       	ror	r24
    1356:	08 95       	ret
    1358:	12 16       	cp	r1, r18
    135a:	13 06       	cpc	r1, r19
    135c:	14 06       	cpc	r1, r20
    135e:	55 1f       	adc	r21, r21
    1360:	f2 cf       	rjmp	.-28     	; 0x1346 <__fp_split3+0xe>
    1362:	46 95       	lsr	r20
    1364:	f1 df       	rcall	.-30     	; 0x1348 <__fp_splitA>
    1366:	08 c0       	rjmp	.+16     	; 0x1378 <__fp_splitA+0x30>
    1368:	16 16       	cp	r1, r22
    136a:	17 06       	cpc	r1, r23
    136c:	18 06       	cpc	r1, r24
    136e:	99 1f       	adc	r25, r25
    1370:	f1 cf       	rjmp	.-30     	; 0x1354 <__fp_splitA+0xc>
    1372:	86 95       	lsr	r24
    1374:	71 05       	cpc	r23, r1
    1376:	61 05       	cpc	r22, r1
    1378:	08 94       	sec
    137a:	08 95       	ret

0000137c <__fp_zero>:
    137c:	e8 94       	clt

0000137e <__fp_szero>:
    137e:	bb 27       	eor	r27, r27
    1380:	66 27       	eor	r22, r22
    1382:	77 27       	eor	r23, r23
    1384:	cb 01       	movw	r24, r22
    1386:	97 f9       	bld	r25, 7
    1388:	08 95       	ret

0000138a <__gesf2>:
    138a:	8a df       	rcall	.-236    	; 0x12a0 <__fp_cmp>
    138c:	08 f4       	brcc	.+2      	; 0x1390 <__gesf2+0x6>
    138e:	8f ef       	ldi	r24, 0xFF	; 255
    1390:	08 95       	ret

00001392 <__mulsf3>:
    1392:	0b d0       	rcall	.+22     	; 0x13aa <__mulsf3x>
    1394:	c0 cf       	rjmp	.-128    	; 0x1316 <__fp_round>
    1396:	b1 df       	rcall	.-158    	; 0x12fa <__fp_pscA>
    1398:	28 f0       	brcs	.+10     	; 0x13a4 <__mulsf3+0x12>
    139a:	b6 df       	rcall	.-148    	; 0x1308 <__fp_pscB>
    139c:	18 f0       	brcs	.+6      	; 0x13a4 <__mulsf3+0x12>
    139e:	95 23       	and	r25, r21
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <__mulsf3+0x12>
    13a2:	a2 cf       	rjmp	.-188    	; 0x12e8 <__fp_inf>
    13a4:	a7 cf       	rjmp	.-178    	; 0x12f4 <__fp_nan>
    13a6:	11 24       	eor	r1, r1
    13a8:	ea cf       	rjmp	.-44     	; 0x137e <__fp_szero>

000013aa <__mulsf3x>:
    13aa:	c6 df       	rcall	.-116    	; 0x1338 <__fp_split3>
    13ac:	a0 f3       	brcs	.-24     	; 0x1396 <__mulsf3+0x4>

000013ae <__mulsf3_pse>:
    13ae:	95 9f       	mul	r25, r21
    13b0:	d1 f3       	breq	.-12     	; 0x13a6 <__mulsf3+0x14>
    13b2:	95 0f       	add	r25, r21
    13b4:	50 e0       	ldi	r21, 0x00	; 0
    13b6:	55 1f       	adc	r21, r21
    13b8:	62 9f       	mul	r22, r18
    13ba:	f0 01       	movw	r30, r0
    13bc:	72 9f       	mul	r23, r18
    13be:	bb 27       	eor	r27, r27
    13c0:	f0 0d       	add	r31, r0
    13c2:	b1 1d       	adc	r27, r1
    13c4:	63 9f       	mul	r22, r19
    13c6:	aa 27       	eor	r26, r26
    13c8:	f0 0d       	add	r31, r0
    13ca:	b1 1d       	adc	r27, r1
    13cc:	aa 1f       	adc	r26, r26
    13ce:	64 9f       	mul	r22, r20
    13d0:	66 27       	eor	r22, r22
    13d2:	b0 0d       	add	r27, r0
    13d4:	a1 1d       	adc	r26, r1
    13d6:	66 1f       	adc	r22, r22
    13d8:	82 9f       	mul	r24, r18
    13da:	22 27       	eor	r18, r18
    13dc:	b0 0d       	add	r27, r0
    13de:	a1 1d       	adc	r26, r1
    13e0:	62 1f       	adc	r22, r18
    13e2:	73 9f       	mul	r23, r19
    13e4:	b0 0d       	add	r27, r0
    13e6:	a1 1d       	adc	r26, r1
    13e8:	62 1f       	adc	r22, r18
    13ea:	83 9f       	mul	r24, r19
    13ec:	a0 0d       	add	r26, r0
    13ee:	61 1d       	adc	r22, r1
    13f0:	22 1f       	adc	r18, r18
    13f2:	74 9f       	mul	r23, r20
    13f4:	33 27       	eor	r19, r19
    13f6:	a0 0d       	add	r26, r0
    13f8:	61 1d       	adc	r22, r1
    13fa:	23 1f       	adc	r18, r19
    13fc:	84 9f       	mul	r24, r20
    13fe:	60 0d       	add	r22, r0
    1400:	21 1d       	adc	r18, r1
    1402:	82 2f       	mov	r24, r18
    1404:	76 2f       	mov	r23, r22
    1406:	6a 2f       	mov	r22, r26
    1408:	11 24       	eor	r1, r1
    140a:	9f 57       	subi	r25, 0x7F	; 127
    140c:	50 40       	sbci	r21, 0x00	; 0
    140e:	8a f0       	brmi	.+34     	; 0x1432 <__mulsf3_pse+0x84>
    1410:	e1 f0       	breq	.+56     	; 0x144a <__mulsf3_pse+0x9c>
    1412:	88 23       	and	r24, r24
    1414:	4a f0       	brmi	.+18     	; 0x1428 <__mulsf3_pse+0x7a>
    1416:	ee 0f       	add	r30, r30
    1418:	ff 1f       	adc	r31, r31
    141a:	bb 1f       	adc	r27, r27
    141c:	66 1f       	adc	r22, r22
    141e:	77 1f       	adc	r23, r23
    1420:	88 1f       	adc	r24, r24
    1422:	91 50       	subi	r25, 0x01	; 1
    1424:	50 40       	sbci	r21, 0x00	; 0
    1426:	a9 f7       	brne	.-22     	; 0x1412 <__mulsf3_pse+0x64>
    1428:	9e 3f       	cpi	r25, 0xFE	; 254
    142a:	51 05       	cpc	r21, r1
    142c:	70 f0       	brcs	.+28     	; 0x144a <__mulsf3_pse+0x9c>
    142e:	5c cf       	rjmp	.-328    	; 0x12e8 <__fp_inf>
    1430:	a6 cf       	rjmp	.-180    	; 0x137e <__fp_szero>
    1432:	5f 3f       	cpi	r21, 0xFF	; 255
    1434:	ec f3       	brlt	.-6      	; 0x1430 <__mulsf3_pse+0x82>
    1436:	98 3e       	cpi	r25, 0xE8	; 232
    1438:	dc f3       	brlt	.-10     	; 0x1430 <__mulsf3_pse+0x82>
    143a:	86 95       	lsr	r24
    143c:	77 95       	ror	r23
    143e:	67 95       	ror	r22
    1440:	b7 95       	ror	r27
    1442:	f7 95       	ror	r31
    1444:	e7 95       	ror	r30
    1446:	9f 5f       	subi	r25, 0xFF	; 255
    1448:	c1 f7       	brne	.-16     	; 0x143a <__mulsf3_pse+0x8c>
    144a:	fe 2b       	or	r31, r30
    144c:	88 0f       	add	r24, r24
    144e:	91 1d       	adc	r25, r1
    1450:	96 95       	lsr	r25
    1452:	87 95       	ror	r24
    1454:	97 f9       	bld	r25, 7
    1456:	08 95       	ret

00001458 <__divmodhi4>:
    1458:	97 fb       	bst	r25, 7
    145a:	07 2e       	mov	r0, r23
    145c:	16 f4       	brtc	.+4      	; 0x1462 <__divmodhi4+0xa>
    145e:	00 94       	com	r0
    1460:	07 d0       	rcall	.+14     	; 0x1470 <__divmodhi4_neg1>
    1462:	77 fd       	sbrc	r23, 7
    1464:	09 d0       	rcall	.+18     	; 0x1478 <__divmodhi4_neg2>
    1466:	0e 94 40 0a 	call	0x1480	; 0x1480 <__udivmodhi4>
    146a:	07 fc       	sbrc	r0, 7
    146c:	05 d0       	rcall	.+10     	; 0x1478 <__divmodhi4_neg2>
    146e:	3e f4       	brtc	.+14     	; 0x147e <__divmodhi4_exit>

00001470 <__divmodhi4_neg1>:
    1470:	90 95       	com	r25
    1472:	81 95       	neg	r24
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	08 95       	ret

00001478 <__divmodhi4_neg2>:
    1478:	70 95       	com	r23
    147a:	61 95       	neg	r22
    147c:	7f 4f       	sbci	r23, 0xFF	; 255

0000147e <__divmodhi4_exit>:
    147e:	08 95       	ret

00001480 <__udivmodhi4>:
    1480:	aa 1b       	sub	r26, r26
    1482:	bb 1b       	sub	r27, r27
    1484:	51 e1       	ldi	r21, 0x11	; 17
    1486:	07 c0       	rjmp	.+14     	; 0x1496 <__udivmodhi4_ep>

00001488 <__udivmodhi4_loop>:
    1488:	aa 1f       	adc	r26, r26
    148a:	bb 1f       	adc	r27, r27
    148c:	a6 17       	cp	r26, r22
    148e:	b7 07       	cpc	r27, r23
    1490:	10 f0       	brcs	.+4      	; 0x1496 <__udivmodhi4_ep>
    1492:	a6 1b       	sub	r26, r22
    1494:	b7 0b       	sbc	r27, r23

00001496 <__udivmodhi4_ep>:
    1496:	88 1f       	adc	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	5a 95       	dec	r21
    149c:	a9 f7       	brne	.-22     	; 0x1488 <__udivmodhi4_loop>
    149e:	80 95       	com	r24
    14a0:	90 95       	com	r25
    14a2:	bc 01       	movw	r22, r24
    14a4:	cd 01       	movw	r24, r26
    14a6:	08 95       	ret

000014a8 <fdevopen>:
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	ec 01       	movw	r28, r24
    14b2:	8b 01       	movw	r16, r22
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	31 f4       	brne	.+12     	; 0x14c4 <fdevopen+0x1c>
    14b8:	61 15       	cp	r22, r1
    14ba:	71 05       	cpc	r23, r1
    14bc:	19 f4       	brne	.+6      	; 0x14c4 <fdevopen+0x1c>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	38 c0       	rjmp	.+112    	; 0x1534 <fdevopen+0x8c>
    14c4:	6e e0       	ldi	r22, 0x0E	; 14
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 85 0c 	call	0x190a	; 0x190a <calloc>
    14d0:	fc 01       	movw	r30, r24
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	a1 f3       	breq	.-24     	; 0x14be <fdevopen+0x16>
    14d6:	80 e8       	ldi	r24, 0x80	; 128
    14d8:	83 83       	std	Z+3, r24	; 0x03
    14da:	01 15       	cp	r16, r1
    14dc:	11 05       	cpc	r17, r1
    14de:	71 f0       	breq	.+28     	; 0x14fc <fdevopen+0x54>
    14e0:	13 87       	std	Z+11, r17	; 0x0b
    14e2:	02 87       	std	Z+10, r16	; 0x0a
    14e4:	81 e8       	ldi	r24, 0x81	; 129
    14e6:	83 83       	std	Z+3, r24	; 0x03
    14e8:	80 91 64 01 	lds	r24, 0x0164
    14ec:	90 91 65 01 	lds	r25, 0x0165
    14f0:	89 2b       	or	r24, r25
    14f2:	21 f4       	brne	.+8      	; 0x14fc <fdevopen+0x54>
    14f4:	f0 93 65 01 	sts	0x0165, r31
    14f8:	e0 93 64 01 	sts	0x0164, r30
    14fc:	20 97       	sbiw	r28, 0x00	; 0
    14fe:	c9 f0       	breq	.+50     	; 0x1532 <fdevopen+0x8a>
    1500:	d1 87       	std	Z+9, r29	; 0x09
    1502:	c0 87       	std	Z+8, r28	; 0x08
    1504:	83 81       	ldd	r24, Z+3	; 0x03
    1506:	82 60       	ori	r24, 0x02	; 2
    1508:	83 83       	std	Z+3, r24	; 0x03
    150a:	80 91 66 01 	lds	r24, 0x0166
    150e:	90 91 67 01 	lds	r25, 0x0167
    1512:	89 2b       	or	r24, r25
    1514:	71 f4       	brne	.+28     	; 0x1532 <fdevopen+0x8a>
    1516:	f0 93 67 01 	sts	0x0167, r31
    151a:	e0 93 66 01 	sts	0x0166, r30
    151e:	80 91 68 01 	lds	r24, 0x0168
    1522:	90 91 69 01 	lds	r25, 0x0169
    1526:	89 2b       	or	r24, r25
    1528:	21 f4       	brne	.+8      	; 0x1532 <fdevopen+0x8a>
    152a:	f0 93 69 01 	sts	0x0169, r31
    152e:	e0 93 68 01 	sts	0x0168, r30
    1532:	cf 01       	movw	r24, r30
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	08 95       	ret

0000153e <printf>:
    153e:	a0 e0       	ldi	r26, 0x00	; 0
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e5 ea       	ldi	r30, 0xA5	; 165
    1544:	fa e0       	ldi	r31, 0x0A	; 10
    1546:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__prologue_saves__+0x20>
    154a:	fe 01       	movw	r30, r28
    154c:	35 96       	adiw	r30, 0x05	; 5
    154e:	61 91       	ld	r22, Z+
    1550:	71 91       	ld	r23, Z+
    1552:	af 01       	movw	r20, r30
    1554:	80 91 66 01 	lds	r24, 0x0166
    1558:	90 91 67 01 	lds	r25, 0x0167
    155c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <vfprintf>
    1560:	e2 e0       	ldi	r30, 0x02	; 2
    1562:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <__epilogue_restores__+0x20>

00001566 <vfprintf>:
    1566:	ac e0       	ldi	r26, 0x0C	; 12
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e9 eb       	ldi	r30, 0xB9	; 185
    156c:	fa e0       	ldi	r31, 0x0A	; 10
    156e:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__prologue_saves__>
    1572:	7c 01       	movw	r14, r24
    1574:	6b 01       	movw	r12, r22
    1576:	8a 01       	movw	r16, r20
    1578:	fc 01       	movw	r30, r24
    157a:	17 82       	std	Z+7, r1	; 0x07
    157c:	16 82       	std	Z+6, r1	; 0x06
    157e:	83 81       	ldd	r24, Z+3	; 0x03
    1580:	81 ff       	sbrs	r24, 1
    1582:	bd c1       	rjmp	.+890    	; 0x18fe <vfprintf+0x398>
    1584:	ce 01       	movw	r24, r28
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	4c 01       	movw	r8, r24
    158a:	f7 01       	movw	r30, r14
    158c:	93 81       	ldd	r25, Z+3	; 0x03
    158e:	f6 01       	movw	r30, r12
    1590:	93 fd       	sbrc	r25, 3
    1592:	85 91       	lpm	r24, Z+
    1594:	93 ff       	sbrs	r25, 3
    1596:	81 91       	ld	r24, Z+
    1598:	6f 01       	movw	r12, r30
    159a:	88 23       	and	r24, r24
    159c:	09 f4       	brne	.+2      	; 0x15a0 <vfprintf+0x3a>
    159e:	ab c1       	rjmp	.+854    	; 0x18f6 <vfprintf+0x390>
    15a0:	85 32       	cpi	r24, 0x25	; 37
    15a2:	39 f4       	brne	.+14     	; 0x15b2 <vfprintf+0x4c>
    15a4:	93 fd       	sbrc	r25, 3
    15a6:	85 91       	lpm	r24, Z+
    15a8:	93 ff       	sbrs	r25, 3
    15aa:	81 91       	ld	r24, Z+
    15ac:	6f 01       	movw	r12, r30
    15ae:	85 32       	cpi	r24, 0x25	; 37
    15b0:	29 f4       	brne	.+10     	; 0x15bc <vfprintf+0x56>
    15b2:	b7 01       	movw	r22, r14
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <fputc>
    15ba:	e7 cf       	rjmp	.-50     	; 0x158a <vfprintf+0x24>
    15bc:	51 2c       	mov	r5, r1
    15be:	31 2c       	mov	r3, r1
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	20 32       	cpi	r18, 0x20	; 32
    15c4:	a0 f4       	brcc	.+40     	; 0x15ee <vfprintf+0x88>
    15c6:	8b 32       	cpi	r24, 0x2B	; 43
    15c8:	69 f0       	breq	.+26     	; 0x15e4 <vfprintf+0x7e>
    15ca:	30 f4       	brcc	.+12     	; 0x15d8 <vfprintf+0x72>
    15cc:	80 32       	cpi	r24, 0x20	; 32
    15ce:	59 f0       	breq	.+22     	; 0x15e6 <vfprintf+0x80>
    15d0:	83 32       	cpi	r24, 0x23	; 35
    15d2:	69 f4       	brne	.+26     	; 0x15ee <vfprintf+0x88>
    15d4:	20 61       	ori	r18, 0x10	; 16
    15d6:	2c c0       	rjmp	.+88     	; 0x1630 <vfprintf+0xca>
    15d8:	8d 32       	cpi	r24, 0x2D	; 45
    15da:	39 f0       	breq	.+14     	; 0x15ea <vfprintf+0x84>
    15dc:	80 33       	cpi	r24, 0x30	; 48
    15de:	39 f4       	brne	.+14     	; 0x15ee <vfprintf+0x88>
    15e0:	21 60       	ori	r18, 0x01	; 1
    15e2:	26 c0       	rjmp	.+76     	; 0x1630 <vfprintf+0xca>
    15e4:	22 60       	ori	r18, 0x02	; 2
    15e6:	24 60       	ori	r18, 0x04	; 4
    15e8:	23 c0       	rjmp	.+70     	; 0x1630 <vfprintf+0xca>
    15ea:	28 60       	ori	r18, 0x08	; 8
    15ec:	21 c0       	rjmp	.+66     	; 0x1630 <vfprintf+0xca>
    15ee:	27 fd       	sbrc	r18, 7
    15f0:	27 c0       	rjmp	.+78     	; 0x1640 <vfprintf+0xda>
    15f2:	30 ed       	ldi	r19, 0xD0	; 208
    15f4:	38 0f       	add	r19, r24
    15f6:	3a 30       	cpi	r19, 0x0A	; 10
    15f8:	78 f4       	brcc	.+30     	; 0x1618 <vfprintf+0xb2>
    15fa:	26 ff       	sbrs	r18, 6
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <vfprintf+0xa4>
    15fe:	fa e0       	ldi	r31, 0x0A	; 10
    1600:	5f 9e       	mul	r5, r31
    1602:	30 0d       	add	r19, r0
    1604:	11 24       	eor	r1, r1
    1606:	53 2e       	mov	r5, r19
    1608:	13 c0       	rjmp	.+38     	; 0x1630 <vfprintf+0xca>
    160a:	8a e0       	ldi	r24, 0x0A	; 10
    160c:	38 9e       	mul	r3, r24
    160e:	30 0d       	add	r19, r0
    1610:	11 24       	eor	r1, r1
    1612:	33 2e       	mov	r3, r19
    1614:	20 62       	ori	r18, 0x20	; 32
    1616:	0c c0       	rjmp	.+24     	; 0x1630 <vfprintf+0xca>
    1618:	8e 32       	cpi	r24, 0x2E	; 46
    161a:	21 f4       	brne	.+8      	; 0x1624 <vfprintf+0xbe>
    161c:	26 fd       	sbrc	r18, 6
    161e:	6b c1       	rjmp	.+726    	; 0x18f6 <vfprintf+0x390>
    1620:	20 64       	ori	r18, 0x40	; 64
    1622:	06 c0       	rjmp	.+12     	; 0x1630 <vfprintf+0xca>
    1624:	8c 36       	cpi	r24, 0x6C	; 108
    1626:	11 f4       	brne	.+4      	; 0x162c <vfprintf+0xc6>
    1628:	20 68       	ori	r18, 0x80	; 128
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <vfprintf+0xca>
    162c:	88 36       	cpi	r24, 0x68	; 104
    162e:	41 f4       	brne	.+16     	; 0x1640 <vfprintf+0xda>
    1630:	f6 01       	movw	r30, r12
    1632:	93 fd       	sbrc	r25, 3
    1634:	85 91       	lpm	r24, Z+
    1636:	93 ff       	sbrs	r25, 3
    1638:	81 91       	ld	r24, Z+
    163a:	6f 01       	movw	r12, r30
    163c:	81 11       	cpse	r24, r1
    163e:	c1 cf       	rjmp	.-126    	; 0x15c2 <vfprintf+0x5c>
    1640:	98 2f       	mov	r25, r24
    1642:	9f 7d       	andi	r25, 0xDF	; 223
    1644:	95 54       	subi	r25, 0x45	; 69
    1646:	93 30       	cpi	r25, 0x03	; 3
    1648:	28 f4       	brcc	.+10     	; 0x1654 <vfprintf+0xee>
    164a:	0c 5f       	subi	r16, 0xFC	; 252
    164c:	1f 4f       	sbci	r17, 0xFF	; 255
    164e:	ff e3       	ldi	r31, 0x3F	; 63
    1650:	f9 83       	std	Y+1, r31	; 0x01
    1652:	0d c0       	rjmp	.+26     	; 0x166e <vfprintf+0x108>
    1654:	83 36       	cpi	r24, 0x63	; 99
    1656:	31 f0       	breq	.+12     	; 0x1664 <vfprintf+0xfe>
    1658:	83 37       	cpi	r24, 0x73	; 115
    165a:	71 f0       	breq	.+28     	; 0x1678 <vfprintf+0x112>
    165c:	83 35       	cpi	r24, 0x53	; 83
    165e:	09 f0       	breq	.+2      	; 0x1662 <vfprintf+0xfc>
    1660:	5b c0       	rjmp	.+182    	; 0x1718 <vfprintf+0x1b2>
    1662:	22 c0       	rjmp	.+68     	; 0x16a8 <vfprintf+0x142>
    1664:	f8 01       	movw	r30, r16
    1666:	80 81       	ld	r24, Z
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	0e 5f       	subi	r16, 0xFE	; 254
    166c:	1f 4f       	sbci	r17, 0xFF	; 255
    166e:	44 24       	eor	r4, r4
    1670:	43 94       	inc	r4
    1672:	51 2c       	mov	r5, r1
    1674:	54 01       	movw	r10, r8
    1676:	15 c0       	rjmp	.+42     	; 0x16a2 <vfprintf+0x13c>
    1678:	38 01       	movw	r6, r16
    167a:	f2 e0       	ldi	r31, 0x02	; 2
    167c:	6f 0e       	add	r6, r31
    167e:	71 1c       	adc	r7, r1
    1680:	f8 01       	movw	r30, r16
    1682:	a0 80       	ld	r10, Z
    1684:	b1 80       	ldd	r11, Z+1	; 0x01
    1686:	26 ff       	sbrs	r18, 6
    1688:	03 c0       	rjmp	.+6      	; 0x1690 <vfprintf+0x12a>
    168a:	65 2d       	mov	r22, r5
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <vfprintf+0x12e>
    1690:	6f ef       	ldi	r22, 0xFF	; 255
    1692:	7f ef       	ldi	r23, 0xFF	; 255
    1694:	c5 01       	movw	r24, r10
    1696:	2c 87       	std	Y+12, r18	; 0x0c
    1698:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <strnlen>
    169c:	2c 01       	movw	r4, r24
    169e:	83 01       	movw	r16, r6
    16a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    16a2:	2f 77       	andi	r18, 0x7F	; 127
    16a4:	22 2e       	mov	r2, r18
    16a6:	17 c0       	rjmp	.+46     	; 0x16d6 <vfprintf+0x170>
    16a8:	38 01       	movw	r6, r16
    16aa:	f2 e0       	ldi	r31, 0x02	; 2
    16ac:	6f 0e       	add	r6, r31
    16ae:	71 1c       	adc	r7, r1
    16b0:	f8 01       	movw	r30, r16
    16b2:	a0 80       	ld	r10, Z
    16b4:	b1 80       	ldd	r11, Z+1	; 0x01
    16b6:	26 ff       	sbrs	r18, 6
    16b8:	03 c0       	rjmp	.+6      	; 0x16c0 <vfprintf+0x15a>
    16ba:	65 2d       	mov	r22, r5
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <vfprintf+0x15e>
    16c0:	6f ef       	ldi	r22, 0xFF	; 255
    16c2:	7f ef       	ldi	r23, 0xFF	; 255
    16c4:	c5 01       	movw	r24, r10
    16c6:	2c 87       	std	Y+12, r18	; 0x0c
    16c8:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <strnlen_P>
    16cc:	2c 01       	movw	r4, r24
    16ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    16d0:	20 68       	ori	r18, 0x80	; 128
    16d2:	22 2e       	mov	r2, r18
    16d4:	83 01       	movw	r16, r6
    16d6:	23 fc       	sbrc	r2, 3
    16d8:	1b c0       	rjmp	.+54     	; 0x1710 <vfprintf+0x1aa>
    16da:	83 2d       	mov	r24, r3
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	48 16       	cp	r4, r24
    16e0:	59 06       	cpc	r5, r25
    16e2:	b0 f4       	brcc	.+44     	; 0x1710 <vfprintf+0x1aa>
    16e4:	b7 01       	movw	r22, r14
    16e6:	80 e2       	ldi	r24, 0x20	; 32
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <fputc>
    16ee:	3a 94       	dec	r3
    16f0:	f4 cf       	rjmp	.-24     	; 0x16da <vfprintf+0x174>
    16f2:	f5 01       	movw	r30, r10
    16f4:	27 fc       	sbrc	r2, 7
    16f6:	85 91       	lpm	r24, Z+
    16f8:	27 fe       	sbrs	r2, 7
    16fa:	81 91       	ld	r24, Z+
    16fc:	5f 01       	movw	r10, r30
    16fe:	b7 01       	movw	r22, r14
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <fputc>
    1706:	31 10       	cpse	r3, r1
    1708:	3a 94       	dec	r3
    170a:	f1 e0       	ldi	r31, 0x01	; 1
    170c:	4f 1a       	sub	r4, r31
    170e:	51 08       	sbc	r5, r1
    1710:	41 14       	cp	r4, r1
    1712:	51 04       	cpc	r5, r1
    1714:	71 f7       	brne	.-36     	; 0x16f2 <vfprintf+0x18c>
    1716:	e5 c0       	rjmp	.+458    	; 0x18e2 <vfprintf+0x37c>
    1718:	84 36       	cpi	r24, 0x64	; 100
    171a:	11 f0       	breq	.+4      	; 0x1720 <vfprintf+0x1ba>
    171c:	89 36       	cpi	r24, 0x69	; 105
    171e:	39 f5       	brne	.+78     	; 0x176e <vfprintf+0x208>
    1720:	f8 01       	movw	r30, r16
    1722:	27 ff       	sbrs	r18, 7
    1724:	07 c0       	rjmp	.+14     	; 0x1734 <vfprintf+0x1ce>
    1726:	60 81       	ld	r22, Z
    1728:	71 81       	ldd	r23, Z+1	; 0x01
    172a:	82 81       	ldd	r24, Z+2	; 0x02
    172c:	93 81       	ldd	r25, Z+3	; 0x03
    172e:	0c 5f       	subi	r16, 0xFC	; 252
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	08 c0       	rjmp	.+16     	; 0x1744 <vfprintf+0x1de>
    1734:	60 81       	ld	r22, Z
    1736:	71 81       	ldd	r23, Z+1	; 0x01
    1738:	88 27       	eor	r24, r24
    173a:	77 fd       	sbrc	r23, 7
    173c:	80 95       	com	r24
    173e:	98 2f       	mov	r25, r24
    1740:	0e 5f       	subi	r16, 0xFE	; 254
    1742:	1f 4f       	sbci	r17, 0xFF	; 255
    1744:	2f 76       	andi	r18, 0x6F	; 111
    1746:	b2 2e       	mov	r11, r18
    1748:	97 ff       	sbrs	r25, 7
    174a:	09 c0       	rjmp	.+18     	; 0x175e <vfprintf+0x1f8>
    174c:	90 95       	com	r25
    174e:	80 95       	com	r24
    1750:	70 95       	com	r23
    1752:	61 95       	neg	r22
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	8f 4f       	sbci	r24, 0xFF	; 255
    1758:	9f 4f       	sbci	r25, 0xFF	; 255
    175a:	20 68       	ori	r18, 0x80	; 128
    175c:	b2 2e       	mov	r11, r18
    175e:	2a e0       	ldi	r18, 0x0A	; 10
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	a4 01       	movw	r20, r8
    1764:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__ultoa_invert>
    1768:	a8 2e       	mov	r10, r24
    176a:	a8 18       	sub	r10, r8
    176c:	44 c0       	rjmp	.+136    	; 0x17f6 <vfprintf+0x290>
    176e:	85 37       	cpi	r24, 0x75	; 117
    1770:	29 f4       	brne	.+10     	; 0x177c <vfprintf+0x216>
    1772:	2f 7e       	andi	r18, 0xEF	; 239
    1774:	b2 2e       	mov	r11, r18
    1776:	2a e0       	ldi	r18, 0x0A	; 10
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	25 c0       	rjmp	.+74     	; 0x17c6 <vfprintf+0x260>
    177c:	f2 2f       	mov	r31, r18
    177e:	f9 7f       	andi	r31, 0xF9	; 249
    1780:	bf 2e       	mov	r11, r31
    1782:	8f 36       	cpi	r24, 0x6F	; 111
    1784:	c1 f0       	breq	.+48     	; 0x17b6 <vfprintf+0x250>
    1786:	18 f4       	brcc	.+6      	; 0x178e <vfprintf+0x228>
    1788:	88 35       	cpi	r24, 0x58	; 88
    178a:	79 f0       	breq	.+30     	; 0x17aa <vfprintf+0x244>
    178c:	b4 c0       	rjmp	.+360    	; 0x18f6 <vfprintf+0x390>
    178e:	80 37       	cpi	r24, 0x70	; 112
    1790:	19 f0       	breq	.+6      	; 0x1798 <vfprintf+0x232>
    1792:	88 37       	cpi	r24, 0x78	; 120
    1794:	21 f0       	breq	.+8      	; 0x179e <vfprintf+0x238>
    1796:	af c0       	rjmp	.+350    	; 0x18f6 <vfprintf+0x390>
    1798:	2f 2f       	mov	r18, r31
    179a:	20 61       	ori	r18, 0x10	; 16
    179c:	b2 2e       	mov	r11, r18
    179e:	b4 fe       	sbrs	r11, 4
    17a0:	0d c0       	rjmp	.+26     	; 0x17bc <vfprintf+0x256>
    17a2:	8b 2d       	mov	r24, r11
    17a4:	84 60       	ori	r24, 0x04	; 4
    17a6:	b8 2e       	mov	r11, r24
    17a8:	09 c0       	rjmp	.+18     	; 0x17bc <vfprintf+0x256>
    17aa:	24 ff       	sbrs	r18, 4
    17ac:	0a c0       	rjmp	.+20     	; 0x17c2 <vfprintf+0x25c>
    17ae:	9f 2f       	mov	r25, r31
    17b0:	96 60       	ori	r25, 0x06	; 6
    17b2:	b9 2e       	mov	r11, r25
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <vfprintf+0x25c>
    17b6:	28 e0       	ldi	r18, 0x08	; 8
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	05 c0       	rjmp	.+10     	; 0x17c6 <vfprintf+0x260>
    17bc:	20 e1       	ldi	r18, 0x10	; 16
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <vfprintf+0x260>
    17c2:	20 e1       	ldi	r18, 0x10	; 16
    17c4:	32 e0       	ldi	r19, 0x02	; 2
    17c6:	f8 01       	movw	r30, r16
    17c8:	b7 fe       	sbrs	r11, 7
    17ca:	07 c0       	rjmp	.+14     	; 0x17da <vfprintf+0x274>
    17cc:	60 81       	ld	r22, Z
    17ce:	71 81       	ldd	r23, Z+1	; 0x01
    17d0:	82 81       	ldd	r24, Z+2	; 0x02
    17d2:	93 81       	ldd	r25, Z+3	; 0x03
    17d4:	0c 5f       	subi	r16, 0xFC	; 252
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	06 c0       	rjmp	.+12     	; 0x17e6 <vfprintf+0x280>
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	0e 5f       	subi	r16, 0xFE	; 254
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	a4 01       	movw	r20, r8
    17e8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__ultoa_invert>
    17ec:	a8 2e       	mov	r10, r24
    17ee:	a8 18       	sub	r10, r8
    17f0:	fb 2d       	mov	r31, r11
    17f2:	ff 77       	andi	r31, 0x7F	; 127
    17f4:	bf 2e       	mov	r11, r31
    17f6:	b6 fe       	sbrs	r11, 6
    17f8:	0b c0       	rjmp	.+22     	; 0x1810 <vfprintf+0x2aa>
    17fa:	2b 2d       	mov	r18, r11
    17fc:	2e 7f       	andi	r18, 0xFE	; 254
    17fe:	a5 14       	cp	r10, r5
    1800:	50 f4       	brcc	.+20     	; 0x1816 <vfprintf+0x2b0>
    1802:	b4 fe       	sbrs	r11, 4
    1804:	0a c0       	rjmp	.+20     	; 0x181a <vfprintf+0x2b4>
    1806:	b2 fc       	sbrc	r11, 2
    1808:	08 c0       	rjmp	.+16     	; 0x181a <vfprintf+0x2b4>
    180a:	2b 2d       	mov	r18, r11
    180c:	2e 7e       	andi	r18, 0xEE	; 238
    180e:	05 c0       	rjmp	.+10     	; 0x181a <vfprintf+0x2b4>
    1810:	7a 2c       	mov	r7, r10
    1812:	2b 2d       	mov	r18, r11
    1814:	03 c0       	rjmp	.+6      	; 0x181c <vfprintf+0x2b6>
    1816:	7a 2c       	mov	r7, r10
    1818:	01 c0       	rjmp	.+2      	; 0x181c <vfprintf+0x2b6>
    181a:	75 2c       	mov	r7, r5
    181c:	24 ff       	sbrs	r18, 4
    181e:	0d c0       	rjmp	.+26     	; 0x183a <vfprintf+0x2d4>
    1820:	fe 01       	movw	r30, r28
    1822:	ea 0d       	add	r30, r10
    1824:	f1 1d       	adc	r31, r1
    1826:	80 81       	ld	r24, Z
    1828:	80 33       	cpi	r24, 0x30	; 48
    182a:	11 f4       	brne	.+4      	; 0x1830 <vfprintf+0x2ca>
    182c:	29 7e       	andi	r18, 0xE9	; 233
    182e:	09 c0       	rjmp	.+18     	; 0x1842 <vfprintf+0x2dc>
    1830:	22 ff       	sbrs	r18, 2
    1832:	06 c0       	rjmp	.+12     	; 0x1840 <vfprintf+0x2da>
    1834:	73 94       	inc	r7
    1836:	73 94       	inc	r7
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <vfprintf+0x2dc>
    183a:	82 2f       	mov	r24, r18
    183c:	86 78       	andi	r24, 0x86	; 134
    183e:	09 f0       	breq	.+2      	; 0x1842 <vfprintf+0x2dc>
    1840:	73 94       	inc	r7
    1842:	23 fd       	sbrc	r18, 3
    1844:	13 c0       	rjmp	.+38     	; 0x186c <vfprintf+0x306>
    1846:	20 ff       	sbrs	r18, 0
    1848:	06 c0       	rjmp	.+12     	; 0x1856 <vfprintf+0x2f0>
    184a:	5a 2c       	mov	r5, r10
    184c:	73 14       	cp	r7, r3
    184e:	18 f4       	brcc	.+6      	; 0x1856 <vfprintf+0x2f0>
    1850:	53 0c       	add	r5, r3
    1852:	57 18       	sub	r5, r7
    1854:	73 2c       	mov	r7, r3
    1856:	73 14       	cp	r7, r3
    1858:	68 f4       	brcc	.+26     	; 0x1874 <vfprintf+0x30e>
    185a:	b7 01       	movw	r22, r14
    185c:	80 e2       	ldi	r24, 0x20	; 32
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	2c 87       	std	Y+12, r18	; 0x0c
    1862:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <fputc>
    1866:	73 94       	inc	r7
    1868:	2c 85       	ldd	r18, Y+12	; 0x0c
    186a:	f5 cf       	rjmp	.-22     	; 0x1856 <vfprintf+0x2f0>
    186c:	73 14       	cp	r7, r3
    186e:	10 f4       	brcc	.+4      	; 0x1874 <vfprintf+0x30e>
    1870:	37 18       	sub	r3, r7
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <vfprintf+0x310>
    1874:	31 2c       	mov	r3, r1
    1876:	24 ff       	sbrs	r18, 4
    1878:	12 c0       	rjmp	.+36     	; 0x189e <vfprintf+0x338>
    187a:	b7 01       	movw	r22, r14
    187c:	80 e3       	ldi	r24, 0x30	; 48
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	2c 87       	std	Y+12, r18	; 0x0c
    1882:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <fputc>
    1886:	2c 85       	ldd	r18, Y+12	; 0x0c
    1888:	22 ff       	sbrs	r18, 2
    188a:	17 c0       	rjmp	.+46     	; 0x18ba <vfprintf+0x354>
    188c:	21 ff       	sbrs	r18, 1
    188e:	03 c0       	rjmp	.+6      	; 0x1896 <vfprintf+0x330>
    1890:	88 e5       	ldi	r24, 0x58	; 88
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 c0       	rjmp	.+4      	; 0x189a <vfprintf+0x334>
    1896:	88 e7       	ldi	r24, 0x78	; 120
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	b7 01       	movw	r22, r14
    189c:	0c c0       	rjmp	.+24     	; 0x18b6 <vfprintf+0x350>
    189e:	82 2f       	mov	r24, r18
    18a0:	86 78       	andi	r24, 0x86	; 134
    18a2:	59 f0       	breq	.+22     	; 0x18ba <vfprintf+0x354>
    18a4:	21 fd       	sbrc	r18, 1
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <vfprintf+0x346>
    18a8:	80 e2       	ldi	r24, 0x20	; 32
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <vfprintf+0x348>
    18ac:	8b e2       	ldi	r24, 0x2B	; 43
    18ae:	27 fd       	sbrc	r18, 7
    18b0:	8d e2       	ldi	r24, 0x2D	; 45
    18b2:	b7 01       	movw	r22, r14
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <fputc>
    18ba:	a5 14       	cp	r10, r5
    18bc:	38 f4       	brcc	.+14     	; 0x18cc <vfprintf+0x366>
    18be:	b7 01       	movw	r22, r14
    18c0:	80 e3       	ldi	r24, 0x30	; 48
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <fputc>
    18c8:	5a 94       	dec	r5
    18ca:	f7 cf       	rjmp	.-18     	; 0x18ba <vfprintf+0x354>
    18cc:	aa 94       	dec	r10
    18ce:	f4 01       	movw	r30, r8
    18d0:	ea 0d       	add	r30, r10
    18d2:	f1 1d       	adc	r31, r1
    18d4:	80 81       	ld	r24, Z
    18d6:	b7 01       	movw	r22, r14
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <fputc>
    18de:	a1 10       	cpse	r10, r1
    18e0:	f5 cf       	rjmp	.-22     	; 0x18cc <vfprintf+0x366>
    18e2:	33 20       	and	r3, r3
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <vfprintf+0x382>
    18e6:	51 ce       	rjmp	.-862    	; 0x158a <vfprintf+0x24>
    18e8:	b7 01       	movw	r22, r14
    18ea:	80 e2       	ldi	r24, 0x20	; 32
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <fputc>
    18f2:	3a 94       	dec	r3
    18f4:	f6 cf       	rjmp	.-20     	; 0x18e2 <vfprintf+0x37c>
    18f6:	f7 01       	movw	r30, r14
    18f8:	86 81       	ldd	r24, Z+6	; 0x06
    18fa:	97 81       	ldd	r25, Z+7	; 0x07
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <vfprintf+0x39c>
    18fe:	8f ef       	ldi	r24, 0xFF	; 255
    1900:	9f ef       	ldi	r25, 0xFF	; 255
    1902:	2c 96       	adiw	r28, 0x0c	; 12
    1904:	e2 e1       	ldi	r30, 0x12	; 18
    1906:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__epilogue_restores__>

0000190a <calloc>:
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	86 9f       	mul	r24, r22
    1914:	80 01       	movw	r16, r0
    1916:	87 9f       	mul	r24, r23
    1918:	10 0d       	add	r17, r0
    191a:	96 9f       	mul	r25, r22
    191c:	10 0d       	add	r17, r0
    191e:	11 24       	eor	r1, r1
    1920:	c8 01       	movw	r24, r16
    1922:	0e 94 a1 0c 	call	0x1942	; 0x1942 <malloc>
    1926:	ec 01       	movw	r28, r24
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	29 f0       	breq	.+10     	; 0x1936 <calloc+0x2c>
    192c:	a8 01       	movw	r20, r16
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <memset>
    1936:	ce 01       	movw	r24, r28
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	1f 91       	pop	r17
    193e:	0f 91       	pop	r16
    1940:	08 95       	ret

00001942 <malloc>:
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	82 30       	cpi	r24, 0x02	; 2
    1948:	91 05       	cpc	r25, r1
    194a:	10 f4       	brcc	.+4      	; 0x1950 <malloc+0xe>
    194c:	82 e0       	ldi	r24, 0x02	; 2
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	e0 91 6c 01 	lds	r30, 0x016C
    1954:	f0 91 6d 01 	lds	r31, 0x016D
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	a0 e0       	ldi	r26, 0x00	; 0
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	30 97       	sbiw	r30, 0x00	; 0
    1962:	39 f1       	breq	.+78     	; 0x19b2 <malloc+0x70>
    1964:	40 81       	ld	r20, Z
    1966:	51 81       	ldd	r21, Z+1	; 0x01
    1968:	48 17       	cp	r20, r24
    196a:	59 07       	cpc	r21, r25
    196c:	b8 f0       	brcs	.+46     	; 0x199c <malloc+0x5a>
    196e:	48 17       	cp	r20, r24
    1970:	59 07       	cpc	r21, r25
    1972:	71 f4       	brne	.+28     	; 0x1990 <malloc+0x4e>
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	10 97       	sbiw	r26, 0x00	; 0
    197a:	29 f0       	breq	.+10     	; 0x1986 <malloc+0x44>
    197c:	13 96       	adiw	r26, 0x03	; 3
    197e:	9c 93       	st	X, r25
    1980:	8e 93       	st	-X, r24
    1982:	12 97       	sbiw	r26, 0x02	; 2
    1984:	2c c0       	rjmp	.+88     	; 0x19de <malloc+0x9c>
    1986:	90 93 6d 01 	sts	0x016D, r25
    198a:	80 93 6c 01 	sts	0x016C, r24
    198e:	27 c0       	rjmp	.+78     	; 0x19de <malloc+0x9c>
    1990:	21 15       	cp	r18, r1
    1992:	31 05       	cpc	r19, r1
    1994:	31 f0       	breq	.+12     	; 0x19a2 <malloc+0x60>
    1996:	42 17       	cp	r20, r18
    1998:	53 07       	cpc	r21, r19
    199a:	18 f0       	brcs	.+6      	; 0x19a2 <malloc+0x60>
    199c:	a9 01       	movw	r20, r18
    199e:	db 01       	movw	r26, r22
    19a0:	01 c0       	rjmp	.+2      	; 0x19a4 <malloc+0x62>
    19a2:	ef 01       	movw	r28, r30
    19a4:	9a 01       	movw	r18, r20
    19a6:	bd 01       	movw	r22, r26
    19a8:	df 01       	movw	r26, r30
    19aa:	02 80       	ldd	r0, Z+2	; 0x02
    19ac:	f3 81       	ldd	r31, Z+3	; 0x03
    19ae:	e0 2d       	mov	r30, r0
    19b0:	d7 cf       	rjmp	.-82     	; 0x1960 <malloc+0x1e>
    19b2:	21 15       	cp	r18, r1
    19b4:	31 05       	cpc	r19, r1
    19b6:	f9 f0       	breq	.+62     	; 0x19f6 <malloc+0xb4>
    19b8:	28 1b       	sub	r18, r24
    19ba:	39 0b       	sbc	r19, r25
    19bc:	24 30       	cpi	r18, 0x04	; 4
    19be:	31 05       	cpc	r19, r1
    19c0:	80 f4       	brcc	.+32     	; 0x19e2 <malloc+0xa0>
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	9b 81       	ldd	r25, Y+3	; 0x03
    19c6:	61 15       	cp	r22, r1
    19c8:	71 05       	cpc	r23, r1
    19ca:	21 f0       	breq	.+8      	; 0x19d4 <malloc+0x92>
    19cc:	fb 01       	movw	r30, r22
    19ce:	93 83       	std	Z+3, r25	; 0x03
    19d0:	82 83       	std	Z+2, r24	; 0x02
    19d2:	04 c0       	rjmp	.+8      	; 0x19dc <malloc+0x9a>
    19d4:	90 93 6d 01 	sts	0x016D, r25
    19d8:	80 93 6c 01 	sts	0x016C, r24
    19dc:	fe 01       	movw	r30, r28
    19de:	32 96       	adiw	r30, 0x02	; 2
    19e0:	44 c0       	rjmp	.+136    	; 0x1a6a <malloc+0x128>
    19e2:	fe 01       	movw	r30, r28
    19e4:	e2 0f       	add	r30, r18
    19e6:	f3 1f       	adc	r31, r19
    19e8:	81 93       	st	Z+, r24
    19ea:	91 93       	st	Z+, r25
    19ec:	22 50       	subi	r18, 0x02	; 2
    19ee:	31 09       	sbc	r19, r1
    19f0:	39 83       	std	Y+1, r19	; 0x01
    19f2:	28 83       	st	Y, r18
    19f4:	3a c0       	rjmp	.+116    	; 0x1a6a <malloc+0x128>
    19f6:	20 91 6a 01 	lds	r18, 0x016A
    19fa:	30 91 6b 01 	lds	r19, 0x016B
    19fe:	23 2b       	or	r18, r19
    1a00:	41 f4       	brne	.+16     	; 0x1a12 <malloc+0xd0>
    1a02:	20 91 02 01 	lds	r18, 0x0102
    1a06:	30 91 03 01 	lds	r19, 0x0103
    1a0a:	30 93 6b 01 	sts	0x016B, r19
    1a0e:	20 93 6a 01 	sts	0x016A, r18
    1a12:	20 91 00 01 	lds	r18, 0x0100
    1a16:	30 91 01 01 	lds	r19, 0x0101
    1a1a:	21 15       	cp	r18, r1
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	41 f4       	brne	.+16     	; 0x1a30 <malloc+0xee>
    1a20:	2d b7       	in	r18, 0x3d	; 61
    1a22:	3e b7       	in	r19, 0x3e	; 62
    1a24:	40 91 04 01 	lds	r20, 0x0104
    1a28:	50 91 05 01 	lds	r21, 0x0105
    1a2c:	24 1b       	sub	r18, r20
    1a2e:	35 0b       	sbc	r19, r21
    1a30:	e0 91 6a 01 	lds	r30, 0x016A
    1a34:	f0 91 6b 01 	lds	r31, 0x016B
    1a38:	e2 17       	cp	r30, r18
    1a3a:	f3 07       	cpc	r31, r19
    1a3c:	a0 f4       	brcc	.+40     	; 0x1a66 <malloc+0x124>
    1a3e:	2e 1b       	sub	r18, r30
    1a40:	3f 0b       	sbc	r19, r31
    1a42:	28 17       	cp	r18, r24
    1a44:	39 07       	cpc	r19, r25
    1a46:	78 f0       	brcs	.+30     	; 0x1a66 <malloc+0x124>
    1a48:	ac 01       	movw	r20, r24
    1a4a:	4e 5f       	subi	r20, 0xFE	; 254
    1a4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4e:	24 17       	cp	r18, r20
    1a50:	35 07       	cpc	r19, r21
    1a52:	48 f0       	brcs	.+18     	; 0x1a66 <malloc+0x124>
    1a54:	4e 0f       	add	r20, r30
    1a56:	5f 1f       	adc	r21, r31
    1a58:	50 93 6b 01 	sts	0x016B, r21
    1a5c:	40 93 6a 01 	sts	0x016A, r20
    1a60:	81 93       	st	Z+, r24
    1a62:	91 93       	st	Z+, r25
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <malloc+0x128>
    1a66:	e0 e0       	ldi	r30, 0x00	; 0
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	cf 01       	movw	r24, r30
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	08 95       	ret

00001a72 <free>:
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <free+0xa>
    1a7a:	87 c0       	rjmp	.+270    	; 0x1b8a <free+0x118>
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	32 97       	sbiw	r30, 0x02	; 2
    1a80:	13 82       	std	Z+3, r1	; 0x03
    1a82:	12 82       	std	Z+2, r1	; 0x02
    1a84:	c0 91 6c 01 	lds	r28, 0x016C
    1a88:	d0 91 6d 01 	lds	r29, 0x016D
    1a8c:	20 97       	sbiw	r28, 0x00	; 0
    1a8e:	81 f4       	brne	.+32     	; 0x1ab0 <free+0x3e>
    1a90:	20 81       	ld	r18, Z
    1a92:	31 81       	ldd	r19, Z+1	; 0x01
    1a94:	28 0f       	add	r18, r24
    1a96:	39 1f       	adc	r19, r25
    1a98:	80 91 6a 01 	lds	r24, 0x016A
    1a9c:	90 91 6b 01 	lds	r25, 0x016B
    1aa0:	82 17       	cp	r24, r18
    1aa2:	93 07       	cpc	r25, r19
    1aa4:	79 f5       	brne	.+94     	; 0x1b04 <free+0x92>
    1aa6:	f0 93 6b 01 	sts	0x016B, r31
    1aaa:	e0 93 6a 01 	sts	0x016A, r30
    1aae:	6d c0       	rjmp	.+218    	; 0x1b8a <free+0x118>
    1ab0:	de 01       	movw	r26, r28
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	ae 17       	cp	r26, r30
    1ab8:	bf 07       	cpc	r27, r31
    1aba:	50 f4       	brcc	.+20     	; 0x1ad0 <free+0x5e>
    1abc:	12 96       	adiw	r26, 0x02	; 2
    1abe:	4d 91       	ld	r20, X+
    1ac0:	5c 91       	ld	r21, X
    1ac2:	13 97       	sbiw	r26, 0x03	; 3
    1ac4:	9d 01       	movw	r18, r26
    1ac6:	41 15       	cp	r20, r1
    1ac8:	51 05       	cpc	r21, r1
    1aca:	09 f1       	breq	.+66     	; 0x1b0e <free+0x9c>
    1acc:	da 01       	movw	r26, r20
    1ace:	f3 cf       	rjmp	.-26     	; 0x1ab6 <free+0x44>
    1ad0:	b3 83       	std	Z+3, r27	; 0x03
    1ad2:	a2 83       	std	Z+2, r26	; 0x02
    1ad4:	40 81       	ld	r20, Z
    1ad6:	51 81       	ldd	r21, Z+1	; 0x01
    1ad8:	84 0f       	add	r24, r20
    1ada:	95 1f       	adc	r25, r21
    1adc:	8a 17       	cp	r24, r26
    1ade:	9b 07       	cpc	r25, r27
    1ae0:	71 f4       	brne	.+28     	; 0x1afe <free+0x8c>
    1ae2:	8d 91       	ld	r24, X+
    1ae4:	9c 91       	ld	r25, X
    1ae6:	11 97       	sbiw	r26, 0x01	; 1
    1ae8:	84 0f       	add	r24, r20
    1aea:	95 1f       	adc	r25, r21
    1aec:	02 96       	adiw	r24, 0x02	; 2
    1aee:	91 83       	std	Z+1, r25	; 0x01
    1af0:	80 83       	st	Z, r24
    1af2:	12 96       	adiw	r26, 0x02	; 2
    1af4:	8d 91       	ld	r24, X+
    1af6:	9c 91       	ld	r25, X
    1af8:	13 97       	sbiw	r26, 0x03	; 3
    1afa:	93 83       	std	Z+3, r25	; 0x03
    1afc:	82 83       	std	Z+2, r24	; 0x02
    1afe:	21 15       	cp	r18, r1
    1b00:	31 05       	cpc	r19, r1
    1b02:	29 f4       	brne	.+10     	; 0x1b0e <free+0x9c>
    1b04:	f0 93 6d 01 	sts	0x016D, r31
    1b08:	e0 93 6c 01 	sts	0x016C, r30
    1b0c:	3e c0       	rjmp	.+124    	; 0x1b8a <free+0x118>
    1b0e:	d9 01       	movw	r26, r18
    1b10:	13 96       	adiw	r26, 0x03	; 3
    1b12:	fc 93       	st	X, r31
    1b14:	ee 93       	st	-X, r30
    1b16:	12 97       	sbiw	r26, 0x02	; 2
    1b18:	4d 91       	ld	r20, X+
    1b1a:	5d 91       	ld	r21, X+
    1b1c:	a4 0f       	add	r26, r20
    1b1e:	b5 1f       	adc	r27, r21
    1b20:	ea 17       	cp	r30, r26
    1b22:	fb 07       	cpc	r31, r27
    1b24:	79 f4       	brne	.+30     	; 0x1b44 <free+0xd2>
    1b26:	80 81       	ld	r24, Z
    1b28:	91 81       	ldd	r25, Z+1	; 0x01
    1b2a:	84 0f       	add	r24, r20
    1b2c:	95 1f       	adc	r25, r21
    1b2e:	02 96       	adiw	r24, 0x02	; 2
    1b30:	d9 01       	movw	r26, r18
    1b32:	11 96       	adiw	r26, 0x01	; 1
    1b34:	9c 93       	st	X, r25
    1b36:	8e 93       	st	-X, r24
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	13 96       	adiw	r26, 0x03	; 3
    1b3e:	9c 93       	st	X, r25
    1b40:	8e 93       	st	-X, r24
    1b42:	12 97       	sbiw	r26, 0x02	; 2
    1b44:	e0 e0       	ldi	r30, 0x00	; 0
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	19 f0       	breq	.+6      	; 0x1b56 <free+0xe4>
    1b50:	fe 01       	movw	r30, r28
    1b52:	ec 01       	movw	r28, r24
    1b54:	f9 cf       	rjmp	.-14     	; 0x1b48 <free+0xd6>
    1b56:	ce 01       	movw	r24, r28
    1b58:	02 96       	adiw	r24, 0x02	; 2
    1b5a:	28 81       	ld	r18, Y
    1b5c:	39 81       	ldd	r19, Y+1	; 0x01
    1b5e:	82 0f       	add	r24, r18
    1b60:	93 1f       	adc	r25, r19
    1b62:	20 91 6a 01 	lds	r18, 0x016A
    1b66:	30 91 6b 01 	lds	r19, 0x016B
    1b6a:	28 17       	cp	r18, r24
    1b6c:	39 07       	cpc	r19, r25
    1b6e:	69 f4       	brne	.+26     	; 0x1b8a <free+0x118>
    1b70:	30 97       	sbiw	r30, 0x00	; 0
    1b72:	29 f4       	brne	.+10     	; 0x1b7e <free+0x10c>
    1b74:	10 92 6d 01 	sts	0x016D, r1
    1b78:	10 92 6c 01 	sts	0x016C, r1
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <free+0x110>
    1b7e:	13 82       	std	Z+3, r1	; 0x03
    1b80:	12 82       	std	Z+2, r1	; 0x02
    1b82:	d0 93 6b 01 	sts	0x016B, r29
    1b86:	c0 93 6a 01 	sts	0x016A, r28
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	08 95       	ret

00001b90 <strnlen_P>:
    1b90:	fc 01       	movw	r30, r24
    1b92:	05 90       	lpm	r0, Z+
    1b94:	61 50       	subi	r22, 0x01	; 1
    1b96:	70 40       	sbci	r23, 0x00	; 0
    1b98:	01 10       	cpse	r0, r1
    1b9a:	d8 f7       	brcc	.-10     	; 0x1b92 <strnlen_P+0x2>
    1b9c:	80 95       	com	r24
    1b9e:	90 95       	com	r25
    1ba0:	8e 0f       	add	r24, r30
    1ba2:	9f 1f       	adc	r25, r31
    1ba4:	08 95       	ret

00001ba6 <memset>:
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	01 c0       	rjmp	.+2      	; 0x1bac <memset+0x6>
    1baa:	6d 93       	st	X+, r22
    1bac:	41 50       	subi	r20, 0x01	; 1
    1bae:	50 40       	sbci	r21, 0x00	; 0
    1bb0:	e0 f7       	brcc	.-8      	; 0x1baa <memset+0x4>
    1bb2:	08 95       	ret

00001bb4 <strnlen>:
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	61 50       	subi	r22, 0x01	; 1
    1bb8:	70 40       	sbci	r23, 0x00	; 0
    1bba:	01 90       	ld	r0, Z+
    1bbc:	01 10       	cpse	r0, r1
    1bbe:	d8 f7       	brcc	.-10     	; 0x1bb6 <strnlen+0x2>
    1bc0:	80 95       	com	r24
    1bc2:	90 95       	com	r25
    1bc4:	8e 0f       	add	r24, r30
    1bc6:	9f 1f       	adc	r25, r31
    1bc8:	08 95       	ret

00001bca <fputc>:
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	18 2f       	mov	r17, r24
    1bd4:	09 2f       	mov	r16, r25
    1bd6:	eb 01       	movw	r28, r22
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	81 fd       	sbrc	r24, 1
    1bdc:	03 c0       	rjmp	.+6      	; 0x1be4 <fputc+0x1a>
    1bde:	8f ef       	ldi	r24, 0xFF	; 255
    1be0:	9f ef       	ldi	r25, 0xFF	; 255
    1be2:	20 c0       	rjmp	.+64     	; 0x1c24 <fputc+0x5a>
    1be4:	82 ff       	sbrs	r24, 2
    1be6:	10 c0       	rjmp	.+32     	; 0x1c08 <fputc+0x3e>
    1be8:	4e 81       	ldd	r20, Y+6	; 0x06
    1bea:	5f 81       	ldd	r21, Y+7	; 0x07
    1bec:	2c 81       	ldd	r18, Y+4	; 0x04
    1bee:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf0:	42 17       	cp	r20, r18
    1bf2:	53 07       	cpc	r21, r19
    1bf4:	7c f4       	brge	.+30     	; 0x1c14 <fputc+0x4a>
    1bf6:	e8 81       	ld	r30, Y
    1bf8:	f9 81       	ldd	r31, Y+1	; 0x01
    1bfa:	9f 01       	movw	r18, r30
    1bfc:	2f 5f       	subi	r18, 0xFF	; 255
    1bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1c00:	39 83       	std	Y+1, r19	; 0x01
    1c02:	28 83       	st	Y, r18
    1c04:	10 83       	st	Z, r17
    1c06:	06 c0       	rjmp	.+12     	; 0x1c14 <fputc+0x4a>
    1c08:	e8 85       	ldd	r30, Y+8	; 0x08
    1c0a:	f9 85       	ldd	r31, Y+9	; 0x09
    1c0c:	81 2f       	mov	r24, r17
    1c0e:	09 95       	icall
    1c10:	89 2b       	or	r24, r25
    1c12:	29 f7       	brne	.-54     	; 0x1bde <fputc+0x14>
    1c14:	2e 81       	ldd	r18, Y+6	; 0x06
    1c16:	3f 81       	ldd	r19, Y+7	; 0x07
    1c18:	2f 5f       	subi	r18, 0xFF	; 255
    1c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1c:	3f 83       	std	Y+7, r19	; 0x07
    1c1e:	2e 83       	std	Y+6, r18	; 0x06
    1c20:	81 2f       	mov	r24, r17
    1c22:	90 2f       	mov	r25, r16
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	0f 91       	pop	r16
    1c2c:	08 95       	ret

00001c2e <__ultoa_invert>:
    1c2e:	fa 01       	movw	r30, r20
    1c30:	aa 27       	eor	r26, r26
    1c32:	28 30       	cpi	r18, 0x08	; 8
    1c34:	51 f1       	breq	.+84     	; 0x1c8a <__ultoa_invert+0x5c>
    1c36:	20 31       	cpi	r18, 0x10	; 16
    1c38:	81 f1       	breq	.+96     	; 0x1c9a <__ultoa_invert+0x6c>
    1c3a:	e8 94       	clt
    1c3c:	6f 93       	push	r22
    1c3e:	6e 7f       	andi	r22, 0xFE	; 254
    1c40:	6e 5f       	subi	r22, 0xFE	; 254
    1c42:	7f 4f       	sbci	r23, 0xFF	; 255
    1c44:	8f 4f       	sbci	r24, 0xFF	; 255
    1c46:	9f 4f       	sbci	r25, 0xFF	; 255
    1c48:	af 4f       	sbci	r26, 0xFF	; 255
    1c4a:	b1 e0       	ldi	r27, 0x01	; 1
    1c4c:	3e d0       	rcall	.+124    	; 0x1cca <__ultoa_invert+0x9c>
    1c4e:	b4 e0       	ldi	r27, 0x04	; 4
    1c50:	3c d0       	rcall	.+120    	; 0x1cca <__ultoa_invert+0x9c>
    1c52:	67 0f       	add	r22, r23
    1c54:	78 1f       	adc	r23, r24
    1c56:	89 1f       	adc	r24, r25
    1c58:	9a 1f       	adc	r25, r26
    1c5a:	a1 1d       	adc	r26, r1
    1c5c:	68 0f       	add	r22, r24
    1c5e:	79 1f       	adc	r23, r25
    1c60:	8a 1f       	adc	r24, r26
    1c62:	91 1d       	adc	r25, r1
    1c64:	a1 1d       	adc	r26, r1
    1c66:	6a 0f       	add	r22, r26
    1c68:	71 1d       	adc	r23, r1
    1c6a:	81 1d       	adc	r24, r1
    1c6c:	91 1d       	adc	r25, r1
    1c6e:	a1 1d       	adc	r26, r1
    1c70:	20 d0       	rcall	.+64     	; 0x1cb2 <__ultoa_invert+0x84>
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <__ultoa_invert+0x48>
    1c74:	68 94       	set
    1c76:	3f 91       	pop	r19
    1c78:	2a e0       	ldi	r18, 0x0A	; 10
    1c7a:	26 9f       	mul	r18, r22
    1c7c:	11 24       	eor	r1, r1
    1c7e:	30 19       	sub	r19, r0
    1c80:	30 5d       	subi	r19, 0xD0	; 208
    1c82:	31 93       	st	Z+, r19
    1c84:	de f6       	brtc	.-74     	; 0x1c3c <__ultoa_invert+0xe>
    1c86:	cf 01       	movw	r24, r30
    1c88:	08 95       	ret
    1c8a:	46 2f       	mov	r20, r22
    1c8c:	47 70       	andi	r20, 0x07	; 7
    1c8e:	40 5d       	subi	r20, 0xD0	; 208
    1c90:	41 93       	st	Z+, r20
    1c92:	b3 e0       	ldi	r27, 0x03	; 3
    1c94:	0f d0       	rcall	.+30     	; 0x1cb4 <__ultoa_invert+0x86>
    1c96:	c9 f7       	brne	.-14     	; 0x1c8a <__ultoa_invert+0x5c>
    1c98:	f6 cf       	rjmp	.-20     	; 0x1c86 <__ultoa_invert+0x58>
    1c9a:	46 2f       	mov	r20, r22
    1c9c:	4f 70       	andi	r20, 0x0F	; 15
    1c9e:	40 5d       	subi	r20, 0xD0	; 208
    1ca0:	4a 33       	cpi	r20, 0x3A	; 58
    1ca2:	18 f0       	brcs	.+6      	; 0x1caa <__ultoa_invert+0x7c>
    1ca4:	49 5d       	subi	r20, 0xD9	; 217
    1ca6:	31 fd       	sbrc	r19, 1
    1ca8:	40 52       	subi	r20, 0x20	; 32
    1caa:	41 93       	st	Z+, r20
    1cac:	02 d0       	rcall	.+4      	; 0x1cb2 <__ultoa_invert+0x84>
    1cae:	a9 f7       	brne	.-22     	; 0x1c9a <__ultoa_invert+0x6c>
    1cb0:	ea cf       	rjmp	.-44     	; 0x1c86 <__ultoa_invert+0x58>
    1cb2:	b4 e0       	ldi	r27, 0x04	; 4
    1cb4:	a6 95       	lsr	r26
    1cb6:	97 95       	ror	r25
    1cb8:	87 95       	ror	r24
    1cba:	77 95       	ror	r23
    1cbc:	67 95       	ror	r22
    1cbe:	ba 95       	dec	r27
    1cc0:	c9 f7       	brne	.-14     	; 0x1cb4 <__ultoa_invert+0x86>
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	61 05       	cpc	r22, r1
    1cc6:	71 05       	cpc	r23, r1
    1cc8:	08 95       	ret
    1cca:	9b 01       	movw	r18, r22
    1ccc:	ac 01       	movw	r20, r24
    1cce:	0a 2e       	mov	r0, r26
    1cd0:	06 94       	lsr	r0
    1cd2:	57 95       	ror	r21
    1cd4:	47 95       	ror	r20
    1cd6:	37 95       	ror	r19
    1cd8:	27 95       	ror	r18
    1cda:	ba 95       	dec	r27
    1cdc:	c9 f7       	brne	.-14     	; 0x1cd0 <__ultoa_invert+0xa2>
    1cde:	62 0f       	add	r22, r18
    1ce0:	73 1f       	adc	r23, r19
    1ce2:	84 1f       	adc	r24, r20
    1ce4:	95 1f       	adc	r25, r21
    1ce6:	a0 1d       	adc	r26, r0
    1ce8:	08 95       	ret

00001cea <__prologue_saves__>:
    1cea:	2f 92       	push	r2
    1cec:	3f 92       	push	r3
    1cee:	4f 92       	push	r4
    1cf0:	5f 92       	push	r5
    1cf2:	6f 92       	push	r6
    1cf4:	7f 92       	push	r7
    1cf6:	8f 92       	push	r8
    1cf8:	9f 92       	push	r9
    1cfa:	af 92       	push	r10
    1cfc:	bf 92       	push	r11
    1cfe:	cf 92       	push	r12
    1d00:	df 92       	push	r13
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	ca 1b       	sub	r28, r26
    1d14:	db 0b       	sbc	r29, r27
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	09 94       	ijmp

00001d22 <__epilogue_restores__>:
    1d22:	2a 88       	ldd	r2, Y+18	; 0x12
    1d24:	39 88       	ldd	r3, Y+17	; 0x11
    1d26:	48 88       	ldd	r4, Y+16	; 0x10
    1d28:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d30:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d32:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d34:	b9 84       	ldd	r11, Y+9	; 0x09
    1d36:	c8 84       	ldd	r12, Y+8	; 0x08
    1d38:	df 80       	ldd	r13, Y+7	; 0x07
    1d3a:	ee 80       	ldd	r14, Y+6	; 0x06
    1d3c:	fd 80       	ldd	r15, Y+5	; 0x05
    1d3e:	0c 81       	ldd	r16, Y+4	; 0x04
    1d40:	1b 81       	ldd	r17, Y+3	; 0x03
    1d42:	aa 81       	ldd	r26, Y+2	; 0x02
    1d44:	b9 81       	ldd	r27, Y+1	; 0x01
    1d46:	ce 0f       	add	r28, r30
    1d48:	d1 1d       	adc	r29, r1
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	ed 01       	movw	r28, r26
    1d56:	08 95       	ret

00001d58 <_exit>:
    1d58:	f8 94       	cli

00001d5a <__stop_program>:
    1d5a:	ff cf       	rjmp	.-2      	; 0x1d5a <__stop_program>
