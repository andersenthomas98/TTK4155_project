
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00000ff0  00001084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ff0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080021e  0080021e  000011a2  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002174  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001097  00000000  00000000  00003618  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000115a  00000000  00000000  000046af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000058c  00000000  00000000  0000580c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a5  00000000  00000000  00005d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001155  00000000  00000000  0000663d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00007792  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_1>
   8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_2>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 ef       	ldi	r30, 0xF0	; 240
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 31       	cpi	r26, 0x1E	; 30
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	ae e1       	ldi	r26, 0x1E	; 30
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 32       	cpi	r26, 0x2A	; 42
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 46 03 	call	0x68c	; 0x68c <main>
  a6:	0c 94 f6 07 	jmp	0xfec	; 0xfec <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:
#include <stddef.h>
#include "uart.h"


void CAN_init(void) {
	MCP_init();
  ae:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <MCP_init>
	
	// Enable recieve and message error interrupts
	MCP_write(MCP_CANINTE, 0b10000101);
  b2:	65 e8       	ldi	r22, 0x85	; 133
  b4:	8b e2       	ldi	r24, 0x2B	; 43
  b6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <MCP_write>

	MCP_bitModify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);	//enter loopback mode
  ba:	40 e4       	ldi	r20, 0x40	; 64
  bc:	60 ee       	ldi	r22, 0xE0	; 224
  be:	8f e0       	ldi	r24, 0x0F	; 15
  c0:	0e 94 21 02 	call	0x442	; 0x442 <MCP_bitModify>
	MCP_bitModify(MCP_RXB0CTRL, 0b01100000, 0b01100000);
  c4:	40 e6       	ldi	r20, 0x60	; 96
  c6:	60 e6       	ldi	r22, 0x60	; 96
  c8:	80 e6       	ldi	r24, 0x60	; 96
  ca:	0e 94 21 02 	call	0x442	; 0x442 <MCP_bitModify>
	
	if (MCP_read(MCP_CANCTRL) & 0b01000000) {
  ce:	8f e0       	ldi	r24, 0x0F	; 15
  d0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <MCP_read>
  d4:	86 ff       	sbrs	r24, 6
  d6:	08 c0       	rjmp	.+16     	; 0xe8 <CAN_init+0x3a>
		printf("CAN controller in loopback mode\n\r");
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	9f 93       	push	r25
  de:	8f 93       	push	r24
  e0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <printf>
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	08 95       	ret

000000ea <CAN_message_send>:
	}
}

void CAN_message_send(msg_ptr msgPtr) {
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
	
	// Set TXB0SIDH (higher ID-register)
	MCP_write(MCP_TXB0CTRL + 1, (msgPtr->id) >> 8);
  f4:	69 81       	ldd	r22, Y+1	; 0x01
  f6:	81 e3       	ldi	r24, 0x31	; 49
  f8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <MCP_write>
	printf("higher ID to be sent = %#X \n\r",  (msgPtr->id) >> 8);
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	1f 92       	push	r1
 100:	8f 93       	push	r24
 102:	88 e2       	ldi	r24, 0x28	; 40
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	9f 93       	push	r25
 108:	8f 93       	push	r24
 10a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <printf>
	// Set TXB0SIDL (lower ID-register)
	MCP_write(MCP_TXB0CTRL + 2, (msgPtr->id) & 0xFF);
 10e:	68 81       	ld	r22, Y
 110:	82 e3       	ldi	r24, 0x32	; 50
 112:	0e 94 f6 01 	call	0x3ec	; 0x3ec <MCP_write>
	printf("lower ID to be sent = %#X \n\r", (msgPtr->id) & 0xFF);
 116:	88 81       	ld	r24, Y
 118:	99 81       	ldd	r25, Y+1	; 0x01
 11a:	99 27       	eor	r25, r25
 11c:	9f 93       	push	r25
 11e:	8f 93       	push	r24
 120:	86 e4       	ldi	r24, 0x46	; 70
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	9f 93       	push	r25
 126:	8f 93       	push	r24
 128:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <printf>
	// Set TXB0DLC (length register)
	MCP_write(MCP_TXB0CTRL + 5, (msgPtr->length));
 12c:	6a 81       	ldd	r22, Y+2	; 0x02
 12e:	85 e3       	ldi	r24, 0x35	; 53
 130:	0e 94 f6 01 	call	0x3ec	; 0x3ec <MCP_write>
 134:	8e 01       	movw	r16, r28
 136:	07 5c       	subi	r16, 0xC7	; 199
 138:	1f 4f       	sbci	r17, 0xFF	; 255
 13a:	8d b7       	in	r24, 0x3d	; 61
 13c:	9e b7       	in	r25, 0x3e	; 62
 13e:	08 96       	adiw	r24, 0x08	; 8
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	9e bf       	out	0x3e, r25	; 62
 146:	0f be       	out	0x3f, r0	; 63
 148:	8d bf       	out	0x3d, r24	; 61
	
	
	for (uint8_t i = MCP_TXB0CTRL + 6; i <= MCP_TXB0CTRL + 14; i++) {
 14a:	c6 e3       	ldi	r28, 0x36	; 54
		MCP_write(i, msgPtr->data[i]);
 14c:	f8 01       	movw	r30, r16
 14e:	61 91       	ld	r22, Z+
 150:	8f 01       	movw	r16, r30
 152:	8c 2f       	mov	r24, r28
 154:	0e 94 f6 01 	call	0x3ec	; 0x3ec <MCP_write>
	printf("lower ID to be sent = %#X \n\r", (msgPtr->id) & 0xFF);
	// Set TXB0DLC (length register)
	MCP_write(MCP_TXB0CTRL + 5, (msgPtr->length));
	
	
	for (uint8_t i = MCP_TXB0CTRL + 6; i <= MCP_TXB0CTRL + 14; i++) {
 158:	cf 5f       	subi	r28, 0xFF	; 255
 15a:	cf 33       	cpi	r28, 0x3F	; 63
 15c:	b9 f7       	brne	.-18     	; 0x14c <CAN_message_send+0x62>
		MCP_write(i, msgPtr->data[i]);
	}
	
	
	MCP_requestToSend(0);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 08 02 	call	0x410	; 0x410 <MCP_requestToSend>
	// Transmission of CAN msg will start when the device detects that the bus is available...
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <CAN_message_recieve>:

msg_t CAN_message_recieve(void) {
 170:	af 92       	push	r10
 172:	bf 92       	push	r11
 174:	cf 92       	push	r12
 176:	df 92       	push	r13
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	2b 97       	sbiw	r28, 0x0b	; 11
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
 194:	5c 01       	movw	r10, r24
	msg_t msg;
	
	// Read ID from RXB0SIDH and RXB0SIDL
	uint16_t lowerId = MCP_read(MCP_RXB0CTRL + 2);
 196:	82 e6       	ldi	r24, 0x62	; 98
 198:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <MCP_read>
 19c:	08 2f       	mov	r16, r24
 19e:	e8 2e       	mov	r14, r24
 1a0:	f1 2c       	mov	r15, r1
	uint16_t upperId = MCP_read(MCP_RXB0CTRL + 1);
 1a2:	81 e6       	ldi	r24, 0x61	; 97
 1a4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <MCP_read>
 1a8:	18 2f       	mov	r17, r24
 1aa:	c8 2e       	mov	r12, r24
 1ac:	d1 2c       	mov	r13, r1
	printf("recieved lower ID = %#X \n\r", lowerId);
 1ae:	1f 92       	push	r1
 1b0:	0f 93       	push	r16
 1b2:	83 e6       	ldi	r24, 0x63	; 99
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	9f 93       	push	r25
 1b8:	8f 93       	push	r24
 1ba:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <printf>
	printf("recieved upper ID = %#X \n\r", upperId);
 1be:	1f 92       	push	r1
 1c0:	1f 93       	push	r17
 1c2:	8e e7       	ldi	r24, 0x7E	; 126
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	9f 93       	push	r25
 1c8:	8f 93       	push	r24
 1ca:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <printf>
	msg.id =  (upperId << 8) + lowerId;
 1ce:	dc 2c       	mov	r13, r12
 1d0:	cc 24       	eor	r12, r12
 1d2:	ce 0c       	add	r12, r14
 1d4:	df 1c       	adc	r13, r15
	
	// Read length from RXB0DLC
	msg.length = MCP_read(MCP_RXB0CTRL + 5);
 1d6:	85 e6       	ldi	r24, 0x65	; 101
 1d8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <MCP_read>
 1dc:	08 2f       	mov	r16, r24
 1de:	7e 01       	movw	r14, r28
 1e0:	8a e6       	ldi	r24, 0x6A	; 106
 1e2:	e8 0e       	add	r14, r24
 1e4:	f1 1c       	adc	r15, r1
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
	
	// Read data
	for (uint8_t i = MCP_RXB0CTRL + 6; i <= MCP_RXB0CTRL + 14; i++) {
 1f0:	16 e6       	ldi	r17, 0x66	; 102
		msg.data[i] = MCP_read(i);
 1f2:	81 2f       	mov	r24, r17
 1f4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <MCP_read>
 1f8:	f7 01       	movw	r30, r14
 1fa:	81 93       	st	Z+, r24
 1fc:	7f 01       	movw	r14, r30
	
	// Read length from RXB0DLC
	msg.length = MCP_read(MCP_RXB0CTRL + 5);
	
	// Read data
	for (uint8_t i = MCP_RXB0CTRL + 6; i <= MCP_RXB0CTRL + 14; i++) {
 1fe:	1f 5f       	subi	r17, 0xFF	; 255
 200:	1f 36       	cpi	r17, 0x6F	; 111
 202:	b9 f7       	brne	.-18     	; 0x1f2 <CAN_message_recieve+0x82>
		msg.data[i] = MCP_read(i);
	}
	return msg;
 204:	da 82       	std	Y+2, r13	; 0x02
 206:	c9 82       	std	Y+1, r12	; 0x01
 208:	0b 83       	std	Y+3, r16	; 0x03
 20a:	8b e0       	ldi	r24, 0x0B	; 11
 20c:	fe 01       	movw	r30, r28
 20e:	31 96       	adiw	r30, 0x01	; 1
 210:	d5 01       	movw	r26, r10
 212:	01 90       	ld	r0, Z+
 214:	0d 92       	st	X+, r0
 216:	8a 95       	dec	r24
 218:	e1 f7       	brne	.-8      	; 0x212 <CAN_message_recieve+0xa2>
} 
 21a:	c5 01       	movw	r24, r10
 21c:	2b 96       	adiw	r28, 0x0b	; 11
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	df 90       	pop	r13
 236:	cf 90       	pop	r12
 238:	bf 90       	pop	r11
 23a:	af 90       	pop	r10
 23c:	08 95       	ret

0000023e <btn_init>:
 23e:	b8 98       	cbi	0x17, 0	; 23
 240:	b9 98       	cbi	0x17, 1	; 23
 242:	08 95       	ret

00000244 <INTERRUPT_init>:
volatile int ADC_INTERRUPT_READY = 0;
//volatile int SPI_TRANSMISSION_COMPLETE = 0;

void INTERRUPT_init() {
	// disable global interrupts (set SREG register)
	cli();
 244:	f8 94       	cli
	
	// Enable that a falling edge generates an interrupt request for INT0
	MCUCR |= (1 << ISC01);
 246:	85 b7       	in	r24, 0x35	; 53
 248:	82 60       	ori	r24, 0x02	; 2
 24a:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
 24c:	85 b7       	in	r24, 0x35	; 53
 24e:	8e 7f       	andi	r24, 0xFE	; 254
 250:	85 bf       	out	0x35, r24	; 53
	
	
	// Enable that a rising edge generates an interrupt request for INT1
	MCUCR |= (1 << ISC11);
 252:	85 b7       	in	r24, 0x35	; 53
 254:	88 60       	ori	r24, 0x08	; 8
 256:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);	
 258:	85 b7       	in	r24, 0x35	; 53
 25a:	8b 7f       	andi	r24, 0xFB	; 251
 25c:	85 bf       	out	0x35, r24	; 53

	
	// Enable interrupt on INT0 (from ADC) and INT1 (from MCP)
	GICR |= (1 << INT0);
 25e:	8b b7       	in	r24, 0x3b	; 59
 260:	80 64       	ori	r24, 0x40	; 64
 262:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1); 
 264:	8b b7       	in	r24, 0x3b	; 59
 266:	80 68       	ori	r24, 0x80	; 128
 268:	8b bf       	out	0x3b, r24	; 59
		
	// Enable global interrupts (set SREG register)
	sei();
 26a:	78 94       	sei
 26c:	08 95       	ret

0000026e <__vector_1>:
}

// Interrupt for ADC
ISR(INT0_vect) {
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
	// Disable global interrupts while executing an ISR (?)
	//cli();
	ADC_INTERRUPT_READY = 1;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 284:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
	// Reset interrupt flag
	//GIFR &= ~(1 << INTF0);
	//GIFR |= (1 << INTF0);
	//printf("routine finished\n\r");
	//sei();
}
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <__vector_2>:

// CAN interrupts
ISR(INT1_vect) {
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	4f 93       	push	r20
 2a6:	5f 93       	push	r21
 2a8:	6f 93       	push	r22
 2aa:	7f 93       	push	r23
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	af 93       	push	r26
 2b2:	bf 93       	push	r27
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	2b 97       	sbiw	r28, 0x0b	; 11
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	cd bf       	out	0x3d, r28	; 61
	printf("Read status: ");
 2c6:	89 e9       	ldi	r24, 0x99	; 153
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	9f 93       	push	r25
 2cc:	8f 93       	push	r24
 2ce:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <printf>
	printf("%#X\n\r", MCP_readStatus());
 2d2:	0e 94 39 02 	call	0x472	; 0x472 <MCP_readStatus>
 2d6:	1f 92       	push	r1
 2d8:	8f 93       	push	r24
 2da:	87 ea       	ldi	r24, 0xA7	; 167
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	9f 93       	push	r25
 2e0:	8f 93       	push	r24
 2e2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <printf>
	if (MCP_read(MCP_CANINTF) & MCP_TX0IF) {
 2e6:	8c e2       	ldi	r24, 0x2C	; 44
 2e8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <MCP_read>
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	82 ff       	sbrs	r24, 2
 2fa:	0d c0       	rjmp	.+26     	; 0x316 <__vector_2+0x80>
		printf("Message sendt succesfully\n\r");
 2fc:	8d ea       	ldi	r24, 0xAD	; 173
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	9f 93       	push	r25
 302:	8f 93       	push	r24
 304:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <printf>
		MCP_bitModify(MCP_CANINTF, MCP_TX0IF, 0);
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	64 e0       	ldi	r22, 0x04	; 4
 30c:	8c e2       	ldi	r24, 0x2C	; 44
 30e:	0e 94 21 02 	call	0x442	; 0x442 <MCP_bitModify>
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
	}
	// Message recieved at recieve buffer 0
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF) {
 316:	8c e2       	ldi	r24, 0x2C	; 44
 318:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <MCP_read>
 31c:	80 ff       	sbrs	r24, 0
 31e:	27 c0       	rjmp	.+78     	; 0x36e <__vector_2+0xd8>
		struct CAN_message msg = CAN_message_recieve();
 320:	ce 01       	movw	r24, r28
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	0e 94 b8 00 	call	0x170	; 0x170 <CAN_message_recieve>
		printf("--- Message recieved ---\n\r");
 328:	89 ec       	ldi	r24, 0xC9	; 201
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	9f 93       	push	r25
 32e:	8f 93       	push	r24
 330:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <printf>
		printf("ID: %#X \n\r", msg.id);
 334:	8a 81       	ldd	r24, Y+2	; 0x02
 336:	8f 93       	push	r24
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	8f 93       	push	r24
 33c:	84 ee       	ldi	r24, 0xE4	; 228
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	9f 93       	push	r25
 342:	8f 93       	push	r24
 344:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <printf>
		printf("Length: %d \n\r", msg.length);
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	1f 92       	push	r1
 34c:	8f 93       	push	r24
 34e:	8f ee       	ldi	r24, 0xEF	; 239
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	9f 93       	push	r25
 354:	8f 93       	push	r24
 356:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <printf>
	
		// Reset recieve flag
		MCP_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	8c e2       	ldi	r24, 0x2C	; 44
 360:	0e 94 21 02 	call	0x442	; 0x442 <MCP_bitModify>
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
	}
	if (MCP_read(MCP_CANINTF) & MCP_MERRF) {
 36e:	8c e2       	ldi	r24, 0x2C	; 44
 370:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <MCP_read>
 374:	88 23       	and	r24, r24
 376:	44 f4       	brge	.+16     	; 0x388 <__vector_2+0xf2>
		printf("CAN BUS ERROR!");
 378:	8d ef       	ldi	r24, 0xFD	; 253
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	9f 93       	push	r25
 37e:	8f 93       	push	r24
 380:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <printf>
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
	}
}
 388:	2b 96       	adiw	r28, 0x0b	; 11
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	de bf       	out	0x3e, r29	; 62
 390:	0f be       	out	0x3f, r0	; 63
 392:	cd bf       	out	0x3d, r28	; 61
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	ff 91       	pop	r31
 39a:	ef 91       	pop	r30
 39c:	bf 91       	pop	r27
 39e:	af 91       	pop	r26
 3a0:	9f 91       	pop	r25
 3a2:	8f 91       	pop	r24
 3a4:	7f 91       	pop	r23
 3a6:	6f 91       	pop	r22
 3a8:	5f 91       	pop	r21
 3aa:	4f 91       	pop	r20
 3ac:	3f 91       	pop	r19
 3ae:	2f 91       	pop	r18
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <MCP_reset>:
}


void MCP_reset(void) {
	// Initiate data transmission
	PORTB &= ~(1 << PB4);
 3ba:	c4 98       	cbi	0x18, 4	; 24
	
	// Send RESET instruction
	SPI_transmit(MCP_RESET);
 3bc:	80 ec       	ldi	r24, 0xC0	; 192
 3be:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
	
	// End data transmission
	PORTB |= (1 << PB4);
 3c2:	c4 9a       	sbi	0x18, 4	; 24
 3c4:	08 95       	ret

000003c6 <MCP_init>:
#include <avr/io.h>
#define F_CPU 4915200
#include <avr/delay.h>

void MCP_init(void) {
	SPI_MasterInit();
 3c6:	0e 94 02 03 	call	0x604	; 0x604 <SPI_MasterInit>
	MCP_reset();
 3ca:	0e 94 dd 01 	call	0x3ba	; 0x3ba <MCP_reset>
 3ce:	08 95       	ret

000003d0 <MCP_read>:
	// End data transmission
	PORTB |= (1 << PB4);
}


uint8_t MCP_read(uint8_t address) {
 3d0:	cf 93       	push	r28
 3d2:	c8 2f       	mov	r28, r24
	uint8_t data;
	
	// Select CAN controller
	PORTB &= ~(1 << PB4);
 3d4:	c4 98       	cbi	0x18, 4	; 24
	
	// Send READ instruction
	SPI_transmit(MCP_READ);
 3d6:	83 e0       	ldi	r24, 0x03	; 3
 3d8:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
	
	// Send address
	SPI_transmit(address);
 3dc:	8c 2f       	mov	r24, r28
 3de:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
	
	// Read from address specified over
	data = SPI_read();
 3e2:	0e 94 13 03 	call	0x626	; 0x626 <SPI_read>
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
 3e6:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;
	
}
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <MCP_write>:

void MCP_write(uint8_t address, uint8_t data) {
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	d8 2f       	mov	r29, r24
 3f2:	c6 2f       	mov	r28, r22
	// Select CAN controller
	PORTB &= ~(1 << PB4);
 3f4:	c4 98       	cbi	0x18, 4	; 24
	
	// Send WRITE instruction
	SPI_transmit(MCP_WRITE);
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
	
	// Send address
	SPI_transmit(address);
 3fc:	8d 2f       	mov	r24, r29
 3fe:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
	
	// Send data
	SPI_transmit(data);
 402:	8c 2f       	mov	r24, r28
 404:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
 408:	c4 9a       	sbi	0x18, 4	; 24
}
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <MCP_requestToSend>:

void MCP_requestToSend(int buffer) {
	// Select CAN controller
	PORTB &= ~(1 << PB4);
 410:	c4 98       	cbi	0x18, 4	; 24
	
	// RTS from buffer 0, 1, 2, or all
	if (buffer == 0) {
 412:	00 97       	sbiw	r24, 0x00	; 0
 414:	21 f4       	brne	.+8      	; 0x41e <MCP_requestToSend+0xe>
		SPI_transmit(MCP_RTS_TX0);
 416:	81 e8       	ldi	r24, 0x81	; 129
 418:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
 41c:	10 c0       	rjmp	.+32     	; 0x43e <MCP_requestToSend+0x2e>
	}
	else if (buffer == 1) {
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	91 05       	cpc	r25, r1
 422:	21 f4       	brne	.+8      	; 0x42c <MCP_requestToSend+0x1c>
		SPI_transmit(MCP_RTS_TX1);
 424:	82 e8       	ldi	r24, 0x82	; 130
 426:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
 42a:	09 c0       	rjmp	.+18     	; 0x43e <MCP_requestToSend+0x2e>
	}
	else if (buffer == 2) {
 42c:	02 97       	sbiw	r24, 0x02	; 2
 42e:	21 f4       	brne	.+8      	; 0x438 <MCP_requestToSend+0x28>
		SPI_transmit(MCP_RTS_TX2);
 430:	84 e8       	ldi	r24, 0x84	; 132
 432:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
 436:	03 c0       	rjmp	.+6      	; 0x43e <MCP_requestToSend+0x2e>
	}
	else {
		SPI_transmit(MCP_RTS_ALL);
 438:	87 e8       	ldi	r24, 0x87	; 135
 43a:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
	}
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
 43e:	c4 9a       	sbi	0x18, 4	; 24
 440:	08 95       	ret

00000442 <MCP_bitModify>:
}

void MCP_bitModify(uint8_t address, uint8_t mask, uint8_t data) {
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	18 2f       	mov	r17, r24
 44a:	d6 2f       	mov	r29, r22
 44c:	c4 2f       	mov	r28, r20
	// Select CAN controller
	PORTB &= ~(1 << PB4);
 44e:	c4 98       	cbi	0x18, 4	; 24
	
	// Send BIT MODIFY instruction
	SPI_transmit(MCP_BITMOD);
 450:	85 e0       	ldi	r24, 0x05	; 5
 452:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
	
	// Send address of register
	SPI_transmit(address);
 456:	81 2f       	mov	r24, r17
 458:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
	
	// Send mask byte
	SPI_transmit(mask);
 45c:	8d 2f       	mov	r24, r29
 45e:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
	
	// Send data byte
	SPI_transmit(data);
 462:	8c 2f       	mov	r24, r28
 464:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
 468:	c4 9a       	sbi	0x18, 4	; 24
}
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	1f 91       	pop	r17
 470:	08 95       	ret

00000472 <MCP_readStatus>:

uint8_t MCP_readStatus(void) {
	uint8_t data;
	
	// Select CAN controller
	PORTB &= ~(1 << PB4);
 472:	c4 98       	cbi	0x18, 4	; 24
	
	// Send READ STATUS instruction
	SPI_transmit(MCP_READ_STATUS);
 474:	80 ea       	ldi	r24, 0xA0	; 160
 476:	0e 94 0f 03 	call	0x61e	; 0x61e <SPI_transmit>
	
	data = SPI_read();
 47a:	0e 94 13 03 	call	0x626	; 0x626 <SPI_read>
	
	// Deselect CAN controller
	PORTB |= (1 << PB4);
 47e:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;
	
}
 480:	08 95       	ret

00000482 <OLED_init>:
	uint16_t index = 0x800 + page*128 + x;
	uint8_t value = XMEM_read(index);
	value &= ~(1 << height);
	XMEM_write(value, index);
	}
}
 482:	6e ea       	ldi	r22, 0xAE	; 174
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	8e ea       	ldi	r24, 0xAE	; 174
 488:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 48c:	61 ea       	ldi	r22, 0xA1	; 161
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	81 ea       	ldi	r24, 0xA1	; 161
 492:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 496:	6a ed       	ldi	r22, 0xDA	; 218
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	8a ed       	ldi	r24, 0xDA	; 218
 49c:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 4a0:	62 e1       	ldi	r22, 0x12	; 18
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	82 e1       	ldi	r24, 0x12	; 18
 4a6:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 4aa:	68 ec       	ldi	r22, 0xC8	; 200
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	88 ec       	ldi	r24, 0xC8	; 200
 4b0:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 4b4:	68 ea       	ldi	r22, 0xA8	; 168
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	88 ea       	ldi	r24, 0xA8	; 168
 4ba:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 4be:	6f e3       	ldi	r22, 0x3F	; 63
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	8f e3       	ldi	r24, 0x3F	; 63
 4c4:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 4c8:	65 ed       	ldi	r22, 0xD5	; 213
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	85 ed       	ldi	r24, 0xD5	; 213
 4ce:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 4d2:	60 e8       	ldi	r22, 0x80	; 128
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	80 e8       	ldi	r24, 0x80	; 128
 4d8:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 4dc:	61 e8       	ldi	r22, 0x81	; 129
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	81 e8       	ldi	r24, 0x81	; 129
 4e2:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 4e6:	60 e5       	ldi	r22, 0x50	; 80
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	80 e5       	ldi	r24, 0x50	; 80
 4ec:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 4f0:	69 ed       	ldi	r22, 0xD9	; 217
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	89 ed       	ldi	r24, 0xD9	; 217
 4f6:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 4fa:	61 e2       	ldi	r22, 0x21	; 33
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	81 e2       	ldi	r24, 0x21	; 33
 500:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 504:	60 e2       	ldi	r22, 0x20	; 32
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	80 e2       	ldi	r24, 0x20	; 32
 50a:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 50e:	62 e0       	ldi	r22, 0x02	; 2
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 518:	6b ed       	ldi	r22, 0xDB	; 219
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	8b ed       	ldi	r24, 0xDB	; 219
 51e:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 522:	60 e3       	ldi	r22, 0x30	; 48
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	80 e3       	ldi	r24, 0x30	; 48
 528:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 52c:	6d ea       	ldi	r22, 0xAD	; 173
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	8d ea       	ldi	r24, 0xAD	; 173
 532:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 540:	64 ea       	ldi	r22, 0xA4	; 164
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	84 ea       	ldi	r24, 0xA4	; 164
 546:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 54a:	66 ea       	ldi	r22, 0xA6	; 166
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	86 ea       	ldi	r24, 0xA6	; 166
 550:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 554:	63 ed       	ldi	r22, 0xD3	; 211
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	83 ed       	ldi	r24, 0xD3	; 211
 55a:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 568:	6f ea       	ldi	r22, 0xAF	; 175
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	8f ea       	ldi	r24, 0xAF	; 175
 56e:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 572:	08 95       	ret

00000574 <OLED_refresh>:


void OLED_refresh(void){
 574:	ef 92       	push	r14
 576:	ff 92       	push	r15
 578:	0f 93       	push	r16
 57a:	1f 93       	push	r17
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	c0 e0       	ldi	r28, 0x00	; 0
 582:	d8 e0       	ldi	r29, 0x08	; 8
 584:	0f 2e       	mov	r0, r31
 586:	f0 eb       	ldi	r31, 0xB0	; 176
 588:	ef 2e       	mov	r14, r31
 58a:	f1 2c       	mov	r15, r1
 58c:	f0 2d       	mov	r31, r0
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
 58e:	b7 01       	movw	r22, r14
 590:	8e 2d       	mov	r24, r14
 592:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
		XMEM_write(0, 0);		// Set lower column start address
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
		XMEM_write(0x10, 0x10);  // Set data register
 5a0:	60 e1       	ldi	r22, 0x10	; 16
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	80 e1       	ldi	r24, 0x10	; 16
 5a6:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 5aa:	8e 01       	movw	r16, r28
 5ac:	00 58       	subi	r16, 0x80	; 128
 5ae:	1f 4f       	sbci	r17, 0xFF	; 255
		for (int column = 0; column < 128; column++){
			uint8_t SRAMvalue = XMEM_read(0x800 + page*128 + column);
 5b0:	ce 01       	movw	r24, r28
 5b2:	0e 94 3e 03 	call	0x67c	; 0x67c <XMEM_read>
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
 5b6:	68 2f       	mov	r22, r24
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	7e 5f       	subi	r23, 0xFE	; 254
 5bc:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
 5c0:	21 96       	adiw	r28, 0x01	; 1
void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
		XMEM_write(0xB0 + page, 0xB0 + page);  // Set command register
		XMEM_write(0, 0);		// Set lower column start address
		XMEM_write(0x10, 0x10);  // Set data register
		for (int column = 0; column < 128; column++){
 5c2:	c0 17       	cp	r28, r16
 5c4:	d1 07       	cpc	r29, r17
 5c6:	a1 f7       	brne	.-24     	; 0x5b0 <OLED_refresh+0x3c>
 5c8:	8f ef       	ldi	r24, 0xFF	; 255
 5ca:	e8 1a       	sub	r14, r24
 5cc:	f8 0a       	sbc	r15, r24
 5ce:	e8 01       	movw	r28, r16
	}
}


void OLED_refresh(void){
	for (int page = 0; page < 8; page++){
 5d0:	01 15       	cp	r16, r1
 5d2:	1c 40       	sbci	r17, 0x0C	; 12
 5d4:	e1 f6       	brne	.-72     	; 0x58e <OLED_refresh+0x1a>
		for (int column = 0; column < 128; column++){
			uint8_t SRAMvalue = XMEM_read(0x800 + page*128 + column);
			XMEM_write(SRAMvalue, 0x200 + SRAMvalue);
		}
	}
}
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
 5de:	ff 90       	pop	r15
 5e0:	ef 90       	pop	r14
 5e2:	08 95       	ret

000005e4 <OLED_clearAll>:


void OLED_clearAll(void) {
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
	for (uint16_t index = 0x800; index < 0x800 + 1024; index++){
 5e8:	c0 e0       	ldi	r28, 0x00	; 0
 5ea:	d8 e0       	ldi	r29, 0x08	; 8
		XMEM_write(0, index);
 5ec:	be 01       	movw	r22, r28
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	0e 94 42 03 	call	0x684	; 0x684 <XMEM_write>
	}
}


void OLED_clearAll(void) {
	for (uint16_t index = 0x800; index < 0x800 + 1024; index++){
 5f4:	21 96       	adiw	r28, 0x01	; 1
 5f6:	c1 15       	cp	r28, r1
 5f8:	8c e0       	ldi	r24, 0x0C	; 12
 5fa:	d8 07       	cpc	r29, r24
 5fc:	b9 f7       	brne	.-18     	; 0x5ec <OLED_clearAll+0x8>
		XMEM_write(0, index);
	}
}
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	08 95       	ret

00000604 <SPI_MasterInit>:
#include "interrupt.h"
#include <avr/io.h>

void SPI_MasterInit(void) {
	// Set PB4 (/SS), PB5 (MOSI) and PB7 (SCK) as output
	DDRB |= (1 << DDB4) | (1 << DDB5) | (1 << DDB7);
 604:	87 b3       	in	r24, 0x17	; 23
 606:	80 6b       	ori	r24, 0xB0	; 176
 608:	87 bb       	out	0x17, r24	; 23
	// Set PB6 (MISO) as input
	DDRB &= ~(1 << DDB6);
 60a:	be 98       	cbi	0x17, 6	; 23
	
	// Select Master SPI mode, SPI enable, SPI interrupt enable (Global interrupts must be enabled)
	SPCR |= (1 << MSTR) | (1 << SPE); //| (1 << SPIE);
 60c:	8d b1       	in	r24, 0x0d	; 13
 60e:	80 65       	ori	r24, 0x50	; 80
 610:	8d b9       	out	0x0d, r24	; 13
		Alternatively, the SPIF bit is cleared by first reading the
		SPI Status Register with SPIF set, then accessing the SPI Data Register (SPDR).
	*/
	
	// Transmit MSB of the data word first
	SPCR &= ~(1 << DORD);
 612:	6d 98       	cbi	0x0d, 5	; 13
	
	// Configure clock polarity (SCK is low when idle)
	SPCR &= ~(1 << CPOL);
 614:	6b 98       	cbi	0x0d, 3	; 13
	
	// Configure clock phase (data is sampled on leading edge)
	SPCR &= ~(1 << CPHA);
 616:	6a 98       	cbi	0x0d, 2	; 13
	
	// Configure SCK rate (f_osc/4)
	SPCR &= ~(1 << SPR0);
 618:	68 98       	cbi	0x0d, 0	; 13
	SPCR &= ~(1 << SPR1);
 61a:	69 98       	cbi	0x0d, 1	; 13
 61c:	08 95       	ret

0000061e <SPI_transmit>:
}

void SPI_transmit(uint8_t data) {
	// Initiate data transmission
	SPDR = data;
 61e:	8f b9       	out	0x0f, r24	; 15
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
 620:	77 9b       	sbis	0x0e, 7	; 14
 622:	fe cf       	rjmp	.-4      	; 0x620 <SPI_transmit+0x2>
	// Wait for ISR to be handled (meaning: wait for the transmission to complete)
	while (!SPI_TRANSMISSION_COMPLETE);
	
	SPI_TRANSMISSION_COMPLETE = 0;
	*/
}	
 624:	08 95       	ret

00000626 <SPI_read>:

uint8_t SPI_read(void) {
	SPDR = 0xFF; // Send dummy byte
 626:	8f ef       	ldi	r24, 0xFF	; 255
 628:	8f b9       	out	0x0f, r24	; 15
	
	// Wait for transmission complete
	while (!(SPSR & (1 << SPIF)));
 62a:	77 9b       	sbis	0x0e, 7	; 14
 62c:	fe cf       	rjmp	.-4      	; 0x62a <SPI_read+0x4>
	while (!SPI_TRANSMISSION_COMPLETE);
	
	SPI_TRANSMISSION_COMPLETE = 0;
	*/
	
	return SPDR;
 62e:	8f b1       	in	r24, 0x0f	; 15
	// SPIF bit in SPSR register is reset when accessing SPDR
}
 630:	08 95       	ret

00000632 <timer_8bit256divisionCheckOnlyinit>:
#define F_CPU 4915200

void timer_8bit256divisionCheckOnlyinit(void) {

	// start the timer
	TCCR0 = 0b00000101;
 632:	85 e0       	ldi	r24, 0x05	; 5
 634:	83 bf       	out	0x33, r24	; 51
	// set prescaler to 256 and start the timer
	TIMSK &= ~(1 << OCIE0 | 1 << TOIE0);
 636:	89 b7       	in	r24, 0x39	; 57
 638:	8c 7f       	andi	r24, 0xFC	; 252
 63a:	89 bf       	out	0x39, r24	; 57
 63c:	08 95       	ret

0000063e <UART_transmit>:
#include <util/delay.h>
#include "uart.h"

void UART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while ( ! (UCSR0A & (1<<UDRE0))) {
 63e:	5d 9b       	sbis	0x0b, 5	; 11
 640:	fe cf       	rjmp	.-4      	; 0x63e <UART_transmit>
		// waiting...
	}
	// Put data into buffer, sends the data
	UDR0 = data;
 642:	8c b9       	out	0x0c, r24	; 12
 644:	08 95       	ret

00000646 <UART_receive>:
}

unsigned char UART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1 << RXC0))) {
 646:	5f 9b       	sbis	0x0b, 7	; 11
 648:	fe cf       	rjmp	.-4      	; 0x646 <UART_receive>
		// wait...
	}
	return UDR0;
 64a:	8c b1       	in	r24, 0x0c	; 12
	
}
 64c:	08 95       	ret

0000064e <UART_init>:

void UART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = ubrr>>8;
 64e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = ubrr;
 650:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 652:	88 e1       	ldi	r24, 0x18	; 24
 654:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 656:	8e e8       	ldi	r24, 0x8E	; 142
 658:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(UART_transmit, UART_receive);
 65a:	63 e2       	ldi	r22, 0x23	; 35
 65c:	73 e0       	ldi	r23, 0x03	; 3
 65e:	8f e1       	ldi	r24, 0x1F	; 31
 660:	93 e0       	ldi	r25, 0x03	; 3
 662:	0e 94 89 03 	call	0x712	; 0x712 <fdevopen>
 666:	08 95       	ret

00000668 <XMEM_init>:
#include "uart.h"
#define BASE_ADDRESS 0x1000

void XMEM_init(void) {
	// Enable XMEM
	MCUCR |= (1 << SRE);
 668:	85 b7       	in	r24, 0x35	; 53
 66a:	80 68       	ori	r24, 0x80	; 128
 66c:	85 bf       	out	0x35, r24	; 53
	
	// SFIOR = XX100XXX
	// We use PC7-PC4 for JTAG, NOT for XMEM address
	SFIOR |= (1 << XMM2);
 66e:	80 b7       	in	r24, 0x30	; 48
 670:	80 62       	ori	r24, 0x20	; 32
 672:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~((1 << XMM1) | (1 << XMM0));
 674:	80 b7       	in	r24, 0x30	; 48
 676:	87 7e       	andi	r24, 0xE7	; 231
 678:	80 bf       	out	0x30, r24	; 48
 67a:	08 95       	ret

0000067c <XMEM_read>:
}

uint8_t XMEM_read(uint16_t address) {
	volatile uint8_t *ext_mem = (uint8_t*) BASE_ADDRESS;
	return ext_mem[address];
 67c:	90 5f       	subi	r25, 0xF0	; 240
 67e:	fc 01       	movw	r30, r24
 680:	80 81       	ld	r24, Z
}
 682:	08 95       	ret

00000684 <XMEM_write>:

void XMEM_write(uint8_t data, uint16_t address) {
	volatile uint8_t *ext_mem = (uint8_t *) BASE_ADDRESS;
	ext_mem[address] = data;
 684:	fb 01       	movw	r30, r22
 686:	f0 5f       	subi	r31, 0xF0	; 240
 688:	80 83       	st	Z, r24
 68a:	08 95       	ret

0000068c <main>:
#include "Drivers/oled.h"
#define MYUBRR 31


int main(void)
{
 68c:	cf 93       	push	r28
 68e:	df 93       	push	r29
 690:	cd b7       	in	r28, 0x3d	; 61
 692:	de b7       	in	r29, 0x3e	; 62
 694:	2b 97       	sbiw	r28, 0x0b	; 11
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	f8 94       	cli
 69a:	de bf       	out	0x3e, r29	; 62
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	cd bf       	out	0x3d, r28	; 61
	INTERRUPT_init();
 6a0:	0e 94 22 01 	call	0x244	; 0x244 <INTERRUPT_init>
	UART_init(MYUBRR);
 6a4:	8f e1       	ldi	r24, 0x1F	; 31
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 27 03 	call	0x64e	; 0x64e <UART_init>
	XMEM_init();
 6ac:	0e 94 34 03 	call	0x668	; 0x668 <XMEM_init>
	btn_init();
 6b0:	0e 94 1f 01 	call	0x23e	; 0x23e <btn_init>
	printf("\nStarting.... \n\r");
 6b4:	8c e0       	ldi	r24, 0x0C	; 12
 6b6:	92 e0       	ldi	r25, 0x02	; 2
 6b8:	9f 93       	push	r25
 6ba:	8f 93       	push	r24
 6bc:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <printf>
	timer_8bit256divisionCheckOnlyinit();
 6c0:	0e 94 19 03 	call	0x632	; 0x632 <timer_8bit256divisionCheckOnlyinit>
	CAN_init();
 6c4:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>

	
	
	OLED_init();
 6c8:	0e 94 41 02 	call	0x482	; 0x482 <OLED_init>
	OLED_clearAll();
 6cc:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <OLED_clearAll>
	OLED_refresh();
 6d0:	0e 94 ba 02 	call	0x574	; 0x574 <OLED_refresh>

	MENU_navigate(mainMenuPtr);
	*/
	
	msg_t msg;
	msg.id = 0xBB10;
 6d4:	80 e1       	ldi	r24, 0x10	; 16
 6d6:	9b eb       	ldi	r25, 0xBB	; 187
 6d8:	9a 83       	std	Y+2, r25	; 0x02
 6da:	89 83       	std	Y+1, r24	; 0x01
	msg.length = 3;
 6dc:	83 e0       	ldi	r24, 0x03	; 3
 6de:	8b 83       	std	Y+3, r24	; 0x03
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6e4:	2f ef       	ldi	r18, 0xFF	; 255
 6e6:	8f e7       	ldi	r24, 0x7F	; 127
 6e8:	97 e0       	ldi	r25, 0x07	; 7
 6ea:	21 50       	subi	r18, 0x01	; 1
 6ec:	80 40       	sbci	r24, 0x00	; 0
 6ee:	90 40       	sbci	r25, 0x00	; 0
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <main+0x5e>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <main+0x68>
 6f4:	00 00       	nop
		printf("MCP_read = %d\n\r", MCP_read(MCP_RXF0SIDH));
		_delay_ms(500);
		*/
		
		// Testing CAN
		CAN_message_send(msgPtr);
 6f6:	ce 01       	movw	r24, r28
 6f8:	01 96       	adiw	r24, 0x01	; 1
 6fa:	0e 94 75 00 	call	0xea	; 0xea <CAN_message_send>
 6fe:	2f ef       	ldi	r18, 0xFF	; 255
 700:	8f ef       	ldi	r24, 0xFF	; 255
 702:	9a e4       	ldi	r25, 0x4A	; 74
 704:	21 50       	subi	r18, 0x01	; 1
 706:	80 40       	sbci	r24, 0x00	; 0
 708:	90 40       	sbci	r25, 0x00	; 0
 70a:	e1 f7       	brne	.-8      	; 0x704 <main+0x78>
 70c:	00 c0       	rjmp	.+0      	; 0x70e <main+0x82>
 70e:	00 00       	nop
 710:	e9 cf       	rjmp	.-46     	; 0x6e4 <main+0x58>

00000712 <fdevopen>:
 712:	0f 93       	push	r16
 714:	1f 93       	push	r17
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
 71a:	00 97       	sbiw	r24, 0x00	; 0
 71c:	31 f4       	brne	.+12     	; 0x72a <fdevopen+0x18>
 71e:	61 15       	cp	r22, r1
 720:	71 05       	cpc	r23, r1
 722:	19 f4       	brne	.+6      	; 0x72a <fdevopen+0x18>
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	3a c0       	rjmp	.+116    	; 0x79e <fdevopen+0x8c>
 72a:	8b 01       	movw	r16, r22
 72c:	ec 01       	movw	r28, r24
 72e:	6e e0       	ldi	r22, 0x0E	; 14
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	0e 94 cb 05 	call	0xb96	; 0xb96 <calloc>
 73a:	fc 01       	movw	r30, r24
 73c:	89 2b       	or	r24, r25
 73e:	91 f3       	breq	.-28     	; 0x724 <fdevopen+0x12>
 740:	80 e8       	ldi	r24, 0x80	; 128
 742:	83 83       	std	Z+3, r24	; 0x03
 744:	01 15       	cp	r16, r1
 746:	11 05       	cpc	r17, r1
 748:	71 f0       	breq	.+28     	; 0x766 <fdevopen+0x54>
 74a:	13 87       	std	Z+11, r17	; 0x0b
 74c:	02 87       	std	Z+10, r16	; 0x0a
 74e:	81 e8       	ldi	r24, 0x81	; 129
 750:	83 83       	std	Z+3, r24	; 0x03
 752:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__iob>
 756:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <__iob+0x1>
 75a:	89 2b       	or	r24, r25
 75c:	21 f4       	brne	.+8      	; 0x766 <fdevopen+0x54>
 75e:	f0 93 21 02 	sts	0x0221, r31	; 0x800221 <__iob+0x1>
 762:	e0 93 20 02 	sts	0x0220, r30	; 0x800220 <__iob>
 766:	20 97       	sbiw	r28, 0x00	; 0
 768:	c9 f0       	breq	.+50     	; 0x79c <fdevopen+0x8a>
 76a:	d1 87       	std	Z+9, r29	; 0x09
 76c:	c0 87       	std	Z+8, r28	; 0x08
 76e:	83 81       	ldd	r24, Z+3	; 0x03
 770:	82 60       	ori	r24, 0x02	; 2
 772:	83 83       	std	Z+3, r24	; 0x03
 774:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__iob+0x2>
 778:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <__iob+0x3>
 77c:	89 2b       	or	r24, r25
 77e:	71 f4       	brne	.+28     	; 0x79c <fdevopen+0x8a>
 780:	f0 93 23 02 	sts	0x0223, r31	; 0x800223 <__iob+0x3>
 784:	e0 93 22 02 	sts	0x0222, r30	; 0x800222 <__iob+0x2>
 788:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__iob+0x4>
 78c:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__iob+0x5>
 790:	89 2b       	or	r24, r25
 792:	21 f4       	brne	.+8      	; 0x79c <fdevopen+0x8a>
 794:	f0 93 25 02 	sts	0x0225, r31	; 0x800225 <__iob+0x5>
 798:	e0 93 24 02 	sts	0x0224, r30	; 0x800224 <__iob+0x4>
 79c:	cf 01       	movw	r24, r30
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	1f 91       	pop	r17
 7a4:	0f 91       	pop	r16
 7a6:	08 95       	ret

000007a8 <printf>:
 7a8:	a0 e0       	ldi	r26, 0x00	; 0
 7aa:	b0 e0       	ldi	r27, 0x00	; 0
 7ac:	ea ed       	ldi	r30, 0xDA	; 218
 7ae:	f3 e0       	ldi	r31, 0x03	; 3
 7b0:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__prologue_saves__+0x20>
 7b4:	ae 01       	movw	r20, r28
 7b6:	4b 5f       	subi	r20, 0xFB	; 251
 7b8:	5f 4f       	sbci	r21, 0xFF	; 255
 7ba:	fa 01       	movw	r30, r20
 7bc:	61 91       	ld	r22, Z+
 7be:	71 91       	ld	r23, Z+
 7c0:	af 01       	movw	r20, r30
 7c2:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__iob+0x2>
 7c6:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <__iob+0x3>
 7ca:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <vfprintf>
 7ce:	e2 e0       	ldi	r30, 0x02	; 2
 7d0:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__epilogue_restores__+0x20>

000007d4 <vfprintf>:
 7d4:	ab e0       	ldi	r26, 0x0B	; 11
 7d6:	b0 e0       	ldi	r27, 0x00	; 0
 7d8:	e0 ef       	ldi	r30, 0xF0	; 240
 7da:	f3 e0       	ldi	r31, 0x03	; 3
 7dc:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__prologue_saves__>
 7e0:	6c 01       	movw	r12, r24
 7e2:	7b 01       	movw	r14, r22
 7e4:	8a 01       	movw	r16, r20
 7e6:	fc 01       	movw	r30, r24
 7e8:	17 82       	std	Z+7, r1	; 0x07
 7ea:	16 82       	std	Z+6, r1	; 0x06
 7ec:	83 81       	ldd	r24, Z+3	; 0x03
 7ee:	81 ff       	sbrs	r24, 1
 7f0:	cc c1       	rjmp	.+920    	; 0xb8a <vfprintf+0x3b6>
 7f2:	ce 01       	movw	r24, r28
 7f4:	01 96       	adiw	r24, 0x01	; 1
 7f6:	3c 01       	movw	r6, r24
 7f8:	f6 01       	movw	r30, r12
 7fa:	93 81       	ldd	r25, Z+3	; 0x03
 7fc:	f7 01       	movw	r30, r14
 7fe:	93 fd       	sbrc	r25, 3
 800:	85 91       	lpm	r24, Z+
 802:	93 ff       	sbrs	r25, 3
 804:	81 91       	ld	r24, Z+
 806:	7f 01       	movw	r14, r30
 808:	88 23       	and	r24, r24
 80a:	09 f4       	brne	.+2      	; 0x80e <vfprintf+0x3a>
 80c:	ba c1       	rjmp	.+884    	; 0xb82 <vfprintf+0x3ae>
 80e:	85 32       	cpi	r24, 0x25	; 37
 810:	39 f4       	brne	.+14     	; 0x820 <vfprintf+0x4c>
 812:	93 fd       	sbrc	r25, 3
 814:	85 91       	lpm	r24, Z+
 816:	93 ff       	sbrs	r25, 3
 818:	81 91       	ld	r24, Z+
 81a:	7f 01       	movw	r14, r30
 81c:	85 32       	cpi	r24, 0x25	; 37
 81e:	29 f4       	brne	.+10     	; 0x82a <vfprintf+0x56>
 820:	b6 01       	movw	r22, r12
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 828:	e7 cf       	rjmp	.-50     	; 0x7f8 <vfprintf+0x24>
 82a:	91 2c       	mov	r9, r1
 82c:	21 2c       	mov	r2, r1
 82e:	31 2c       	mov	r3, r1
 830:	ff e1       	ldi	r31, 0x1F	; 31
 832:	f3 15       	cp	r31, r3
 834:	d8 f0       	brcs	.+54     	; 0x86c <vfprintf+0x98>
 836:	8b 32       	cpi	r24, 0x2B	; 43
 838:	79 f0       	breq	.+30     	; 0x858 <vfprintf+0x84>
 83a:	38 f4       	brcc	.+14     	; 0x84a <vfprintf+0x76>
 83c:	80 32       	cpi	r24, 0x20	; 32
 83e:	79 f0       	breq	.+30     	; 0x85e <vfprintf+0x8a>
 840:	83 32       	cpi	r24, 0x23	; 35
 842:	a1 f4       	brne	.+40     	; 0x86c <vfprintf+0x98>
 844:	23 2d       	mov	r18, r3
 846:	20 61       	ori	r18, 0x10	; 16
 848:	1d c0       	rjmp	.+58     	; 0x884 <vfprintf+0xb0>
 84a:	8d 32       	cpi	r24, 0x2D	; 45
 84c:	61 f0       	breq	.+24     	; 0x866 <vfprintf+0x92>
 84e:	80 33       	cpi	r24, 0x30	; 48
 850:	69 f4       	brne	.+26     	; 0x86c <vfprintf+0x98>
 852:	23 2d       	mov	r18, r3
 854:	21 60       	ori	r18, 0x01	; 1
 856:	16 c0       	rjmp	.+44     	; 0x884 <vfprintf+0xb0>
 858:	83 2d       	mov	r24, r3
 85a:	82 60       	ori	r24, 0x02	; 2
 85c:	38 2e       	mov	r3, r24
 85e:	e3 2d       	mov	r30, r3
 860:	e4 60       	ori	r30, 0x04	; 4
 862:	3e 2e       	mov	r3, r30
 864:	2a c0       	rjmp	.+84     	; 0x8ba <vfprintf+0xe6>
 866:	f3 2d       	mov	r31, r3
 868:	f8 60       	ori	r31, 0x08	; 8
 86a:	1d c0       	rjmp	.+58     	; 0x8a6 <vfprintf+0xd2>
 86c:	37 fc       	sbrc	r3, 7
 86e:	2d c0       	rjmp	.+90     	; 0x8ca <vfprintf+0xf6>
 870:	20 ed       	ldi	r18, 0xD0	; 208
 872:	28 0f       	add	r18, r24
 874:	2a 30       	cpi	r18, 0x0A	; 10
 876:	40 f0       	brcs	.+16     	; 0x888 <vfprintf+0xb4>
 878:	8e 32       	cpi	r24, 0x2E	; 46
 87a:	b9 f4       	brne	.+46     	; 0x8aa <vfprintf+0xd6>
 87c:	36 fc       	sbrc	r3, 6
 87e:	81 c1       	rjmp	.+770    	; 0xb82 <vfprintf+0x3ae>
 880:	23 2d       	mov	r18, r3
 882:	20 64       	ori	r18, 0x40	; 64
 884:	32 2e       	mov	r3, r18
 886:	19 c0       	rjmp	.+50     	; 0x8ba <vfprintf+0xe6>
 888:	36 fe       	sbrs	r3, 6
 88a:	06 c0       	rjmp	.+12     	; 0x898 <vfprintf+0xc4>
 88c:	8a e0       	ldi	r24, 0x0A	; 10
 88e:	98 9e       	mul	r9, r24
 890:	20 0d       	add	r18, r0
 892:	11 24       	eor	r1, r1
 894:	92 2e       	mov	r9, r18
 896:	11 c0       	rjmp	.+34     	; 0x8ba <vfprintf+0xe6>
 898:	ea e0       	ldi	r30, 0x0A	; 10
 89a:	2e 9e       	mul	r2, r30
 89c:	20 0d       	add	r18, r0
 89e:	11 24       	eor	r1, r1
 8a0:	22 2e       	mov	r2, r18
 8a2:	f3 2d       	mov	r31, r3
 8a4:	f0 62       	ori	r31, 0x20	; 32
 8a6:	3f 2e       	mov	r3, r31
 8a8:	08 c0       	rjmp	.+16     	; 0x8ba <vfprintf+0xe6>
 8aa:	8c 36       	cpi	r24, 0x6C	; 108
 8ac:	21 f4       	brne	.+8      	; 0x8b6 <vfprintf+0xe2>
 8ae:	83 2d       	mov	r24, r3
 8b0:	80 68       	ori	r24, 0x80	; 128
 8b2:	38 2e       	mov	r3, r24
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <vfprintf+0xe6>
 8b6:	88 36       	cpi	r24, 0x68	; 104
 8b8:	41 f4       	brne	.+16     	; 0x8ca <vfprintf+0xf6>
 8ba:	f7 01       	movw	r30, r14
 8bc:	93 fd       	sbrc	r25, 3
 8be:	85 91       	lpm	r24, Z+
 8c0:	93 ff       	sbrs	r25, 3
 8c2:	81 91       	ld	r24, Z+
 8c4:	7f 01       	movw	r14, r30
 8c6:	81 11       	cpse	r24, r1
 8c8:	b3 cf       	rjmp	.-154    	; 0x830 <vfprintf+0x5c>
 8ca:	98 2f       	mov	r25, r24
 8cc:	9f 7d       	andi	r25, 0xDF	; 223
 8ce:	95 54       	subi	r25, 0x45	; 69
 8d0:	93 30       	cpi	r25, 0x03	; 3
 8d2:	28 f4       	brcc	.+10     	; 0x8de <vfprintf+0x10a>
 8d4:	0c 5f       	subi	r16, 0xFC	; 252
 8d6:	1f 4f       	sbci	r17, 0xFF	; 255
 8d8:	9f e3       	ldi	r25, 0x3F	; 63
 8da:	99 83       	std	Y+1, r25	; 0x01
 8dc:	0d c0       	rjmp	.+26     	; 0x8f8 <vfprintf+0x124>
 8de:	83 36       	cpi	r24, 0x63	; 99
 8e0:	31 f0       	breq	.+12     	; 0x8ee <vfprintf+0x11a>
 8e2:	83 37       	cpi	r24, 0x73	; 115
 8e4:	71 f0       	breq	.+28     	; 0x902 <vfprintf+0x12e>
 8e6:	83 35       	cpi	r24, 0x53	; 83
 8e8:	09 f0       	breq	.+2      	; 0x8ec <vfprintf+0x118>
 8ea:	59 c0       	rjmp	.+178    	; 0x99e <vfprintf+0x1ca>
 8ec:	21 c0       	rjmp	.+66     	; 0x930 <vfprintf+0x15c>
 8ee:	f8 01       	movw	r30, r16
 8f0:	80 81       	ld	r24, Z
 8f2:	89 83       	std	Y+1, r24	; 0x01
 8f4:	0e 5f       	subi	r16, 0xFE	; 254
 8f6:	1f 4f       	sbci	r17, 0xFF	; 255
 8f8:	88 24       	eor	r8, r8
 8fa:	83 94       	inc	r8
 8fc:	91 2c       	mov	r9, r1
 8fe:	53 01       	movw	r10, r6
 900:	13 c0       	rjmp	.+38     	; 0x928 <vfprintf+0x154>
 902:	28 01       	movw	r4, r16
 904:	f2 e0       	ldi	r31, 0x02	; 2
 906:	4f 0e       	add	r4, r31
 908:	51 1c       	adc	r5, r1
 90a:	f8 01       	movw	r30, r16
 90c:	a0 80       	ld	r10, Z
 90e:	b1 80       	ldd	r11, Z+1	; 0x01
 910:	36 fe       	sbrs	r3, 6
 912:	03 c0       	rjmp	.+6      	; 0x91a <vfprintf+0x146>
 914:	69 2d       	mov	r22, r9
 916:	70 e0       	ldi	r23, 0x00	; 0
 918:	02 c0       	rjmp	.+4      	; 0x91e <vfprintf+0x14a>
 91a:	6f ef       	ldi	r22, 0xFF	; 255
 91c:	7f ef       	ldi	r23, 0xFF	; 255
 91e:	c5 01       	movw	r24, r10
 920:	0e 94 1a 07 	call	0xe34	; 0xe34 <strnlen>
 924:	4c 01       	movw	r8, r24
 926:	82 01       	movw	r16, r4
 928:	f3 2d       	mov	r31, r3
 92a:	ff 77       	andi	r31, 0x7F	; 127
 92c:	3f 2e       	mov	r3, r31
 92e:	16 c0       	rjmp	.+44     	; 0x95c <vfprintf+0x188>
 930:	28 01       	movw	r4, r16
 932:	22 e0       	ldi	r18, 0x02	; 2
 934:	42 0e       	add	r4, r18
 936:	51 1c       	adc	r5, r1
 938:	f8 01       	movw	r30, r16
 93a:	a0 80       	ld	r10, Z
 93c:	b1 80       	ldd	r11, Z+1	; 0x01
 93e:	36 fe       	sbrs	r3, 6
 940:	03 c0       	rjmp	.+6      	; 0x948 <vfprintf+0x174>
 942:	69 2d       	mov	r22, r9
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	02 c0       	rjmp	.+4      	; 0x94c <vfprintf+0x178>
 948:	6f ef       	ldi	r22, 0xFF	; 255
 94a:	7f ef       	ldi	r23, 0xFF	; 255
 94c:	c5 01       	movw	r24, r10
 94e:	0e 94 08 07 	call	0xe10	; 0xe10 <strnlen_P>
 952:	4c 01       	movw	r8, r24
 954:	f3 2d       	mov	r31, r3
 956:	f0 68       	ori	r31, 0x80	; 128
 958:	3f 2e       	mov	r3, r31
 95a:	82 01       	movw	r16, r4
 95c:	33 fc       	sbrc	r3, 3
 95e:	1b c0       	rjmp	.+54     	; 0x996 <vfprintf+0x1c2>
 960:	82 2d       	mov	r24, r2
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	88 16       	cp	r8, r24
 966:	99 06       	cpc	r9, r25
 968:	b0 f4       	brcc	.+44     	; 0x996 <vfprintf+0x1c2>
 96a:	b6 01       	movw	r22, r12
 96c:	80 e2       	ldi	r24, 0x20	; 32
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 974:	2a 94       	dec	r2
 976:	f4 cf       	rjmp	.-24     	; 0x960 <vfprintf+0x18c>
 978:	f5 01       	movw	r30, r10
 97a:	37 fc       	sbrc	r3, 7
 97c:	85 91       	lpm	r24, Z+
 97e:	37 fe       	sbrs	r3, 7
 980:	81 91       	ld	r24, Z+
 982:	5f 01       	movw	r10, r30
 984:	b6 01       	movw	r22, r12
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 98c:	21 10       	cpse	r2, r1
 98e:	2a 94       	dec	r2
 990:	21 e0       	ldi	r18, 0x01	; 1
 992:	82 1a       	sub	r8, r18
 994:	91 08       	sbc	r9, r1
 996:	81 14       	cp	r8, r1
 998:	91 04       	cpc	r9, r1
 99a:	71 f7       	brne	.-36     	; 0x978 <vfprintf+0x1a4>
 99c:	e8 c0       	rjmp	.+464    	; 0xb6e <vfprintf+0x39a>
 99e:	84 36       	cpi	r24, 0x64	; 100
 9a0:	11 f0       	breq	.+4      	; 0x9a6 <vfprintf+0x1d2>
 9a2:	89 36       	cpi	r24, 0x69	; 105
 9a4:	41 f5       	brne	.+80     	; 0x9f6 <vfprintf+0x222>
 9a6:	f8 01       	movw	r30, r16
 9a8:	37 fe       	sbrs	r3, 7
 9aa:	07 c0       	rjmp	.+14     	; 0x9ba <vfprintf+0x1e6>
 9ac:	60 81       	ld	r22, Z
 9ae:	71 81       	ldd	r23, Z+1	; 0x01
 9b0:	82 81       	ldd	r24, Z+2	; 0x02
 9b2:	93 81       	ldd	r25, Z+3	; 0x03
 9b4:	0c 5f       	subi	r16, 0xFC	; 252
 9b6:	1f 4f       	sbci	r17, 0xFF	; 255
 9b8:	08 c0       	rjmp	.+16     	; 0x9ca <vfprintf+0x1f6>
 9ba:	60 81       	ld	r22, Z
 9bc:	71 81       	ldd	r23, Z+1	; 0x01
 9be:	07 2e       	mov	r0, r23
 9c0:	00 0c       	add	r0, r0
 9c2:	88 0b       	sbc	r24, r24
 9c4:	99 0b       	sbc	r25, r25
 9c6:	0e 5f       	subi	r16, 0xFE	; 254
 9c8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ca:	f3 2d       	mov	r31, r3
 9cc:	ff 76       	andi	r31, 0x6F	; 111
 9ce:	3f 2e       	mov	r3, r31
 9d0:	97 ff       	sbrs	r25, 7
 9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <vfprintf+0x212>
 9d4:	90 95       	com	r25
 9d6:	80 95       	com	r24
 9d8:	70 95       	com	r23
 9da:	61 95       	neg	r22
 9dc:	7f 4f       	sbci	r23, 0xFF	; 255
 9de:	8f 4f       	sbci	r24, 0xFF	; 255
 9e0:	9f 4f       	sbci	r25, 0xFF	; 255
 9e2:	f0 68       	ori	r31, 0x80	; 128
 9e4:	3f 2e       	mov	r3, r31
 9e6:	2a e0       	ldi	r18, 0x0A	; 10
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	a3 01       	movw	r20, r6
 9ec:	0e 94 61 07 	call	0xec2	; 0xec2 <__ultoa_invert>
 9f0:	88 2e       	mov	r8, r24
 9f2:	86 18       	sub	r8, r6
 9f4:	45 c0       	rjmp	.+138    	; 0xa80 <vfprintf+0x2ac>
 9f6:	85 37       	cpi	r24, 0x75	; 117
 9f8:	31 f4       	brne	.+12     	; 0xa06 <vfprintf+0x232>
 9fa:	23 2d       	mov	r18, r3
 9fc:	2f 7e       	andi	r18, 0xEF	; 239
 9fe:	b2 2e       	mov	r11, r18
 a00:	2a e0       	ldi	r18, 0x0A	; 10
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	25 c0       	rjmp	.+74     	; 0xa50 <vfprintf+0x27c>
 a06:	93 2d       	mov	r25, r3
 a08:	99 7f       	andi	r25, 0xF9	; 249
 a0a:	b9 2e       	mov	r11, r25
 a0c:	8f 36       	cpi	r24, 0x6F	; 111
 a0e:	c1 f0       	breq	.+48     	; 0xa40 <vfprintf+0x26c>
 a10:	18 f4       	brcc	.+6      	; 0xa18 <vfprintf+0x244>
 a12:	88 35       	cpi	r24, 0x58	; 88
 a14:	79 f0       	breq	.+30     	; 0xa34 <vfprintf+0x260>
 a16:	b5 c0       	rjmp	.+362    	; 0xb82 <vfprintf+0x3ae>
 a18:	80 37       	cpi	r24, 0x70	; 112
 a1a:	19 f0       	breq	.+6      	; 0xa22 <vfprintf+0x24e>
 a1c:	88 37       	cpi	r24, 0x78	; 120
 a1e:	21 f0       	breq	.+8      	; 0xa28 <vfprintf+0x254>
 a20:	b0 c0       	rjmp	.+352    	; 0xb82 <vfprintf+0x3ae>
 a22:	e9 2f       	mov	r30, r25
 a24:	e0 61       	ori	r30, 0x10	; 16
 a26:	be 2e       	mov	r11, r30
 a28:	b4 fe       	sbrs	r11, 4
 a2a:	0d c0       	rjmp	.+26     	; 0xa46 <vfprintf+0x272>
 a2c:	fb 2d       	mov	r31, r11
 a2e:	f4 60       	ori	r31, 0x04	; 4
 a30:	bf 2e       	mov	r11, r31
 a32:	09 c0       	rjmp	.+18     	; 0xa46 <vfprintf+0x272>
 a34:	34 fe       	sbrs	r3, 4
 a36:	0a c0       	rjmp	.+20     	; 0xa4c <vfprintf+0x278>
 a38:	29 2f       	mov	r18, r25
 a3a:	26 60       	ori	r18, 0x06	; 6
 a3c:	b2 2e       	mov	r11, r18
 a3e:	06 c0       	rjmp	.+12     	; 0xa4c <vfprintf+0x278>
 a40:	28 e0       	ldi	r18, 0x08	; 8
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	05 c0       	rjmp	.+10     	; 0xa50 <vfprintf+0x27c>
 a46:	20 e1       	ldi	r18, 0x10	; 16
 a48:	30 e0       	ldi	r19, 0x00	; 0
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <vfprintf+0x27c>
 a4c:	20 e1       	ldi	r18, 0x10	; 16
 a4e:	32 e0       	ldi	r19, 0x02	; 2
 a50:	f8 01       	movw	r30, r16
 a52:	b7 fe       	sbrs	r11, 7
 a54:	07 c0       	rjmp	.+14     	; 0xa64 <vfprintf+0x290>
 a56:	60 81       	ld	r22, Z
 a58:	71 81       	ldd	r23, Z+1	; 0x01
 a5a:	82 81       	ldd	r24, Z+2	; 0x02
 a5c:	93 81       	ldd	r25, Z+3	; 0x03
 a5e:	0c 5f       	subi	r16, 0xFC	; 252
 a60:	1f 4f       	sbci	r17, 0xFF	; 255
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <vfprintf+0x29c>
 a64:	60 81       	ld	r22, Z
 a66:	71 81       	ldd	r23, Z+1	; 0x01
 a68:	80 e0       	ldi	r24, 0x00	; 0
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	0e 5f       	subi	r16, 0xFE	; 254
 a6e:	1f 4f       	sbci	r17, 0xFF	; 255
 a70:	a3 01       	movw	r20, r6
 a72:	0e 94 61 07 	call	0xec2	; 0xec2 <__ultoa_invert>
 a76:	88 2e       	mov	r8, r24
 a78:	86 18       	sub	r8, r6
 a7a:	fb 2d       	mov	r31, r11
 a7c:	ff 77       	andi	r31, 0x7F	; 127
 a7e:	3f 2e       	mov	r3, r31
 a80:	36 fe       	sbrs	r3, 6
 a82:	0d c0       	rjmp	.+26     	; 0xa9e <vfprintf+0x2ca>
 a84:	23 2d       	mov	r18, r3
 a86:	2e 7f       	andi	r18, 0xFE	; 254
 a88:	a2 2e       	mov	r10, r18
 a8a:	89 14       	cp	r8, r9
 a8c:	58 f4       	brcc	.+22     	; 0xaa4 <vfprintf+0x2d0>
 a8e:	34 fe       	sbrs	r3, 4
 a90:	0b c0       	rjmp	.+22     	; 0xaa8 <vfprintf+0x2d4>
 a92:	32 fc       	sbrc	r3, 2
 a94:	09 c0       	rjmp	.+18     	; 0xaa8 <vfprintf+0x2d4>
 a96:	83 2d       	mov	r24, r3
 a98:	8e 7e       	andi	r24, 0xEE	; 238
 a9a:	a8 2e       	mov	r10, r24
 a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <vfprintf+0x2d4>
 a9e:	b8 2c       	mov	r11, r8
 aa0:	a3 2c       	mov	r10, r3
 aa2:	03 c0       	rjmp	.+6      	; 0xaaa <vfprintf+0x2d6>
 aa4:	b8 2c       	mov	r11, r8
 aa6:	01 c0       	rjmp	.+2      	; 0xaaa <vfprintf+0x2d6>
 aa8:	b9 2c       	mov	r11, r9
 aaa:	a4 fe       	sbrs	r10, 4
 aac:	0f c0       	rjmp	.+30     	; 0xacc <vfprintf+0x2f8>
 aae:	fe 01       	movw	r30, r28
 ab0:	e8 0d       	add	r30, r8
 ab2:	f1 1d       	adc	r31, r1
 ab4:	80 81       	ld	r24, Z
 ab6:	80 33       	cpi	r24, 0x30	; 48
 ab8:	21 f4       	brne	.+8      	; 0xac2 <vfprintf+0x2ee>
 aba:	9a 2d       	mov	r25, r10
 abc:	99 7e       	andi	r25, 0xE9	; 233
 abe:	a9 2e       	mov	r10, r25
 ac0:	09 c0       	rjmp	.+18     	; 0xad4 <vfprintf+0x300>
 ac2:	a2 fe       	sbrs	r10, 2
 ac4:	06 c0       	rjmp	.+12     	; 0xad2 <vfprintf+0x2fe>
 ac6:	b3 94       	inc	r11
 ac8:	b3 94       	inc	r11
 aca:	04 c0       	rjmp	.+8      	; 0xad4 <vfprintf+0x300>
 acc:	8a 2d       	mov	r24, r10
 ace:	86 78       	andi	r24, 0x86	; 134
 ad0:	09 f0       	breq	.+2      	; 0xad4 <vfprintf+0x300>
 ad2:	b3 94       	inc	r11
 ad4:	a3 fc       	sbrc	r10, 3
 ad6:	11 c0       	rjmp	.+34     	; 0xafa <vfprintf+0x326>
 ad8:	a0 fe       	sbrs	r10, 0
 ada:	06 c0       	rjmp	.+12     	; 0xae8 <vfprintf+0x314>
 adc:	b2 14       	cp	r11, r2
 ade:	88 f4       	brcc	.+34     	; 0xb02 <vfprintf+0x32e>
 ae0:	28 0c       	add	r2, r8
 ae2:	92 2c       	mov	r9, r2
 ae4:	9b 18       	sub	r9, r11
 ae6:	0e c0       	rjmp	.+28     	; 0xb04 <vfprintf+0x330>
 ae8:	b2 14       	cp	r11, r2
 aea:	60 f4       	brcc	.+24     	; 0xb04 <vfprintf+0x330>
 aec:	b6 01       	movw	r22, r12
 aee:	80 e2       	ldi	r24, 0x20	; 32
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 af6:	b3 94       	inc	r11
 af8:	f7 cf       	rjmp	.-18     	; 0xae8 <vfprintf+0x314>
 afa:	b2 14       	cp	r11, r2
 afc:	18 f4       	brcc	.+6      	; 0xb04 <vfprintf+0x330>
 afe:	2b 18       	sub	r2, r11
 b00:	02 c0       	rjmp	.+4      	; 0xb06 <vfprintf+0x332>
 b02:	98 2c       	mov	r9, r8
 b04:	21 2c       	mov	r2, r1
 b06:	a4 fe       	sbrs	r10, 4
 b08:	10 c0       	rjmp	.+32     	; 0xb2a <vfprintf+0x356>
 b0a:	b6 01       	movw	r22, r12
 b0c:	80 e3       	ldi	r24, 0x30	; 48
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 b14:	a2 fe       	sbrs	r10, 2
 b16:	17 c0       	rjmp	.+46     	; 0xb46 <vfprintf+0x372>
 b18:	a1 fc       	sbrc	r10, 1
 b1a:	03 c0       	rjmp	.+6      	; 0xb22 <vfprintf+0x34e>
 b1c:	88 e7       	ldi	r24, 0x78	; 120
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <vfprintf+0x352>
 b22:	88 e5       	ldi	r24, 0x58	; 88
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	b6 01       	movw	r22, r12
 b28:	0c c0       	rjmp	.+24     	; 0xb42 <vfprintf+0x36e>
 b2a:	8a 2d       	mov	r24, r10
 b2c:	86 78       	andi	r24, 0x86	; 134
 b2e:	59 f0       	breq	.+22     	; 0xb46 <vfprintf+0x372>
 b30:	a1 fe       	sbrs	r10, 1
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <vfprintf+0x364>
 b34:	8b e2       	ldi	r24, 0x2B	; 43
 b36:	01 c0       	rjmp	.+2      	; 0xb3a <vfprintf+0x366>
 b38:	80 e2       	ldi	r24, 0x20	; 32
 b3a:	a7 fc       	sbrc	r10, 7
 b3c:	8d e2       	ldi	r24, 0x2D	; 45
 b3e:	b6 01       	movw	r22, r12
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 b46:	89 14       	cp	r8, r9
 b48:	38 f4       	brcc	.+14     	; 0xb58 <vfprintf+0x384>
 b4a:	b6 01       	movw	r22, r12
 b4c:	80 e3       	ldi	r24, 0x30	; 48
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 b54:	9a 94       	dec	r9
 b56:	f7 cf       	rjmp	.-18     	; 0xb46 <vfprintf+0x372>
 b58:	8a 94       	dec	r8
 b5a:	f3 01       	movw	r30, r6
 b5c:	e8 0d       	add	r30, r8
 b5e:	f1 1d       	adc	r31, r1
 b60:	80 81       	ld	r24, Z
 b62:	b6 01       	movw	r22, r12
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 b6a:	81 10       	cpse	r8, r1
 b6c:	f5 cf       	rjmp	.-22     	; 0xb58 <vfprintf+0x384>
 b6e:	22 20       	and	r2, r2
 b70:	09 f4       	brne	.+2      	; 0xb74 <vfprintf+0x3a0>
 b72:	42 ce       	rjmp	.-892    	; 0x7f8 <vfprintf+0x24>
 b74:	b6 01       	movw	r22, r12
 b76:	80 e2       	ldi	r24, 0x20	; 32
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	0e 94 25 07 	call	0xe4a	; 0xe4a <fputc>
 b7e:	2a 94       	dec	r2
 b80:	f6 cf       	rjmp	.-20     	; 0xb6e <vfprintf+0x39a>
 b82:	f6 01       	movw	r30, r12
 b84:	86 81       	ldd	r24, Z+6	; 0x06
 b86:	97 81       	ldd	r25, Z+7	; 0x07
 b88:	02 c0       	rjmp	.+4      	; 0xb8e <vfprintf+0x3ba>
 b8a:	8f ef       	ldi	r24, 0xFF	; 255
 b8c:	9f ef       	ldi	r25, 0xFF	; 255
 b8e:	2b 96       	adiw	r28, 0x0b	; 11
 b90:	e2 e1       	ldi	r30, 0x12	; 18
 b92:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__epilogue_restores__>

00000b96 <calloc>:
 b96:	0f 93       	push	r16
 b98:	1f 93       	push	r17
 b9a:	cf 93       	push	r28
 b9c:	df 93       	push	r29
 b9e:	86 9f       	mul	r24, r22
 ba0:	80 01       	movw	r16, r0
 ba2:	87 9f       	mul	r24, r23
 ba4:	10 0d       	add	r17, r0
 ba6:	96 9f       	mul	r25, r22
 ba8:	10 0d       	add	r17, r0
 baa:	11 24       	eor	r1, r1
 bac:	c8 01       	movw	r24, r16
 bae:	0e 94 e7 05 	call	0xbce	; 0xbce <malloc>
 bb2:	ec 01       	movw	r28, r24
 bb4:	00 97       	sbiw	r24, 0x00	; 0
 bb6:	29 f0       	breq	.+10     	; 0xbc2 <calloc+0x2c>
 bb8:	a8 01       	movw	r20, r16
 bba:	60 e0       	ldi	r22, 0x00	; 0
 bbc:	70 e0       	ldi	r23, 0x00	; 0
 bbe:	0e 94 13 07 	call	0xe26	; 0xe26 <memset>
 bc2:	ce 01       	movw	r24, r28
 bc4:	df 91       	pop	r29
 bc6:	cf 91       	pop	r28
 bc8:	1f 91       	pop	r17
 bca:	0f 91       	pop	r16
 bcc:	08 95       	ret

00000bce <malloc>:
 bce:	0f 93       	push	r16
 bd0:	1f 93       	push	r17
 bd2:	cf 93       	push	r28
 bd4:	df 93       	push	r29
 bd6:	82 30       	cpi	r24, 0x02	; 2
 bd8:	91 05       	cpc	r25, r1
 bda:	10 f4       	brcc	.+4      	; 0xbe0 <malloc+0x12>
 bdc:	82 e0       	ldi	r24, 0x02	; 2
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <__flp>
 be4:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <__flp+0x1>
 be8:	20 e0       	ldi	r18, 0x00	; 0
 bea:	30 e0       	ldi	r19, 0x00	; 0
 bec:	a0 e0       	ldi	r26, 0x00	; 0
 bee:	b0 e0       	ldi	r27, 0x00	; 0
 bf0:	30 97       	sbiw	r30, 0x00	; 0
 bf2:	19 f1       	breq	.+70     	; 0xc3a <malloc+0x6c>
 bf4:	40 81       	ld	r20, Z
 bf6:	51 81       	ldd	r21, Z+1	; 0x01
 bf8:	02 81       	ldd	r16, Z+2	; 0x02
 bfa:	13 81       	ldd	r17, Z+3	; 0x03
 bfc:	48 17       	cp	r20, r24
 bfe:	59 07       	cpc	r21, r25
 c00:	c8 f0       	brcs	.+50     	; 0xc34 <malloc+0x66>
 c02:	84 17       	cp	r24, r20
 c04:	95 07       	cpc	r25, r21
 c06:	69 f4       	brne	.+26     	; 0xc22 <malloc+0x54>
 c08:	10 97       	sbiw	r26, 0x00	; 0
 c0a:	31 f0       	breq	.+12     	; 0xc18 <malloc+0x4a>
 c0c:	12 96       	adiw	r26, 0x02	; 2
 c0e:	0c 93       	st	X, r16
 c10:	12 97       	sbiw	r26, 0x02	; 2
 c12:	13 96       	adiw	r26, 0x03	; 3
 c14:	1c 93       	st	X, r17
 c16:	27 c0       	rjmp	.+78     	; 0xc66 <malloc+0x98>
 c18:	00 93 28 02 	sts	0x0228, r16	; 0x800228 <__flp>
 c1c:	10 93 29 02 	sts	0x0229, r17	; 0x800229 <__flp+0x1>
 c20:	22 c0       	rjmp	.+68     	; 0xc66 <malloc+0x98>
 c22:	21 15       	cp	r18, r1
 c24:	31 05       	cpc	r19, r1
 c26:	19 f0       	breq	.+6      	; 0xc2e <malloc+0x60>
 c28:	42 17       	cp	r20, r18
 c2a:	53 07       	cpc	r21, r19
 c2c:	18 f4       	brcc	.+6      	; 0xc34 <malloc+0x66>
 c2e:	9a 01       	movw	r18, r20
 c30:	bd 01       	movw	r22, r26
 c32:	ef 01       	movw	r28, r30
 c34:	df 01       	movw	r26, r30
 c36:	f8 01       	movw	r30, r16
 c38:	db cf       	rjmp	.-74     	; 0xbf0 <malloc+0x22>
 c3a:	21 15       	cp	r18, r1
 c3c:	31 05       	cpc	r19, r1
 c3e:	f9 f0       	breq	.+62     	; 0xc7e <malloc+0xb0>
 c40:	28 1b       	sub	r18, r24
 c42:	39 0b       	sbc	r19, r25
 c44:	24 30       	cpi	r18, 0x04	; 4
 c46:	31 05       	cpc	r19, r1
 c48:	80 f4       	brcc	.+32     	; 0xc6a <malloc+0x9c>
 c4a:	8a 81       	ldd	r24, Y+2	; 0x02
 c4c:	9b 81       	ldd	r25, Y+3	; 0x03
 c4e:	61 15       	cp	r22, r1
 c50:	71 05       	cpc	r23, r1
 c52:	21 f0       	breq	.+8      	; 0xc5c <malloc+0x8e>
 c54:	fb 01       	movw	r30, r22
 c56:	93 83       	std	Z+3, r25	; 0x03
 c58:	82 83       	std	Z+2, r24	; 0x02
 c5a:	04 c0       	rjmp	.+8      	; 0xc64 <malloc+0x96>
 c5c:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <__flp+0x1>
 c60:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__flp>
 c64:	fe 01       	movw	r30, r28
 c66:	32 96       	adiw	r30, 0x02	; 2
 c68:	44 c0       	rjmp	.+136    	; 0xcf2 <malloc+0x124>
 c6a:	fe 01       	movw	r30, r28
 c6c:	e2 0f       	add	r30, r18
 c6e:	f3 1f       	adc	r31, r19
 c70:	81 93       	st	Z+, r24
 c72:	91 93       	st	Z+, r25
 c74:	22 50       	subi	r18, 0x02	; 2
 c76:	31 09       	sbc	r19, r1
 c78:	39 83       	std	Y+1, r19	; 0x01
 c7a:	28 83       	st	Y, r18
 c7c:	3a c0       	rjmp	.+116    	; 0xcf2 <malloc+0x124>
 c7e:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <__brkval>
 c82:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <__brkval+0x1>
 c86:	23 2b       	or	r18, r19
 c88:	41 f4       	brne	.+16     	; 0xc9a <malloc+0xcc>
 c8a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c8e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 c92:	30 93 27 02 	sts	0x0227, r19	; 0x800227 <__brkval+0x1>
 c96:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <__brkval>
 c9a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 c9e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 ca2:	21 15       	cp	r18, r1
 ca4:	31 05       	cpc	r19, r1
 ca6:	41 f4       	brne	.+16     	; 0xcb8 <malloc+0xea>
 ca8:	2d b7       	in	r18, 0x3d	; 61
 caa:	3e b7       	in	r19, 0x3e	; 62
 cac:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 cb0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 cb4:	24 1b       	sub	r18, r20
 cb6:	35 0b       	sbc	r19, r21
 cb8:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <__brkval>
 cbc:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <__brkval+0x1>
 cc0:	e2 17       	cp	r30, r18
 cc2:	f3 07       	cpc	r31, r19
 cc4:	a0 f4       	brcc	.+40     	; 0xcee <malloc+0x120>
 cc6:	2e 1b       	sub	r18, r30
 cc8:	3f 0b       	sbc	r19, r31
 cca:	28 17       	cp	r18, r24
 ccc:	39 07       	cpc	r19, r25
 cce:	78 f0       	brcs	.+30     	; 0xcee <malloc+0x120>
 cd0:	ac 01       	movw	r20, r24
 cd2:	4e 5f       	subi	r20, 0xFE	; 254
 cd4:	5f 4f       	sbci	r21, 0xFF	; 255
 cd6:	24 17       	cp	r18, r20
 cd8:	35 07       	cpc	r19, r21
 cda:	48 f0       	brcs	.+18     	; 0xcee <malloc+0x120>
 cdc:	4e 0f       	add	r20, r30
 cde:	5f 1f       	adc	r21, r31
 ce0:	50 93 27 02 	sts	0x0227, r21	; 0x800227 <__brkval+0x1>
 ce4:	40 93 26 02 	sts	0x0226, r20	; 0x800226 <__brkval>
 ce8:	81 93       	st	Z+, r24
 cea:	91 93       	st	Z+, r25
 cec:	02 c0       	rjmp	.+4      	; 0xcf2 <malloc+0x124>
 cee:	e0 e0       	ldi	r30, 0x00	; 0
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	cf 01       	movw	r24, r30
 cf4:	df 91       	pop	r29
 cf6:	cf 91       	pop	r28
 cf8:	1f 91       	pop	r17
 cfa:	0f 91       	pop	r16
 cfc:	08 95       	ret

00000cfe <free>:
 cfe:	cf 93       	push	r28
 d00:	df 93       	push	r29
 d02:	00 97       	sbiw	r24, 0x00	; 0
 d04:	09 f4       	brne	.+2      	; 0xd08 <free+0xa>
 d06:	81 c0       	rjmp	.+258    	; 0xe0a <free+0x10c>
 d08:	fc 01       	movw	r30, r24
 d0a:	32 97       	sbiw	r30, 0x02	; 2
 d0c:	13 82       	std	Z+3, r1	; 0x03
 d0e:	12 82       	std	Z+2, r1	; 0x02
 d10:	a0 91 28 02 	lds	r26, 0x0228	; 0x800228 <__flp>
 d14:	b0 91 29 02 	lds	r27, 0x0229	; 0x800229 <__flp+0x1>
 d18:	10 97       	sbiw	r26, 0x00	; 0
 d1a:	81 f4       	brne	.+32     	; 0xd3c <free+0x3e>
 d1c:	20 81       	ld	r18, Z
 d1e:	31 81       	ldd	r19, Z+1	; 0x01
 d20:	82 0f       	add	r24, r18
 d22:	93 1f       	adc	r25, r19
 d24:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <__brkval>
 d28:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <__brkval+0x1>
 d2c:	28 17       	cp	r18, r24
 d2e:	39 07       	cpc	r19, r25
 d30:	51 f5       	brne	.+84     	; 0xd86 <free+0x88>
 d32:	f0 93 27 02 	sts	0x0227, r31	; 0x800227 <__brkval+0x1>
 d36:	e0 93 26 02 	sts	0x0226, r30	; 0x800226 <__brkval>
 d3a:	67 c0       	rjmp	.+206    	; 0xe0a <free+0x10c>
 d3c:	ed 01       	movw	r28, r26
 d3e:	20 e0       	ldi	r18, 0x00	; 0
 d40:	30 e0       	ldi	r19, 0x00	; 0
 d42:	ce 17       	cp	r28, r30
 d44:	df 07       	cpc	r29, r31
 d46:	40 f4       	brcc	.+16     	; 0xd58 <free+0x5a>
 d48:	4a 81       	ldd	r20, Y+2	; 0x02
 d4a:	5b 81       	ldd	r21, Y+3	; 0x03
 d4c:	9e 01       	movw	r18, r28
 d4e:	41 15       	cp	r20, r1
 d50:	51 05       	cpc	r21, r1
 d52:	f1 f0       	breq	.+60     	; 0xd90 <free+0x92>
 d54:	ea 01       	movw	r28, r20
 d56:	f5 cf       	rjmp	.-22     	; 0xd42 <free+0x44>
 d58:	d3 83       	std	Z+3, r29	; 0x03
 d5a:	c2 83       	std	Z+2, r28	; 0x02
 d5c:	40 81       	ld	r20, Z
 d5e:	51 81       	ldd	r21, Z+1	; 0x01
 d60:	84 0f       	add	r24, r20
 d62:	95 1f       	adc	r25, r21
 d64:	c8 17       	cp	r28, r24
 d66:	d9 07       	cpc	r29, r25
 d68:	59 f4       	brne	.+22     	; 0xd80 <free+0x82>
 d6a:	88 81       	ld	r24, Y
 d6c:	99 81       	ldd	r25, Y+1	; 0x01
 d6e:	84 0f       	add	r24, r20
 d70:	95 1f       	adc	r25, r21
 d72:	02 96       	adiw	r24, 0x02	; 2
 d74:	91 83       	std	Z+1, r25	; 0x01
 d76:	80 83       	st	Z, r24
 d78:	8a 81       	ldd	r24, Y+2	; 0x02
 d7a:	9b 81       	ldd	r25, Y+3	; 0x03
 d7c:	93 83       	std	Z+3, r25	; 0x03
 d7e:	82 83       	std	Z+2, r24	; 0x02
 d80:	21 15       	cp	r18, r1
 d82:	31 05       	cpc	r19, r1
 d84:	29 f4       	brne	.+10     	; 0xd90 <free+0x92>
 d86:	f0 93 29 02 	sts	0x0229, r31	; 0x800229 <__flp+0x1>
 d8a:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <__flp>
 d8e:	3d c0       	rjmp	.+122    	; 0xe0a <free+0x10c>
 d90:	e9 01       	movw	r28, r18
 d92:	fb 83       	std	Y+3, r31	; 0x03
 d94:	ea 83       	std	Y+2, r30	; 0x02
 d96:	49 91       	ld	r20, Y+
 d98:	59 91       	ld	r21, Y+
 d9a:	c4 0f       	add	r28, r20
 d9c:	d5 1f       	adc	r29, r21
 d9e:	ec 17       	cp	r30, r28
 da0:	fd 07       	cpc	r31, r29
 da2:	61 f4       	brne	.+24     	; 0xdbc <free+0xbe>
 da4:	80 81       	ld	r24, Z
 da6:	91 81       	ldd	r25, Z+1	; 0x01
 da8:	84 0f       	add	r24, r20
 daa:	95 1f       	adc	r25, r21
 dac:	02 96       	adiw	r24, 0x02	; 2
 dae:	e9 01       	movw	r28, r18
 db0:	99 83       	std	Y+1, r25	; 0x01
 db2:	88 83       	st	Y, r24
 db4:	82 81       	ldd	r24, Z+2	; 0x02
 db6:	93 81       	ldd	r25, Z+3	; 0x03
 db8:	9b 83       	std	Y+3, r25	; 0x03
 dba:	8a 83       	std	Y+2, r24	; 0x02
 dbc:	e0 e0       	ldi	r30, 0x00	; 0
 dbe:	f0 e0       	ldi	r31, 0x00	; 0
 dc0:	12 96       	adiw	r26, 0x02	; 2
 dc2:	8d 91       	ld	r24, X+
 dc4:	9c 91       	ld	r25, X
 dc6:	13 97       	sbiw	r26, 0x03	; 3
 dc8:	00 97       	sbiw	r24, 0x00	; 0
 dca:	19 f0       	breq	.+6      	; 0xdd2 <free+0xd4>
 dcc:	fd 01       	movw	r30, r26
 dce:	dc 01       	movw	r26, r24
 dd0:	f7 cf       	rjmp	.-18     	; 0xdc0 <free+0xc2>
 dd2:	8d 91       	ld	r24, X+
 dd4:	9c 91       	ld	r25, X
 dd6:	11 97       	sbiw	r26, 0x01	; 1
 dd8:	9d 01       	movw	r18, r26
 dda:	2e 5f       	subi	r18, 0xFE	; 254
 ddc:	3f 4f       	sbci	r19, 0xFF	; 255
 dde:	82 0f       	add	r24, r18
 de0:	93 1f       	adc	r25, r19
 de2:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <__brkval>
 de6:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <__brkval+0x1>
 dea:	28 17       	cp	r18, r24
 dec:	39 07       	cpc	r19, r25
 dee:	69 f4       	brne	.+26     	; 0xe0a <free+0x10c>
 df0:	30 97       	sbiw	r30, 0x00	; 0
 df2:	29 f4       	brne	.+10     	; 0xdfe <free+0x100>
 df4:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <__flp+0x1>
 df8:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <__flp>
 dfc:	02 c0       	rjmp	.+4      	; 0xe02 <free+0x104>
 dfe:	13 82       	std	Z+3, r1	; 0x03
 e00:	12 82       	std	Z+2, r1	; 0x02
 e02:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <__brkval+0x1>
 e06:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <__brkval>
 e0a:	df 91       	pop	r29
 e0c:	cf 91       	pop	r28
 e0e:	08 95       	ret

00000e10 <strnlen_P>:
 e10:	fc 01       	movw	r30, r24
 e12:	05 90       	lpm	r0, Z+
 e14:	61 50       	subi	r22, 0x01	; 1
 e16:	70 40       	sbci	r23, 0x00	; 0
 e18:	01 10       	cpse	r0, r1
 e1a:	d8 f7       	brcc	.-10     	; 0xe12 <strnlen_P+0x2>
 e1c:	80 95       	com	r24
 e1e:	90 95       	com	r25
 e20:	8e 0f       	add	r24, r30
 e22:	9f 1f       	adc	r25, r31
 e24:	08 95       	ret

00000e26 <memset>:
 e26:	dc 01       	movw	r26, r24
 e28:	01 c0       	rjmp	.+2      	; 0xe2c <memset+0x6>
 e2a:	6d 93       	st	X+, r22
 e2c:	41 50       	subi	r20, 0x01	; 1
 e2e:	50 40       	sbci	r21, 0x00	; 0
 e30:	e0 f7       	brcc	.-8      	; 0xe2a <memset+0x4>
 e32:	08 95       	ret

00000e34 <strnlen>:
 e34:	fc 01       	movw	r30, r24
 e36:	61 50       	subi	r22, 0x01	; 1
 e38:	70 40       	sbci	r23, 0x00	; 0
 e3a:	01 90       	ld	r0, Z+
 e3c:	01 10       	cpse	r0, r1
 e3e:	d8 f7       	brcc	.-10     	; 0xe36 <strnlen+0x2>
 e40:	80 95       	com	r24
 e42:	90 95       	com	r25
 e44:	8e 0f       	add	r24, r30
 e46:	9f 1f       	adc	r25, r31
 e48:	08 95       	ret

00000e4a <fputc>:
 e4a:	0f 93       	push	r16
 e4c:	1f 93       	push	r17
 e4e:	cf 93       	push	r28
 e50:	df 93       	push	r29
 e52:	fb 01       	movw	r30, r22
 e54:	23 81       	ldd	r18, Z+3	; 0x03
 e56:	21 fd       	sbrc	r18, 1
 e58:	03 c0       	rjmp	.+6      	; 0xe60 <fputc+0x16>
 e5a:	8f ef       	ldi	r24, 0xFF	; 255
 e5c:	9f ef       	ldi	r25, 0xFF	; 255
 e5e:	2c c0       	rjmp	.+88     	; 0xeb8 <fputc+0x6e>
 e60:	22 ff       	sbrs	r18, 2
 e62:	16 c0       	rjmp	.+44     	; 0xe90 <fputc+0x46>
 e64:	46 81       	ldd	r20, Z+6	; 0x06
 e66:	57 81       	ldd	r21, Z+7	; 0x07
 e68:	24 81       	ldd	r18, Z+4	; 0x04
 e6a:	35 81       	ldd	r19, Z+5	; 0x05
 e6c:	42 17       	cp	r20, r18
 e6e:	53 07       	cpc	r21, r19
 e70:	44 f4       	brge	.+16     	; 0xe82 <fputc+0x38>
 e72:	a0 81       	ld	r26, Z
 e74:	b1 81       	ldd	r27, Z+1	; 0x01
 e76:	9d 01       	movw	r18, r26
 e78:	2f 5f       	subi	r18, 0xFF	; 255
 e7a:	3f 4f       	sbci	r19, 0xFF	; 255
 e7c:	31 83       	std	Z+1, r19	; 0x01
 e7e:	20 83       	st	Z, r18
 e80:	8c 93       	st	X, r24
 e82:	26 81       	ldd	r18, Z+6	; 0x06
 e84:	37 81       	ldd	r19, Z+7	; 0x07
 e86:	2f 5f       	subi	r18, 0xFF	; 255
 e88:	3f 4f       	sbci	r19, 0xFF	; 255
 e8a:	37 83       	std	Z+7, r19	; 0x07
 e8c:	26 83       	std	Z+6, r18	; 0x06
 e8e:	14 c0       	rjmp	.+40     	; 0xeb8 <fputc+0x6e>
 e90:	8b 01       	movw	r16, r22
 e92:	ec 01       	movw	r28, r24
 e94:	fb 01       	movw	r30, r22
 e96:	00 84       	ldd	r0, Z+8	; 0x08
 e98:	f1 85       	ldd	r31, Z+9	; 0x09
 e9a:	e0 2d       	mov	r30, r0
 e9c:	09 95       	icall
 e9e:	89 2b       	or	r24, r25
 ea0:	e1 f6       	brne	.-72     	; 0xe5a <fputc+0x10>
 ea2:	d8 01       	movw	r26, r16
 ea4:	16 96       	adiw	r26, 0x06	; 6
 ea6:	8d 91       	ld	r24, X+
 ea8:	9c 91       	ld	r25, X
 eaa:	17 97       	sbiw	r26, 0x07	; 7
 eac:	01 96       	adiw	r24, 0x01	; 1
 eae:	17 96       	adiw	r26, 0x07	; 7
 eb0:	9c 93       	st	X, r25
 eb2:	8e 93       	st	-X, r24
 eb4:	16 97       	sbiw	r26, 0x06	; 6
 eb6:	ce 01       	movw	r24, r28
 eb8:	df 91       	pop	r29
 eba:	cf 91       	pop	r28
 ebc:	1f 91       	pop	r17
 ebe:	0f 91       	pop	r16
 ec0:	08 95       	ret

00000ec2 <__ultoa_invert>:
 ec2:	fa 01       	movw	r30, r20
 ec4:	aa 27       	eor	r26, r26
 ec6:	28 30       	cpi	r18, 0x08	; 8
 ec8:	51 f1       	breq	.+84     	; 0xf1e <__ultoa_invert+0x5c>
 eca:	20 31       	cpi	r18, 0x10	; 16
 ecc:	81 f1       	breq	.+96     	; 0xf2e <__ultoa_invert+0x6c>
 ece:	e8 94       	clt
 ed0:	6f 93       	push	r22
 ed2:	6e 7f       	andi	r22, 0xFE	; 254
 ed4:	6e 5f       	subi	r22, 0xFE	; 254
 ed6:	7f 4f       	sbci	r23, 0xFF	; 255
 ed8:	8f 4f       	sbci	r24, 0xFF	; 255
 eda:	9f 4f       	sbci	r25, 0xFF	; 255
 edc:	af 4f       	sbci	r26, 0xFF	; 255
 ede:	b1 e0       	ldi	r27, 0x01	; 1
 ee0:	3e d0       	rcall	.+124    	; 0xf5e <__ultoa_invert+0x9c>
 ee2:	b4 e0       	ldi	r27, 0x04	; 4
 ee4:	3c d0       	rcall	.+120    	; 0xf5e <__ultoa_invert+0x9c>
 ee6:	67 0f       	add	r22, r23
 ee8:	78 1f       	adc	r23, r24
 eea:	89 1f       	adc	r24, r25
 eec:	9a 1f       	adc	r25, r26
 eee:	a1 1d       	adc	r26, r1
 ef0:	68 0f       	add	r22, r24
 ef2:	79 1f       	adc	r23, r25
 ef4:	8a 1f       	adc	r24, r26
 ef6:	91 1d       	adc	r25, r1
 ef8:	a1 1d       	adc	r26, r1
 efa:	6a 0f       	add	r22, r26
 efc:	71 1d       	adc	r23, r1
 efe:	81 1d       	adc	r24, r1
 f00:	91 1d       	adc	r25, r1
 f02:	a1 1d       	adc	r26, r1
 f04:	20 d0       	rcall	.+64     	; 0xf46 <__ultoa_invert+0x84>
 f06:	09 f4       	brne	.+2      	; 0xf0a <__ultoa_invert+0x48>
 f08:	68 94       	set
 f0a:	3f 91       	pop	r19
 f0c:	2a e0       	ldi	r18, 0x0A	; 10
 f0e:	26 9f       	mul	r18, r22
 f10:	11 24       	eor	r1, r1
 f12:	30 19       	sub	r19, r0
 f14:	30 5d       	subi	r19, 0xD0	; 208
 f16:	31 93       	st	Z+, r19
 f18:	de f6       	brtc	.-74     	; 0xed0 <__ultoa_invert+0xe>
 f1a:	cf 01       	movw	r24, r30
 f1c:	08 95       	ret
 f1e:	46 2f       	mov	r20, r22
 f20:	47 70       	andi	r20, 0x07	; 7
 f22:	40 5d       	subi	r20, 0xD0	; 208
 f24:	41 93       	st	Z+, r20
 f26:	b3 e0       	ldi	r27, 0x03	; 3
 f28:	0f d0       	rcall	.+30     	; 0xf48 <__ultoa_invert+0x86>
 f2a:	c9 f7       	brne	.-14     	; 0xf1e <__ultoa_invert+0x5c>
 f2c:	f6 cf       	rjmp	.-20     	; 0xf1a <__ultoa_invert+0x58>
 f2e:	46 2f       	mov	r20, r22
 f30:	4f 70       	andi	r20, 0x0F	; 15
 f32:	40 5d       	subi	r20, 0xD0	; 208
 f34:	4a 33       	cpi	r20, 0x3A	; 58
 f36:	18 f0       	brcs	.+6      	; 0xf3e <__ultoa_invert+0x7c>
 f38:	49 5d       	subi	r20, 0xD9	; 217
 f3a:	31 fd       	sbrc	r19, 1
 f3c:	40 52       	subi	r20, 0x20	; 32
 f3e:	41 93       	st	Z+, r20
 f40:	02 d0       	rcall	.+4      	; 0xf46 <__ultoa_invert+0x84>
 f42:	a9 f7       	brne	.-22     	; 0xf2e <__ultoa_invert+0x6c>
 f44:	ea cf       	rjmp	.-44     	; 0xf1a <__ultoa_invert+0x58>
 f46:	b4 e0       	ldi	r27, 0x04	; 4
 f48:	a6 95       	lsr	r26
 f4a:	97 95       	ror	r25
 f4c:	87 95       	ror	r24
 f4e:	77 95       	ror	r23
 f50:	67 95       	ror	r22
 f52:	ba 95       	dec	r27
 f54:	c9 f7       	brne	.-14     	; 0xf48 <__ultoa_invert+0x86>
 f56:	00 97       	sbiw	r24, 0x00	; 0
 f58:	61 05       	cpc	r22, r1
 f5a:	71 05       	cpc	r23, r1
 f5c:	08 95       	ret
 f5e:	9b 01       	movw	r18, r22
 f60:	ac 01       	movw	r20, r24
 f62:	0a 2e       	mov	r0, r26
 f64:	06 94       	lsr	r0
 f66:	57 95       	ror	r21
 f68:	47 95       	ror	r20
 f6a:	37 95       	ror	r19
 f6c:	27 95       	ror	r18
 f6e:	ba 95       	dec	r27
 f70:	c9 f7       	brne	.-14     	; 0xf64 <__ultoa_invert+0xa2>
 f72:	62 0f       	add	r22, r18
 f74:	73 1f       	adc	r23, r19
 f76:	84 1f       	adc	r24, r20
 f78:	95 1f       	adc	r25, r21
 f7a:	a0 1d       	adc	r26, r0
 f7c:	08 95       	ret

00000f7e <__prologue_saves__>:
 f7e:	2f 92       	push	r2
 f80:	3f 92       	push	r3
 f82:	4f 92       	push	r4
 f84:	5f 92       	push	r5
 f86:	6f 92       	push	r6
 f88:	7f 92       	push	r7
 f8a:	8f 92       	push	r8
 f8c:	9f 92       	push	r9
 f8e:	af 92       	push	r10
 f90:	bf 92       	push	r11
 f92:	cf 92       	push	r12
 f94:	df 92       	push	r13
 f96:	ef 92       	push	r14
 f98:	ff 92       	push	r15
 f9a:	0f 93       	push	r16
 f9c:	1f 93       	push	r17
 f9e:	cf 93       	push	r28
 fa0:	df 93       	push	r29
 fa2:	cd b7       	in	r28, 0x3d	; 61
 fa4:	de b7       	in	r29, 0x3e	; 62
 fa6:	ca 1b       	sub	r28, r26
 fa8:	db 0b       	sbc	r29, r27
 faa:	0f b6       	in	r0, 0x3f	; 63
 fac:	f8 94       	cli
 fae:	de bf       	out	0x3e, r29	; 62
 fb0:	0f be       	out	0x3f, r0	; 63
 fb2:	cd bf       	out	0x3d, r28	; 61
 fb4:	09 94       	ijmp

00000fb6 <__epilogue_restores__>:
 fb6:	2a 88       	ldd	r2, Y+18	; 0x12
 fb8:	39 88       	ldd	r3, Y+17	; 0x11
 fba:	48 88       	ldd	r4, Y+16	; 0x10
 fbc:	5f 84       	ldd	r5, Y+15	; 0x0f
 fbe:	6e 84       	ldd	r6, Y+14	; 0x0e
 fc0:	7d 84       	ldd	r7, Y+13	; 0x0d
 fc2:	8c 84       	ldd	r8, Y+12	; 0x0c
 fc4:	9b 84       	ldd	r9, Y+11	; 0x0b
 fc6:	aa 84       	ldd	r10, Y+10	; 0x0a
 fc8:	b9 84       	ldd	r11, Y+9	; 0x09
 fca:	c8 84       	ldd	r12, Y+8	; 0x08
 fcc:	df 80       	ldd	r13, Y+7	; 0x07
 fce:	ee 80       	ldd	r14, Y+6	; 0x06
 fd0:	fd 80       	ldd	r15, Y+5	; 0x05
 fd2:	0c 81       	ldd	r16, Y+4	; 0x04
 fd4:	1b 81       	ldd	r17, Y+3	; 0x03
 fd6:	aa 81       	ldd	r26, Y+2	; 0x02
 fd8:	b9 81       	ldd	r27, Y+1	; 0x01
 fda:	ce 0f       	add	r28, r30
 fdc:	d1 1d       	adc	r29, r1
 fde:	0f b6       	in	r0, 0x3f	; 63
 fe0:	f8 94       	cli
 fe2:	de bf       	out	0x3e, r29	; 62
 fe4:	0f be       	out	0x3f, r0	; 63
 fe6:	cd bf       	out	0x3d, r28	; 61
 fe8:	ed 01       	movw	r28, r26
 fea:	08 95       	ret

00000fec <_exit>:
 fec:	f8 94       	cli

00000fee <__stop_program>:
 fee:	ff cf       	rjmp	.-2      	; 0xfee <__stop_program>
